
Atollic_405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002224  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005030  080023b0  080023b0  000123b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000010a0  20000000  080073e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000210a0  2**0
                  CONTENTS
  7 .bss          00000044  200010a0  200010a0  000210a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200010e4  200010e4  000210a0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000210a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002571  00000000  00000000  000210d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000056c  00000000  00000000  00023641  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000d8  00000000  00000000  00023bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00023c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000086e  00000000  00000000  00023d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001448  00000000  00000000  000245a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000259ee  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000688  00000000  00000000  00025a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000260f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200010a0 	.word	0x200010a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002394 	.word	0x08002394

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200010a4 	.word	0x200010a4
 80001c4:	08002394 	.word	0x08002394

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000b16:	4909      	ldr	r1, [pc, #36]	; (8000b3c <NVIC_EnableIRQ+0x30>)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	095b      	lsrs	r3, r3, #5
 8000b1e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b22:	f002 021f 	and.w	r2, r2, #31
 8000b26:	2001      	movs	r0, #1
 8000b28:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da0b      	bge.n	8000b6c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000b54:	490d      	ldr	r1, [pc, #52]	; (8000b8c <NVIC_SetPriority+0x4c>)
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 030f 	and.w	r3, r3, #15
 8000b5c:	3b04      	subs	r3, #4
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000b6a:	e009      	b.n	8000b80 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000b6c:	4908      	ldr	r1, [pc, #32]	; (8000b90 <NVIC_SetPriority+0x50>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <_Z18SystemClock_Configv>:
1110: system clock divided by 256
1111: system clock divided by 512
*/

void SystemClock_Config(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
	uint32_t temp = 0x00000000;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]

	/* Enable Power Control clock */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;   // Enable PWREN bit (page - 183 of RM)
 8000b9e:	4a3f      	ldr	r2, [pc, #252]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	PWR->CR |= 0x00004000;    //VOS bit = 01 (page - 145 or RM)
 8000baa:	4a3d      	ldr	r2, [pc, #244]	; (8000ca0 <_Z18SystemClock_Configv+0x10c>)
 8000bac:	4b3c      	ldr	r3, [pc, #240]	; (8000ca0 <_Z18SystemClock_Configv+0x10c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6013      	str	r3, [r2, #0]
	/**************************************************************************/

#ifdef USE_HSE
	//RCC->CR &= ~0x00000001; // HSI OFF, not guaranteed, but does not matter, may be slight increase in current
	RCC->CR |= 0x00010000;    // HSE ON
 8000bb6:	4a39      	ldr	r2, [pc, #228]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000bb8:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc0:	6013      	str	r3, [r2, #0]
	while((RCC->CR & 0x00020000) == 0);   // Wait till HSE is ready
 8000bc2:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf0c      	ite	eq
 8000bce:	2301      	moveq	r3, #1
 8000bd0:	2300      	movne	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d000      	beq.n	8000bda <_Z18SystemClock_Configv+0x46>
 8000bd8:	e7f3      	b.n	8000bc2 <_Z18SystemClock_Configv+0x2e>

	// Set PLL
	temp = 0x00400000;    // PLL source is HSE (PLLSRC bit is set to one)
 8000bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bde:	607b      	str	r3, [r7, #4]
	//RCC->CR &= ~0x00010000; // HSE OFF, not guaranteed, but does not matter, may be slight increase in current
	while((RCC->CR & 0x00000002) == 0);   // Wait till HSI is ready
#endif

	//	Set the clock multipliers and dividers
	temp |= (uint32_t)PLL_M;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)PLL_N << 6);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000bee:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)PLL_P << 16);
	temp |= ((uint32_t)PLL_Q << 24);
	RCC->PLLCFGR = temp;
 8000bf0:	4a2a      	ldr	r2, [pc, #168]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6053      	str	r3, [r2, #4]

	//	Set AHB, APB1 and APB2 prescalars
	temp = RCC->CFGR;
 8000bf6:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)AHB_PRESCALAR << 4);
	temp |= ((uint32_t)APB1_PRESCALAR << 10);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c02:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)APB2_PRESCALAR << 13);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000c0a:	607b      	str	r3, [r7, #4]
	temp |= RCC_CFGR_SW_1;           // Select PLL as SYSCLK
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	607b      	str	r3, [r7, #4]
	RCC->CFGR = temp;
 8000c14:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6093      	str	r3, [r2, #8]

	// The Flash access control register is used to enable/disable the acceleration features and control the Flash memory access time according to CPU frequency
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS; // FLASH_LATENCY_5
 8000c1a:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <_Z18SystemClock_Configv+0x110>)
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <_Z18SystemClock_Configv+0x110>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f043 0305 	orr.w	r3, r3, #5
 8000c24:	6013      	str	r3, [r2, #0]

	// Switch ON the PLL
	RCC->CR |= RCC_CR_PLLON;    // PLL ON
 8000c26:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c30:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);   // Wait till PLL is ready
 8000c32:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf0c      	ite	eq
 8000c3e:	2301      	moveq	r3, #1
 8000c40:	2300      	movne	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d000      	beq.n	8000c4a <_Z18SystemClock_Configv+0xb6>
 8000c48:	e7f3      	b.n	8000c32 <_Z18SystemClock_Configv+0x9e>

	// wait till PLL is really used as SYSCLK
	while((RCC->CFGR & RCC_CFGR_SWS_PLL) == 0); // System clock switch status SWS = 0b10 = PLL is really selected
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <_Z18SystemClock_Configv+0x108>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf0c      	ite	eq
 8000c56:	2301      	moveq	r3, #1
 8000c58:	2300      	movne	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d000      	beq.n	8000c62 <_Z18SystemClock_Configv+0xce>
 8000c60:	e7f3      	b.n	8000c4a <_Z18SystemClock_Configv+0xb6>

	// STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported
	volatile uint32_t idNumber = DBGMCU->IDCODE;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <_Z18SystemClock_Configv+0x114>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	603b      	str	r3, [r7, #0]
	idNumber = idNumber >> 16;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	0c1b      	lsrs	r3, r3, #16
 8000c6c:	603b      	str	r3, [r7, #0]

	// Enable the Flash prefetch
	if(idNumber == 0x1001)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	f241 0201 	movw	r2, #4097	; 0x1001
 8000c74:	4293      	cmp	r3, r2
 8000c76:	bf0c      	ite	eq
 8000c78:	2301      	moveq	r3, #1
 8000c7a:	2300      	movne	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <_Z18SystemClock_Configv+0xfa>
	{
	  FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <_Z18SystemClock_Configv+0x110>)
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_Z18SystemClock_Configv+0x110>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8c:	6013      	str	r3, [r2, #0]
	}
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40007000 	.word	0x40007000
 8000ca4:	40023c00 	.word	0x40023c00
 8000ca8:	e0042000 	.word	0xe0042000

08000cac <_Z7InitDACv>:
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;			// Enable SysTick interrupt
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;			// Enable SysTick
}

void InitDAC()
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	// Once the DAC channelx is enabled, the corresponding GPIO pin (PA4 or PA5) is automatically connected to the analog converter output (DAC_OUTx).
	// In order to avoid parasitic consumption, the PA4 or PA5 pin should first be configured to analog (AIN).

	// Enable DAC and GPIO Clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// Enable GPIO Clock
 8000cb0:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <_Z7InitDACv+0x88>)
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <_Z7InitDACv+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;		// Enable DAC Clock
 8000cbc:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <_Z7InitDACv+0x88>)
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <_Z7InitDACv+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40

	DAC->CR |= DAC_CR_EN1;			// Enable DAC using PA4 (DAC_OUT1)
 8000cc8:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_BOFF1;		// Enable DAC channel output buffer to reduce the output impedance
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TEN1;			// DAC 1 enable trigger
 8000ce0:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TSEL1;		// Set trigger to software (0b111: Software trigger)
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000cf6:	6013      	str	r3, [r2, #0]

	DAC->CR |= DAC_CR_EN2;			// Enable DAC using PA5 (DAC_OUT2)
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d02:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_BOFF2;		// Enable DAC channel output buffer
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0e:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TEN2;			// DAC 2 enable trigger
 8000d10:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TSEL2;		// Set trigger to software (0b111: Software trigger)
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <_Z7InitDACv+0x8c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000d26:	6013      	str	r3, [r2, #0]

}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40007400 	.word	0x40007400

08000d3c <_Z6InitIOv>:


void InitIO()
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	// PC6 Button in
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;			// reset and clock control - advanced high performamnce bus - GPIO port C
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <_Z6InitIOv+0x34>)
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <_Z6InitIOv+0x34>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~(GPIO_MODER_MODER6);			// input mode is default
 8000d4c:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <_Z6InitIOv+0x38>)
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <_Z6InitIOv+0x38>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d56:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR6_0;			// Set pin to pull up
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <_Z6InitIOv+0x38>)
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <_Z6InitIOv+0x38>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d62:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR |= EXTI_RTSR_TR13;					// Enable rising edge trigger for line 13
	EXTI->IMR |= EXTI_IMR_MR13;						// Activate interrupt using mask register 13

	NVIC_SetPriority(EXTI15_10_IRQn, 3);
	NVIC_EnableIRQ(EXTI15_10_IRQn);*/
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020800 	.word	0x40020800

08000d78 <_Z9InitTimerv>:


void InitTimer()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	//	Setup Timer 3 on an interrupt to trigger sample loading
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;		// Enable Timer 3
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <_Z9InitTimerv+0x6c>)
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <_Z9InitTimerv+0x6c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = (SystemCoreClock / SAMPLERATE) / 4;	// Set prescaler to fire at sample rate - this is divided by 4 to match the APB2 prescaler
 8000d88:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <_Z9InitTimerv+0x70>)
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <_Z9InitTimerv+0x74>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4918      	ldr	r1, [pc, #96]	; (8000df0 <_Z9InitTimerv+0x78>)
 8000d90:	fba1 1303 	umull	r1, r3, r1, r3
 8000d94:	0b1b      	lsrs	r3, r3, #12
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	8513      	strh	r3, [r2, #40]	; 0x28
	TIM3->ARR = 1; //SystemCoreClock / 48000 - 1;	// Set maximum count value (auto reload register) - set to system clock / sampling rate
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_Z9InitTimerv+0x70>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c

	SET_BIT(TIM3->DIER, TIM_DIER_UIE);				//  DMA/interrupt enable register
 8000da0:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <_Z9InitTimerv+0x70>)
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_Z9InitTimerv+0x70>)
 8000da4:	899b      	ldrh	r3, [r3, #12]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	8193      	strh	r3, [r2, #12]
	NVIC_EnableIRQ(TIM3_IRQn);
 8000db0:	201d      	movs	r0, #29
 8000db2:	f7ff feab 	bl	8000b0c <NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 6);
 8000db6:	2106      	movs	r1, #6
 8000db8:	201d      	movs	r0, #29
 8000dba:	f7ff fec1 	bl	8000b40 <NVIC_SetPriority>

	SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <_Z9InitTimerv+0x70>)
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <_Z9InitTimerv+0x70>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	8013      	strh	r3, [r2, #0]
	SET_BIT(TIM3->EGR, TIM_EGR_UG);
 8000dce:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <_Z9InitTimerv+0x70>)
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <_Z9InitTimerv+0x70>)
 8000dd2:	8a9b      	ldrh	r3, [r3, #20]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	8293      	strh	r3, [r2, #20]
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40000400 	.word	0x40000400
 8000dec:	20001024 	.word	0x20001024
 8000df0:	057619f1 	.word	0x057619f1

08000df4 <_Z7InitADCv>:

void InitADC(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	//	Setup Timer 2 to trigger ADC
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// Enable Timer 2 clock
 8000df8:	4a8a      	ldr	r2, [pc, #552]	; (8001024 <_Z7InitADCv+0x230>)
 8000dfa:	4b8a      	ldr	r3, [pc, #552]	; (8001024 <_Z7InitADCv+0x230>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->CR2 |= TIM_CR2_MMS_2;						// 100: Compare - OC1REF signal is used as trigger output (TRGO)
 8000e04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0c:	889b      	ldrh	r3, [r3, #4]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	8093      	strh	r3, [r2, #4]
	TIM2->PSC = 20 - 1;								// Prescaler
 8000e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1c:	2213      	movs	r2, #19
 8000e1e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100 - 1;							// Auto-reload register (ie reset counter) divided by 100
 8000e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e24:	2263      	movs	r2, #99	; 0x63
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 50 - 1;							// Capture and compare - ie when counter hits this number PWM high
 8000e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2c:	2231      	movs	r2, #49	; 0x31
 8000e2e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E;					// Capture/Compare 1 output enable
 8000e30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e38:	8c1b      	ldrh	r3, [r3, #32]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	8413      	strh	r3, [r2, #32]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 |TIM_CCMR1_OC1M_2;	// 110 PWM Mode 1
 8000e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e4c:	8b1b      	ldrh	r3, [r3, #24]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	8313      	strh	r3, [r2, #24]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000e58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	8013      	strh	r3, [r2, #0]

	// Enable ADC2 and GPIO clock sources
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000e6c:	4a6d      	ldr	r2, [pc, #436]	; (8001024 <_Z7InitADCv+0x230>)
 8000e6e:	4b6d      	ldr	r3, [pc, #436]	; (8001024 <_Z7InitADCv+0x230>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000e78:	4a6a      	ldr	r2, [pc, #424]	; (8001024 <_Z7InitADCv+0x230>)
 8000e7a:	4b6a      	ldr	r3, [pc, #424]	; (8001024 <_Z7InitADCv+0x230>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8000e84:	4a67      	ldr	r2, [pc, #412]	; (8001024 <_Z7InitADCv+0x230>)
 8000e86:	4b67      	ldr	r3, [pc, #412]	; (8001024 <_Z7InitADCv+0x230>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6453      	str	r3, [r2, #68]	; 0x44

	// Enable ADC on PB0 mode: ADC12_IN8; PB1 mode: ADC12_IN9; PA1 mode: ADC123_IN1; PA2 mode: ADC123_IN2
	GPIOB->MODER |= GPIO_MODER_MODER1;				// Set PB1 to Analog mode (0b11)
 8000e90:	4a65      	ldr	r2, [pc, #404]	; (8001028 <_Z7InitADCv+0x234>)
 8000e92:	4b65      	ldr	r3, [pc, #404]	; (8001028 <_Z7InitADCv+0x234>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f043 030c 	orr.w	r3, r3, #12
 8000e9a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER0;				// Set PB0 to Analog mode (0b11)
 8000e9c:	4a62      	ldr	r2, [pc, #392]	; (8001028 <_Z7InitADCv+0x234>)
 8000e9e:	4b62      	ldr	r3, [pc, #392]	; (8001028 <_Z7InitADCv+0x234>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f043 0303 	orr.w	r3, r3, #3
 8000ea6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER1;				// Set PA1 to Analog mode (0b11)
 8000ea8:	4a60      	ldr	r2, [pc, #384]	; (800102c <_Z7InitADCv+0x238>)
 8000eaa:	4b60      	ldr	r3, [pc, #384]	; (800102c <_Z7InitADCv+0x238>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f043 030c 	orr.w	r3, r3, #12
 8000eb2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2;				// Set PA2 to Analog mode (0b11)
 8000eb4:	4a5d      	ldr	r2, [pc, #372]	; (800102c <_Z7InitADCv+0x238>)
 8000eb6:	4b5d      	ldr	r3, [pc, #372]	; (800102c <_Z7InitADCv+0x238>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ebe:	6013      	str	r3, [r2, #0]
	ADC2->CR1 |= ADC_CR1_SCAN;						// Activate scan mode
 8000ec0:	4a5b      	ldr	r2, [pc, #364]	; (8001030 <_Z7InitADCv+0x23c>)
 8000ec2:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <_Z7InitADCv+0x23c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6053      	str	r3, [r2, #4]
	ADC2->SQR1 = (ADC_BUFFER_LENGTH - 1) << 20;		// 4 conversions in sequence
 8000ecc:	4b58      	ldr	r3, [pc, #352]	; (8001030 <_Z7InitADCv+0x23c>)
 8000ece:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC2->SQR3 |= 8 << 0;							// Set ADC12_IN8 to first conversion in sequence
 8000ed4:	4a56      	ldr	r2, [pc, #344]	; (8001030 <_Z7InitADCv+0x23c>)
 8000ed6:	4b56      	ldr	r3, [pc, #344]	; (8001030 <_Z7InitADCv+0x23c>)
 8000ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 9 << 5;							// Set ADC12_IN9 to second conversion in sequence
 8000ee0:	4a53      	ldr	r2, [pc, #332]	; (8001030 <_Z7InitADCv+0x23c>)
 8000ee2:	4b53      	ldr	r3, [pc, #332]	; (8001030 <_Z7InitADCv+0x23c>)
 8000ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8000eea:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 1 << 10;							// Set ADC123_IN1 to third conversion in sequence
 8000eec:	4a50      	ldr	r2, [pc, #320]	; (8001030 <_Z7InitADCv+0x23c>)
 8000eee:	4b50      	ldr	r3, [pc, #320]	; (8001030 <_Z7InitADCv+0x23c>)
 8000ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef6:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 2 << 15;							// Set ADC123_IN1 to third conversion in sequence
 8000ef8:	4a4d      	ldr	r2, [pc, #308]	; (8001030 <_Z7InitADCv+0x23c>)
 8000efa:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <_Z7InitADCv+0x23c>)
 8000efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f02:	6353      	str	r3, [r2, #52]	; 0x34

	//	Set to 56 cycles (0b11) sampling speed (Left shift speed 3 x ADC_INx)
	ADC2->SMPR2 |= 0b11 << 24;						// Set speed of IN8
 8000f04:	4a4a      	ldr	r2, [pc, #296]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f06:	4b4a      	ldr	r3, [pc, #296]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000f0e:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 27;						// Set speed of IN9
 8000f10:	4a47      	ldr	r2, [pc, #284]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f12:	4b47      	ldr	r3, [pc, #284]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8000f1a:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 3;						// Set speed of IN1
 8000f1c:	4a44      	ldr	r2, [pc, #272]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f1e:	4b44      	ldr	r3, [pc, #272]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	f043 0318 	orr.w	r3, r3, #24
 8000f26:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 6;						// Set speed of IN2
 8000f28:	4a41      	ldr	r2, [pc, #260]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f32:	6113      	str	r3, [r2, #16]

	ADC2->CR2 |= ADC_CR2_EOCS;						// Trigger interrupt on end of each individual conversion
 8000f34:	4a3e      	ldr	r2, [pc, #248]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f36:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3e:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_EXTEN_0;					// ADC hardware trigger 00: Trigger detection disabled; 01: Trigger detection on the rising edge; 10: Trigger detection on the falling edge; 11: Trigger detection on both the rising and falling edges
 8000f40:	4a3b      	ldr	r2, [pc, #236]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f42:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;	// ADC External trigger: 0110 = TIM2_TRGO event
 8000f4c:	4a38      	ldr	r2, [pc, #224]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f4e:	4b38      	ldr	r3, [pc, #224]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000f56:	6093      	str	r3, [r2, #8]

	// Enable DMA - DMA2, Channel 1, Stream 2  = ADC2 (Manual p207)
	ADC2->CR2 |= ADC_CR2_DMA;						// Enable DMA Mode on ADC2
 8000f58:	4a35      	ldr	r2, [pc, #212]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f62:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DDS;						// DMA requests are issued as long as data are converted and DMA=1
 8000f64:	4a32      	ldr	r2, [pc, #200]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f66:	4b32      	ldr	r3, [pc, #200]	; (8001030 <_Z7InitADCv+0x23c>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6e:	6093      	str	r3, [r2, #8]
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000f70:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <_Z7InitADCv+0x230>)
 8000f72:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <_Z7InitADCv+0x230>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2_Stream2->CR &= ~DMA_SxCR_DIR;				// 00 = Peripheral-to-memory
 8000f7c:	4a2d      	ldr	r2, [pc, #180]	; (8001034 <_Z7InitADCv+0x240>)
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <_Z7InitADCv+0x240>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f86:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_PL_1;				// Priority: 00 = low; 01 = Medium; 10 = High; 11 = Very High
 8000f88:	4a2a      	ldr	r2, [pc, #168]	; (8001034 <_Z7InitADCv+0x240>)
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <_Z7InitADCv+0x240>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f92:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_PSIZE_0;			// Peripheral size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <_Z7InitADCv+0x240>)
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <_Z7InitADCv+0x240>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f9e:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_MSIZE_0;			// Memory size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8000fa0:	4a24      	ldr	r2, [pc, #144]	; (8001034 <_Z7InitADCv+0x240>)
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <_Z7InitADCv+0x240>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000faa:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR &= ~DMA_SxCR_PINC;				// Peripheral not in increment mode
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <_Z7InitADCv+0x240>)
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <_Z7InitADCv+0x240>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_MINC;				// Memory in increment mode
 8000fb8:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <_Z7InitADCv+0x240>)
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <_Z7InitADCv+0x240>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_CIRC;				// circular mode to keep refilling buffer
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <_Z7InitADCv+0x240>)
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <_Z7InitADCv+0x240>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR &= ~DMA_SxCR_DIR;				// data transfer direction: 00: peripheral-to-memory; 01: memory-to-peripheral; 10: memory-to-memory
 8000fd0:	4a18      	ldr	r2, [pc, #96]	; (8001034 <_Z7InitADCv+0x240>)
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <_Z7InitADCv+0x240>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000fda:	6013      	str	r3, [r2, #0]

	DMA2_Stream2->NDTR |= ADC_BUFFER_LENGTH;		// Number of data items to transfer (ie size of ADC buffer)
 8000fdc:	4a15      	ldr	r2, [pc, #84]	; (8001034 <_Z7InitADCv+0x240>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_Z7InitADCv+0x240>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6053      	str	r3, [r2, #4]
	DMA2_Stream2->PAR = (uint32_t)(&(ADC2->DR));	// Configure the peripheral data register address
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <_Z7InitADCv+0x240>)
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <_Z7InitADCv+0x244>)
 8000fec:	609a      	str	r2, [r3, #8]
	DMA2_Stream2->M0AR = (uint32_t)(ADC_array);		// Configure the memory address (note that M1AR is used for double-buffer mode)
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_Z7InitADCv+0x240>)
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <_Z7InitADCv+0x248>)
 8000ff2:	60da      	str	r2, [r3, #12]
	DMA2_Stream2->CR |= DMA_SxCR_CHSEL_0;			// channel select to 1 for ADC2
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <_Z7InitADCv+0x240>)
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <_Z7InitADCv+0x240>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	6013      	str	r3, [r2, #0]

	DMA2_Stream2->CR |= DMA_SxCR_EN;				// Enable DMA2
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <_Z7InitADCv+0x240>)
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <_Z7InitADCv+0x240>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6013      	str	r3, [r2, #0]
	ADC2->CR2 |= ADC_CR2_ADON;						// Activate ADC
 800100c:	4a08      	ldr	r2, [pc, #32]	; (8001030 <_Z7InitADCv+0x23c>)
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <_Z7InitADCv+0x23c>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6093      	str	r3, [r2, #8]

	DMA2_Stream0->CR |= DMA_SxCR_EN;				// Enable DMA2
	ADC1->CR2 |= ADC_CR2_ADON;						// Activate ADC*/


}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40020400 	.word	0x40020400
 800102c:	40020000 	.word	0x40020000
 8001030:	40012100 	.word	0x40012100
 8001034:	40026440 	.word	0x40026440
 8001038:	4001214c 	.word	0x4001214c
 800103c:	200010bc 	.word	0x200010bc

08001040 <_ZSt3powff>:
  using ::pow;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]
 800104a:	edc7 0a00 	vstr	s1, [r7]
 800104e:	edd7 0a00 	vldr	s1, [r7]
 8001052:	ed97 0a01 	vldr	s0, [r7, #4]
 8001056:	f000 fbdf 	bl	8001818 <powf>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	eeb0 0a67 	vmov.f32	s0, s15
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <TIM3_IRQHandler>:
uint8_t NoOfLUTs = sizeof(LUTArray) / sizeof(LUTArray[0]);

//	Use extern C to allow linker to find ISR
extern "C"
{
	void TIM3_IRQHandler(void) {
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
		// Send next samples to DAC
		if (TIM3->SR & TIM_SR_UIF) 						// if UIF flag is set
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <TIM3_IRQHandler+0x68>)
 800106e:	8a1b      	ldrh	r3, [r3, #16]
 8001070:	b29b      	uxth	r3, r3
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d01f      	beq.n	80010c4 <TIM3_IRQHandler+0x5c>
		{
			TIM3->SR &= ~TIM_SR_UIF;					// clear UIF flag
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <TIM3_IRQHandler+0x68>)
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <TIM3_IRQHandler+0x68>)
 8001088:	8a1b      	ldrh	r3, [r3, #16]
 800108a:	b29b      	uxth	r3, r3
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	b29b      	uxth	r3, r3
 8001092:	8213      	strh	r3, [r2, #16]
			DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;		// Tell the DAC to output the next value
 8001094:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <TIM3_IRQHandler+0x6c>)
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <TIM3_IRQHandler+0x6c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6053      	str	r3, [r2, #4]
			DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;		// Tell the DAC to output the next value
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <TIM3_IRQHandler+0x6c>)
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <TIM3_IRQHandler+0x6c>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	6053      	str	r3, [r2, #4]

			if (DacRead == 1)							// If the buffer has not been refilled increment overrun warning
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <TIM3_IRQHandler+0x70>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <TIM3_IRQHandler+0x56>
				overrun++;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <TIM3_IRQHandler+0x74>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <TIM3_IRQHandler+0x74>)
 80010bc:	6013      	str	r3, [r2, #0]

			DacRead = 1;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <TIM3_IRQHandler+0x70>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
		}
	}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40000400 	.word	0x40000400
 80010d4:	40007400 	.word	0x40007400
 80010d8:	200010c4 	.word	0x200010c4
 80010dc:	200010dc 	.word	0x200010dc

080010e0 <_Z11InterpolatePfRf>:
}


//	Interpolate between two positions (derived from a float and its rounded value) in a LUT
float Interpolate(float* LUT, float& LUTPosition)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	float s1 = LUT[(int) LUTPosition];
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f4:	ee17 3a90 	vmov	r3, s15
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
	float s2 = LUT[((int) LUTPosition + 1) % SineLUTSize];
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110c:	ee17 3a90 	vmov	r3, s15
 8001110:	3301      	adds	r3, #1
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <_Z11InterpolatePfRf+0x88>)
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	fb93 f1f2 	sdiv	r1, r3, r2
 800111a:	fb02 f201 	mul.w	r2, r2, r1
 800111e:	1a9b      	subs	r3, r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60bb      	str	r3, [r7, #8]
	return s1 + ((s2 - s1) * (LUTPosition - (int)LUTPosition));
 800112a:	ed97 7a02 	vldr	s14, [r7, #8]
 800112e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001132:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	edd3 6a00 	vldr	s13, [r3]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800114e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001152:	edd7 7a03 	vldr	s15, [r7, #12]
 8001156:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800115a:	eeb0 0a67 	vmov.f32	s0, s15
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	20001008 	.word	0x20001008

0800116c <_Z12GetPhaseDistPKffff>:

// Generate a phase distorted sine wave - pass LUT containing PD offsets, LUT position as a fraction of the wave cycle and a scaling factor
float GetPhaseDist(const float* PdLUT, const float LUTPosition, float scale = 1, float offset = 0){
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	ed87 0a02 	vstr	s0, [r7, #8]
 8001178:	edc7 0a01 	vstr	s1, [r7, #4]
 800117c:	ed87 1a00 	vstr	s2, [r7]
	PhaseDist = PdLUT[(int)(LUTPosition * LUTSIZE)] * LUTSIZE * scale;
 8001180:	edd7 7a02 	vldr	s15, [r7, #8]
 8001184:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001238 <_Z12GetPhaseDistPKffff+0xcc>
 8001188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001190:	ee17 3a90 	vmov	r3, s15
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001238 <_Z12GetPhaseDistPKffff+0xcc>
 80011a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <_Z12GetPhaseDistPKffff+0xd0>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]

	// Add main wave position to phase distortion position and ensure in bounds
	float Pos = ((LUTPosition + offset) * LUTSIZE) + PhaseDist;
 80011b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011b8:	edd7 7a00 	vldr	s15, [r7]
 80011bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001238 <_Z12GetPhaseDistPKffff+0xcc>
 80011c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <_Z12GetPhaseDistPKffff+0xd0>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	edc7 7a05 	vstr	s15, [r7, #20]
	while (Pos > LUTSIZE)
 80011d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011da:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001238 <_Z12GetPhaseDistPKffff+0xcc>
 80011de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	dc00      	bgt.n	80011ea <_Z12GetPhaseDistPKffff+0x7e>
 80011e8:	e008      	b.n	80011fc <_Z12GetPhaseDistPKffff+0x90>
		Pos -= LUTSIZE;
 80011ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ee:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001238 <_Z12GetPhaseDistPKffff+0xcc>
 80011f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011f6:	edc7 7a05 	vstr	s15, [r7, #20]
	while (Pos > LUTSIZE)
 80011fa:	e7ec      	b.n	80011d6 <_Z12GetPhaseDistPKffff+0x6a>
	while (Pos < 0)
 80011fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001200:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d508      	bpl.n	800121c <_Z12GetPhaseDistPKffff+0xb0>
		Pos =  LUTSIZE + Pos;
 800120a:	edd7 7a05 	vldr	s15, [r7, #20]
 800120e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001238 <_Z12GetPhaseDistPKffff+0xcc>
 8001212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001216:	edc7 7a05 	vstr	s15, [r7, #20]
	while (Pos < 0)
 800121a:	e7ef      	b.n	80011fc <_Z12GetPhaseDistPKffff+0x90>

	return Interpolate(SineLUT, Pos); 	//	interpolate samples
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <_Z12GetPhaseDistPKffff+0xd4>)
 8001224:	f7ff ff5c 	bl	80010e0 <_Z11InterpolatePfRf>
 8001228:	eef0 7a40 	vmov.f32	s15, s0
}
 800122c:	eeb0 0a67 	vmov.f32	s0, s15
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	44800000 	.word	0x44800000
 800123c:	200010cc 	.word	0x200010cc
 8001240:	20000008 	.word	0x20000008

08001244 <main>:
	return Interpolate(SineLUT, Pos); 	//	interpolate samples
}


int main(void)
{
 8001244:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001248:	b08c      	sub	sp, #48	; 0x30
 800124a:	af00      	add	r7, sp, #0
	SystemInit();					// Activates floating point coprocessor and resets clock
 800124c:	f000 fa32 	bl	80016b4 <SystemInit>
	SystemClock_Config();			// Configure the clock and PLL
 8001250:	f7ff fca0 	bl	8000b94 <_Z18SystemClock_Configv>
	SystemCoreClockUpdate();		// Update SystemCoreClock, which is the system clock frequency supplied to the SysTick timer and the processor core clock. This variable can be used by debuggers to query the frequency of the debug timer or to configure the trace clock speed.
 8001254:	f000 fa64 	bl	8001720 <SystemCoreClockUpdate>

	// Generate pitch lookup table
	int PitchLUTSize = 1024;
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
	float PitchLUT[PitchLUTSize];
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	1e59      	subs	r1, r3, #1
 8001262:	6279      	str	r1, [r7, #36]	; 0x24
 8001264:	460b      	mov	r3, r1
 8001266:	3301      	adds	r3, #1
 8001268:	461a      	mov	r2, r3
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8001272:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8001276:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800127a:	460b      	mov	r3, r1
 800127c:	3301      	adds	r3, #1
 800127e:	461a      	mov	r2, r3
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	015d      	lsls	r5, r3, #5
 8001286:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800128a:	0154      	lsls	r4, r2, #5
 800128c:	460b      	mov	r3, r1
 800128e:	3301      	adds	r3, #1
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	3303      	adds	r3, #3
 8001294:	3307      	adds	r3, #7
 8001296:	08db      	lsrs	r3, r3, #3
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	ebad 0d03 	sub.w	sp, sp, r3
 800129e:	466b      	mov	r3, sp
 80012a0:	3303      	adds	r3, #3
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	623b      	str	r3, [r7, #32]
	for (int p = 0; p < PitchLUTSize; p++){
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b0:	429a      	cmp	r2, r3
 80012b2:	da24      	bge.n	80012fe <main+0xba>
		float power = (float)(p * 4.0f) / -585.0f;
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80012c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012c6:	eddf 6abe 	vldr	s13, [pc, #760]	; 80015c0 <main+0x37c>
 80012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ce:	edc7 7a07 	vstr	s15, [r7, #28]
		PitchLUT[p] = 2272 * (float)std::pow(2.0f, power);
 80012d2:	edd7 0a07 	vldr	s1, [r7, #28]
 80012d6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012da:	f7ff feb1 	bl	8001040 <_ZSt3powff>
 80012de:	eeb0 7a40 	vmov.f32	s14, s0
 80012e2:	eddf 7ab8 	vldr	s15, [pc, #736]	; 80015c4 <main+0x380>
 80012e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ea:	6a3a      	ldr	r2, [r7, #32]
 80012ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	edc3 7a00 	vstr	s15, [r3]
	for (int p = 0; p < PitchLUTSize; p++){
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	3301      	adds	r3, #1
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012fc:	e7d6      	b.n	80012ac <main+0x68>
	}

	InitIO();				// PC6 Button in
 80012fe:	f7ff fd1d 	bl	8000d3c <_Z6InitIOv>
	InitDAC();				// DAC1 Output on PA4 (A2); DAC2 Output on PA5 (D13)
 8001302:	f7ff fcd3 	bl	8000cac <_Z7InitDACv>
	InitTimer();			// Sample output timer
 8001306:	f7ff fd37 	bl	8000d78 <_Z9InitTimerv>
	InitADC();				// ADC for reading pitch on PB0 (A3); PD CV on PB1 (A1); DAC1 Type Pot on PA1;  DAC2 Type Pot on PA2
 800130a:	f7ff fd73 	bl	8000df4 <_Z7InitADCv>

	float oldOutput1 =  0;
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
	float oldOutput2 = 0;
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
	RelativePitch RelPitch = NONE;
 800131a:	2300      	movs	r3, #0
 800131c:	74fb      	strb	r3, [r7, #19]


	while (1)
	{
		// Get Pitch from ADC and smooth
		Pitch = (0.5f * Pitch) + (0.5f * ADC_array[0]);
 800131e:	4baa      	ldr	r3, [pc, #680]	; (80015c8 <main+0x384>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001330:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001334:	4ba5      	ldr	r3, [pc, #660]	; (80015cc <main+0x388>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001346:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001352:	edc7 7a01 	vstr	s15, [r7, #4]
 8001356:	88bb      	ldrh	r3, [r7, #4]
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b9b      	ldr	r3, [pc, #620]	; (80015c8 <main+0x384>)
 800135c:	801a      	strh	r2, [r3, #0]

		// Selected PD LUT
		PDLut1 = ADC_array[2] * NoOfLUTs / 4096;
 800135e:	4b9b      	ldr	r3, [pc, #620]	; (80015cc <main+0x388>)
 8001360:	889b      	ldrh	r3, [r3, #4]
 8001362:	b29b      	uxth	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	4b9a      	ldr	r3, [pc, #616]	; (80015d0 <main+0x38c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	fb03 f302 	mul.w	r3, r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	da01      	bge.n	8001376 <main+0x132>
 8001372:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001376:	131b      	asrs	r3, r3, #12
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b96      	ldr	r3, [pc, #600]	; (80015d4 <main+0x390>)
 800137c:	701a      	strb	r2, [r3, #0]
		PDLut2 = ADC_array[3] * NoOfLUTs / 4096;
 800137e:	4b93      	ldr	r3, [pc, #588]	; (80015cc <main+0x388>)
 8001380:	88db      	ldrh	r3, [r3, #6]
 8001382:	b29b      	uxth	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4b92      	ldr	r3, [pc, #584]	; (80015d0 <main+0x38c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	fb03 f302 	mul.w	r3, r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	da01      	bge.n	8001396 <main+0x152>
 8001392:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001396:	131b      	asrs	r3, r3, #12
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b8f      	ldr	r3, [pc, #572]	; (80015d8 <main+0x394>)
 800139c:	701a      	strb	r2, [r3, #0]

		// Ready for next sample
		if (DacRead)
 800139e:	4b8f      	ldr	r3, [pc, #572]	; (80015dc <main+0x398>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8134 	beq.w	8001610 <main+0x3cc>
		{
			// Get modulation from ADC; Currently seeing 0v as ~3000 and 5V as ~960
			PDScale = (float)(3800 - ADC_array[1]) / 800;
 80013a8:	4b88      	ldr	r3, [pc, #544]	; (80015cc <main+0x388>)
 80013aa:	885b      	ldrh	r3, [r3, #2]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80013b2:	3308      	adds	r3, #8
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	eddf 6a88 	vldr	s13, [pc, #544]	; 80015e0 <main+0x39c>
 80013c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c4:	4b87      	ldr	r3, [pc, #540]	; (80015e4 <main+0x3a0>)
 80013c6:	edc3 7a00 	vstr	s15, [r3]

			// Calculate output as a float from -1 to +1 checking phase distortion and phase offset as required
			float SampleOut1 = GetPhaseDist(LUTArray[PDLut1], SamplePos1 / SAMPLERATE, PDScale, 0);	//PDScale
 80013ca:	4b82      	ldr	r3, [pc, #520]	; (80015d4 <main+0x390>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b85      	ldr	r3, [pc, #532]	; (80015e8 <main+0x3a4>)
 80013d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80013d8:	4b84      	ldr	r3, [pc, #528]	; (80015ec <main+0x3a8>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80015f0 <main+0x3ac>
 80013e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013e6:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <main+0x3a0>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	ed9f 1a81 	vldr	s2, [pc, #516]	; 80015f4 <main+0x3b0>
 80013f0:	eef0 0a67 	vmov.f32	s1, s15
 80013f4:	eeb0 0a66 	vmov.f32	s0, s13
 80013f8:	4610      	mov	r0, r2
 80013fa:	f7ff feb7 	bl	800116c <_Z12GetPhaseDistPKffff>
 80013fe:	ed87 0a03 	vstr	s0, [r7, #12]
			float SampleOut2 = GetPhaseDist(LUTArray[PDLut2], SamplePos2 / SAMPLERATE, 1, 0);
 8001402:	4b75      	ldr	r3, [pc, #468]	; (80015d8 <main+0x394>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4b77      	ldr	r3, [pc, #476]	; (80015e8 <main+0x3a4>)
 800140c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001410:	4b79      	ldr	r3, [pc, #484]	; (80015f8 <main+0x3b4>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80015f0 <main+0x3ac>
 800141a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800141e:	ed9f 1a75 	vldr	s2, [pc, #468]	; 80015f4 <main+0x3b0>
 8001422:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001426:	eeb0 0a66 	vmov.f32	s0, s13
 800142a:	4610      	mov	r0, r2
 800142c:	f7ff fe9e 	bl	800116c <_Z12GetPhaseDistPKffff>
 8001430:	ed87 0a02 	vstr	s0, [r7, #8]

			// Set DAC output values for when sample interrupt next fires
			if (RingModOn) {
 8001434:	4b71      	ldr	r3, [pc, #452]	; (80015fc <main+0x3b8>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d014      	beq.n	8001466 <main+0x222>
				DAC->DHR12R1 = (int)((1 + (SampleOut1 * SampleOut2)) * 2047);		// Ring mod of 1 * 2
 800143c:	4b70      	ldr	r3, [pc, #448]	; (8001600 <main+0x3bc>)
 800143e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001442:	edd7 7a02 	vldr	s15, [r7, #8]
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800144e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001452:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001604 <main+0x3c0>
 8001456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145e:	ee17 2a90 	vmov	r2, s15
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	e00f      	b.n	8001486 <main+0x242>
			} else {
				DAC->DHR12R1 = (int)((1 + SampleOut1) * 2047);		// load the next sample into the DAC 1 buffer
 8001466:	4b66      	ldr	r3, [pc, #408]	; (8001600 <main+0x3bc>)
 8001468:	edd7 7a03 	vldr	s15, [r7, #12]
 800146c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001470:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001474:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001604 <main+0x3c0>
 8001478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800147c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001480:	ee17 2a90 	vmov	r2, s15
 8001484:	609a      	str	r2, [r3, #8]
			}
			DAC->DHR12R2 = (int)((1 + SampleOut2) * 2047);		// load the next sample into the DAC 2 buffer
 8001486:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <main+0x3bc>)
 8001488:	edd7 7a02 	vldr	s15, [r7, #8]
 800148c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001494:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001604 <main+0x3c0>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a0:	ee17 2a90 	vmov	r2, s15
 80014a4:	615a      	str	r2, [r3, #20]

//			DAC->DHR12R1 = (int)((1 + (SampleOut1 * (-1 * SampleOut2))) * 2047);	// Ring mod of 1 * 2'
//			DAC->DHR12R1 = (int)(((2 + SampleOut1 + SampleOut2) / 2) * 2047);		// Mix of 1 + 2
//			DAC->DHR12R2 = (int)((1 + (-1 * SampleOut2)) * 2047);					// DAC 2 - inverted
			DacRead = 0;
 80014a6:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <main+0x398>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]

			//oldOutput1 = SampleOut1;
			oldOutput2 = SampleOut2;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	617b      	str	r3, [r7, #20]

			freq1 = PitchLUT[Pitch / 4];		// divide by four as there are 1024 items in DAC CV Voltage to Pitch Freq LUT and 4096 possible DAC voltage values
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <main+0x384>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	6a3a      	ldr	r2, [r7, #32]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a51      	ldr	r2, [pc, #324]	; (8001608 <main+0x3c4>)
 80014c4:	6013      	str	r3, [r2, #0]

			// octave down
			switch(RelPitch) {
 80014c6:	7cfb      	ldrb	r3, [r7, #19]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d82f      	bhi.n	800152c <main+0x2e8>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <main+0x290>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	080014ef 	.word	0x080014ef
 80014dc:	08001505 	.word	0x08001505
 80014e0:	08001517 	.word	0x08001517
				case NONE: 			freq2 = freq1; 		break;
 80014e4:	4b48      	ldr	r3, [pc, #288]	; (8001608 <main+0x3c4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a48      	ldr	r2, [pc, #288]	; (800160c <main+0x3c8>)
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e01e      	b.n	800152c <main+0x2e8>
				case OCTAVEDOWN:	freq2 = freq1 / 2;	break;
 80014ee:	4b46      	ldr	r3, [pc, #280]	; (8001608 <main+0x3c4>)
 80014f0:	ed93 7a00 	vldr	s14, [r3]
 80014f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <main+0x3c8>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
 8001502:	e013      	b.n	800152c <main+0x2e8>
				case OCTAVEUP: 		freq2 = freq1 * 2;	break;
 8001504:	4b40      	ldr	r3, [pc, #256]	; (8001608 <main+0x3c4>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <main+0x3c8>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
 8001514:	e00a      	b.n	800152c <main+0x2e8>
				case SPREAD: 		freq2 = freq1 + 10;	break;
 8001516:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <main+0x3c4>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001520:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001524:	4b39      	ldr	r3, [pc, #228]	; (800160c <main+0x3c8>)
 8001526:	edc3 7a00 	vstr	s15, [r3]
 800152a:	bf00      	nop
			}

			// jump forward to the next sample position
			SamplePos1 += freq1;
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <main+0x3c4>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <main+0x3a8>)
 8001534:	ed93 7a00 	vldr	s14, [r3]
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <main+0x3a8>)
 800153e:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos1 >= SAMPLERATE)
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <main+0x3a8>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80015f0 <main+0x3ac>
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	bfac      	ite	ge
 8001556:	2301      	movge	r3, #1
 8001558:	2300      	movlt	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <main+0x332>
				SamplePos1-= SAMPLERATE;
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <main+0x3a8>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80015f0 <main+0x3ac>
 800156a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <main+0x3a8>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos1 >= SAMPLERATE)
 8001574:	e7e5      	b.n	8001542 <main+0x2fe>

			SamplePos2 += freq2;
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <main+0x3c8>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <main+0x3b4>)
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <main+0x3b4>)
 8001588:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos2 >= SAMPLERATE)
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <main+0x3b4>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80015f0 <main+0x3ac>
 8001596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159e:	bfac      	ite	ge
 80015a0:	2301      	movge	r3, #1
 80015a2:	2300      	movlt	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d032      	beq.n	8001610 <main+0x3cc>
				SamplePos2-= SAMPLERATE;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <main+0x3b4>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015f0 <main+0x3ac>
 80015b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <main+0x3b4>)
 80015ba:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos2 >= SAMPLERATE)
 80015be:	e7e5      	b.n	800158c <main+0x348>
 80015c0:	c4124000 	.word	0xc4124000
 80015c4:	450e0000 	.word	0x450e0000
 80015c8:	200010c8 	.word	0x200010c8
 80015cc:	200010bc 	.word	0x200010bc
 80015d0:	20001020 	.word	0x20001020
 80015d4:	200010e0 	.word	0x200010e0
 80015d8:	200010e1 	.word	0x200010e1
 80015dc:	200010c4 	.word	0x200010c4
 80015e0:	44480000 	.word	0x44480000
 80015e4:	200010d8 	.word	0x200010d8
 80015e8:	2000100c 	.word	0x2000100c
 80015ec:	200010d0 	.word	0x200010d0
 80015f0:	473b8000 	.word	0x473b8000
 80015f4:	00000000 	.word	0x00000000
 80015f8:	200010d4 	.word	0x200010d4
 80015fc:	200010c5 	.word	0x200010c5
 8001600:	40007400 	.word	0x40007400
 8001604:	44ffe000 	.word	0x44ffe000
 8001608:	20000000 	.word	0x20000000
 800160c:	20000004 	.word	0x20000004
		}

		// Toggle Ring mod when button pressed
		if (!READ_BIT(GPIOC->IDR, GPIO_IDR_IDR_6)) {
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <main+0x410>)
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d012      	beq.n	800164c <main+0x408>
			if (!ButtonDown) {
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <main+0x414>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f083 0301 	eor.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	f43f ae74 	beq.w	800131e <main+0xda>
				RingModOn = !RingModOn;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <main+0x418>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	f083 0301 	eor.w	r3, r3, #1
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <main+0x418>)
 8001642:	701a      	strb	r2, [r3, #0]
				ButtonDown = true;
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <main+0x414>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e668      	b.n	800131e <main+0xda>
			}
		} else {
			ButtonDown = false;
 800164c:	4b02      	ldr	r3, [pc, #8]	; (8001658 <main+0x414>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
		}
	}
 8001652:	e664      	b.n	800131e <main+0xda>
 8001654:	40020800 	.word	0x40020800
 8001658:	200010c6 	.word	0x200010c6
 800165c:	200010c5 	.word	0x200010c5

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001698 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001664:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001666:	e003      	b.n	8001670 <LoopCopyDataInit>

08001668 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800166a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800166c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800166e:	3104      	adds	r1, #4

08001670 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001670:	480b      	ldr	r0, [pc, #44]	; (80016a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001674:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001676:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001678:	d3f6      	bcc.n	8001668 <CopyDataInit>
  ldr  r2, =_sbss
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800167c:	e002      	b.n	8001684 <LoopFillZerobss>

0800167e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800167e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001680:	f842 3b04 	str.w	r3, [r2], #4

08001684 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001686:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001688:	d3f9      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800168a:	f000 f813 	bl	80016b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168e:	f000 fe5d 	bl	800234c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7ff fdd7 	bl	8001244 <main>
  bx  lr    
 8001696:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001698:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800169c:	080073e8 	.word	0x080073e8
  ldr  r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016a4:	200010a0 	.word	0x200010a0
  ldr  r2, =_sbss
 80016a8:	200010a0 	.word	0x200010a0
  ldr  r3, = _ebss
 80016ac:	200010e4 	.word	0x200010e4

080016b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC_IRQHandler>
	...

080016b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4a16      	ldr	r2, [pc, #88]	; (8001714 <SystemInit+0x60>)
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <SystemInit+0x60>)
 80016bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016c8:	4a13      	ldr	r2, [pc, #76]	; (8001718 <SystemInit+0x64>)
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <SystemInit+0x64>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <SystemInit+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <SystemInit+0x64>)
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <SystemInit+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <SystemInit+0x64>)
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <SystemInit+0x68>)
 80016ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016f0:	4a09      	ldr	r2, [pc, #36]	; (8001718 <SystemInit+0x64>)
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <SystemInit+0x64>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <SystemInit+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SystemInit+0x60>)
 8001704:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001708:	609a      	str	r2, [r3, #8]
#endif
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00
 8001718:	40023800 	.word	0x40023800
 800171c:	24003010 	.word	0x24003010

08001720 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	2302      	movs	r3, #2
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	2302      	movs	r3, #2
 8001738:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <SystemCoreClockUpdate+0xe4>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d007      	beq.n	800175a <SystemCoreClockUpdate+0x3a>
 800174a:	2b08      	cmp	r3, #8
 800174c:	d009      	beq.n	8001762 <SystemCoreClockUpdate+0x42>
 800174e:	2b00      	cmp	r3, #0
 8001750:	d13d      	bne.n	80017ce <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <SystemCoreClockUpdate+0xe8>)
 8001754:	4a2d      	ldr	r2, [pc, #180]	; (800180c <SystemCoreClockUpdate+0xec>)
 8001756:	601a      	str	r2, [r3, #0]
      break;
 8001758:	e03d      	b.n	80017d6 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <SystemCoreClockUpdate+0xe8>)
 800175c:	4a2c      	ldr	r2, [pc, #176]	; (8001810 <SystemCoreClockUpdate+0xf0>)
 800175e:	601a      	str	r2, [r3, #0]
      break;
 8001760:	e039      	b.n	80017d6 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <SystemCoreClockUpdate+0xe4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	0d9b      	lsrs	r3, r3, #22
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <SystemCoreClockUpdate+0xe4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001776:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800177e:	4a24      	ldr	r2, [pc, #144]	; (8001810 <SystemCoreClockUpdate+0xf0>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <SystemCoreClockUpdate+0xe4>)
 8001788:	6852      	ldr	r2, [r2, #4]
 800178a:	0992      	lsrs	r2, r2, #6
 800178c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e00b      	b.n	80017b0 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001798:	4a1c      	ldr	r2, [pc, #112]	; (800180c <SystemCoreClockUpdate+0xec>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <SystemCoreClockUpdate+0xe4>)
 80017a2:	6852      	ldr	r2, [r2, #4]
 80017a4:	0992      	lsrs	r2, r2, #6
 80017a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <SystemCoreClockUpdate+0xe4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	3301      	adds	r3, #1
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c8:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <SystemCoreClockUpdate+0xe8>)
 80017ca:	6013      	str	r3, [r2, #0]
      break;
 80017cc:	e003      	b.n	80017d6 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <SystemCoreClockUpdate+0xe8>)
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <SystemCoreClockUpdate+0xec>)
 80017d2:	601a      	str	r2, [r3, #0]
      break;
 80017d4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <SystemCoreClockUpdate+0xe4>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	091b      	lsrs	r3, r3, #4
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <SystemCoreClockUpdate+0xf4>)
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <SystemCoreClockUpdate+0xe8>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	fa22 f303 	lsr.w	r3, r2, r3
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <SystemCoreClockUpdate+0xe8>)
 80017f4:	6013      	str	r3, [r2, #0]
}
 80017f6:	bf00      	nop
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	20001024 	.word	0x20001024
 800180c:	00f42400 	.word	0x00f42400
 8001810:	007a1200 	.word	0x007a1200
 8001814:	20001028 	.word	0x20001028

08001818 <powf>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	ed2d 8b04 	vpush	{d8-d9}
 800181e:	4cb5      	ldr	r4, [pc, #724]	; (8001af4 <powf+0x2dc>)
 8001820:	b08a      	sub	sp, #40	; 0x28
 8001822:	eef0 8a40 	vmov.f32	s17, s0
 8001826:	eeb0 8a60 	vmov.f32	s16, s1
 800182a:	f000 f971 	bl	8001b10 <__ieee754_powf>
 800182e:	f994 5000 	ldrsb.w	r5, [r4]
 8001832:	1c6b      	adds	r3, r5, #1
 8001834:	eeb0 9a40 	vmov.f32	s18, s0
 8001838:	4626      	mov	r6, r4
 800183a:	d05d      	beq.n	80018f8 <powf+0xe0>
 800183c:	eeb4 8a48 	vcmp.f32	s16, s16
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	d658      	bvs.n	80018f8 <powf+0xe0>
 8001846:	eef4 8a68 	vcmp.f32	s17, s17
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	d721      	bvc.n	8001894 <powf+0x7c>
 8001850:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	d14e      	bne.n	80018f8 <powf+0xe0>
 800185a:	2301      	movs	r3, #1
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	4ba6      	ldr	r3, [pc, #664]	; (8001af8 <powf+0x2e0>)
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	ee18 0a90 	vmov	r0, s17
 8001866:	2300      	movs	r3, #0
 8001868:	9308      	str	r3, [sp, #32]
 800186a:	f7fe fe11 	bl	8000490 <__aeabi_f2d>
 800186e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001872:	ee18 0a10 	vmov	r0, s16
 8001876:	f7fe fe0b 	bl	8000490 <__aeabi_f2d>
 800187a:	4ba0      	ldr	r3, [pc, #640]	; (8001afc <powf+0x2e4>)
 800187c:	2200      	movs	r2, #0
 800187e:	2d02      	cmp	r5, #2
 8001880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001884:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001888:	d030      	beq.n	80018ec <powf+0xd4>
 800188a:	4668      	mov	r0, sp
 800188c:	f000 fc49 	bl	8002122 <matherr>
 8001890:	bb30      	cbnz	r0, 80018e0 <powf+0xc8>
 8001892:	e062      	b.n	800195a <powf+0x142>
 8001894:	eef5 8a40 	vcmp.f32	s17, #0.0
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d162      	bne.n	8001964 <powf+0x14c>
 800189e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	d12d      	bne.n	8001904 <powf+0xec>
 80018a8:	2301      	movs	r3, #1
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	4b92      	ldr	r3, [pc, #584]	; (8001af8 <powf+0x2e0>)
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	ee18 0a90 	vmov	r0, s17
 80018b4:	2300      	movs	r3, #0
 80018b6:	9308      	str	r3, [sp, #32]
 80018b8:	f7fe fdea 	bl	8000490 <__aeabi_f2d>
 80018bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018c0:	ee18 0a10 	vmov	r0, s16
 80018c4:	f7fe fde4 	bl	8000490 <__aeabi_f2d>
 80018c8:	2200      	movs	r2, #0
 80018ca:	2300      	movs	r3, #0
 80018cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80018d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018d4:	2d00      	cmp	r5, #0
 80018d6:	d0d8      	beq.n	800188a <powf+0x72>
 80018d8:	4b88      	ldr	r3, [pc, #544]	; (8001afc <powf+0x2e4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018e0:	9b08      	ldr	r3, [sp, #32]
 80018e2:	b11b      	cbz	r3, 80018ec <powf+0xd4>
 80018e4:	f000 fd2c 	bl	8002340 <__errno>
 80018e8:	9b08      	ldr	r3, [sp, #32]
 80018ea:	6003      	str	r3, [r0, #0]
 80018ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80018f0:	f7ff f8bc 	bl	8000a6c <__aeabi_d2f>
 80018f4:	ee09 0a10 	vmov	s18, r0
 80018f8:	eeb0 0a49 	vmov.f32	s0, s18
 80018fc:	b00a      	add	sp, #40	; 0x28
 80018fe:	ecbd 8b04 	vpop	{d8-d9}
 8001902:	bd70      	pop	{r4, r5, r6, pc}
 8001904:	eeb0 0a48 	vmov.f32	s0, s16
 8001908:	f000 fc9d 	bl	8002246 <finitef>
 800190c:	2800      	cmp	r0, #0
 800190e:	d0f3      	beq.n	80018f8 <powf+0xe0>
 8001910:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	d5ee      	bpl.n	80018f8 <powf+0xe0>
 800191a:	2301      	movs	r3, #1
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <powf+0x2e0>)
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	ee18 0a90 	vmov	r0, s17
 8001926:	2300      	movs	r3, #0
 8001928:	9308      	str	r3, [sp, #32]
 800192a:	f7fe fdb1 	bl	8000490 <__aeabi_f2d>
 800192e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001932:	ee18 0a10 	vmov	r0, s16
 8001936:	f7fe fdab 	bl	8000490 <__aeabi_f2d>
 800193a:	f994 3000 	ldrsb.w	r3, [r4]
 800193e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001942:	b923      	cbnz	r3, 800194e <powf+0x136>
 8001944:	2200      	movs	r2, #0
 8001946:	2300      	movs	r3, #0
 8001948:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800194c:	e79d      	b.n	800188a <powf+0x72>
 800194e:	496c      	ldr	r1, [pc, #432]	; (8001b00 <powf+0x2e8>)
 8001950:	2000      	movs	r0, #0
 8001952:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d197      	bne.n	800188a <powf+0x72>
 800195a:	f000 fcf1 	bl	8002340 <__errno>
 800195e:	2321      	movs	r3, #33	; 0x21
 8001960:	6003      	str	r3, [r0, #0]
 8001962:	e7bd      	b.n	80018e0 <powf+0xc8>
 8001964:	f000 fc6f 	bl	8002246 <finitef>
 8001968:	4605      	mov	r5, r0
 800196a:	2800      	cmp	r0, #0
 800196c:	f040 8091 	bne.w	8001a92 <powf+0x27a>
 8001970:	eeb0 0a68 	vmov.f32	s0, s17
 8001974:	f000 fc67 	bl	8002246 <finitef>
 8001978:	2800      	cmp	r0, #0
 800197a:	f000 808a 	beq.w	8001a92 <powf+0x27a>
 800197e:	eeb0 0a48 	vmov.f32	s0, s16
 8001982:	f000 fc60 	bl	8002246 <finitef>
 8001986:	2800      	cmp	r0, #0
 8001988:	f000 8083 	beq.w	8001a92 <powf+0x27a>
 800198c:	eeb4 9a49 	vcmp.f32	s18, s18
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	f994 4000 	ldrsb.w	r4, [r4]
 8001998:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <powf+0x2e0>)
 800199a:	d71b      	bvc.n	80019d4 <powf+0x1bc>
 800199c:	2201      	movs	r2, #1
 800199e:	ee18 0a90 	vmov	r0, s17
 80019a2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80019a6:	9508      	str	r5, [sp, #32]
 80019a8:	f7fe fd72 	bl	8000490 <__aeabi_f2d>
 80019ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80019b0:	ee18 0a10 	vmov	r0, s16
 80019b4:	f7fe fd6c 	bl	8000490 <__aeabi_f2d>
 80019b8:	2200      	movs	r2, #0
 80019ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80019be:	2300      	movs	r3, #0
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d0c1      	beq.n	8001948 <powf+0x130>
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7fe fee0 	bl	800078c <__aeabi_ddiv>
 80019cc:	2c02      	cmp	r4, #2
 80019ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80019d2:	e7c1      	b.n	8001958 <powf+0x140>
 80019d4:	2203      	movs	r2, #3
 80019d6:	ee18 0a90 	vmov	r0, s17
 80019da:	e88d 000c 	stmia.w	sp, {r2, r3}
 80019de:	9508      	str	r5, [sp, #32]
 80019e0:	f7fe fd56 	bl	8000490 <__aeabi_f2d>
 80019e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80019e8:	ee18 0a10 	vmov	r0, s16
 80019ec:	f7fe fd50 	bl	8000490 <__aeabi_f2d>
 80019f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80019f4:	bb5c      	cbnz	r4, 8001a4e <powf+0x236>
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <powf+0x2ec>)
 80019f8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80019fc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a08:	d56c      	bpl.n	8001ae4 <powf+0x2cc>
 8001a0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001a0e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a12:	ee17 0a90 	vmov	r0, s15
 8001a16:	f7fe fd3b 	bl	8000490 <__aeabi_f2d>
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	ec45 4b10 	vmov	d0, r4, r5
 8001a22:	f000 fb81 	bl	8002128 <rint>
 8001a26:	4620      	mov	r0, r4
 8001a28:	ec53 2b10 	vmov	r2, r3, d0
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	f7fe ffeb 	bl	8000a08 <__aeabi_dcmpeq>
 8001a32:	b920      	cbnz	r0, 8001a3e <powf+0x226>
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <powf+0x2f0>)
 8001a36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001a3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a3e:	f996 3000 	ldrsb.w	r3, [r6]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d14e      	bne.n	8001ae4 <powf+0x2cc>
 8001a46:	f000 fc7b 	bl	8002340 <__errno>
 8001a4a:	2322      	movs	r3, #34	; 0x22
 8001a4c:	e788      	b.n	8001960 <powf+0x148>
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <powf+0x2f4>)
 8001a50:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8001a54:	2200      	movs	r2, #0
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a5e:	d5ee      	bpl.n	8001a3e <powf+0x226>
 8001a60:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001a64:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a68:	ee17 0a90 	vmov	r0, s15
 8001a6c:	f7fe fd10 	bl	8000490 <__aeabi_f2d>
 8001a70:	4604      	mov	r4, r0
 8001a72:	460d      	mov	r5, r1
 8001a74:	ec45 4b10 	vmov	d0, r4, r5
 8001a78:	f000 fb56 	bl	8002128 <rint>
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	ec53 2b10 	vmov	r2, r3, d0
 8001a82:	4629      	mov	r1, r5
 8001a84:	f7fe ffc0 	bl	8000a08 <__aeabi_dcmpeq>
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d1d8      	bne.n	8001a3e <powf+0x226>
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <powf+0x2e8>)
 8001a90:	e7d3      	b.n	8001a3a <powf+0x222>
 8001a92:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	f47f af2d 	bne.w	80018f8 <powf+0xe0>
 8001a9e:	eeb0 0a68 	vmov.f32	s0, s17
 8001aa2:	f000 fbd0 	bl	8002246 <finitef>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	f43f af26 	beq.w	80018f8 <powf+0xe0>
 8001aac:	eeb0 0a48 	vmov.f32	s0, s16
 8001ab0:	f000 fbc9 	bl	8002246 <finitef>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	f43f af1f 	beq.w	80018f8 <powf+0xe0>
 8001aba:	2304      	movs	r3, #4
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <powf+0x2e0>)
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	ee18 0a90 	vmov	r0, s17
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	9308      	str	r3, [sp, #32]
 8001aca:	f7fe fce1 	bl	8000490 <__aeabi_f2d>
 8001ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ad2:	ee18 0a10 	vmov	r0, s16
 8001ad6:	f7fe fcdb 	bl	8000490 <__aeabi_f2d>
 8001ada:	2200      	movs	r2, #0
 8001adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e7aa      	b.n	8001a3a <powf+0x222>
 8001ae4:	4668      	mov	r0, sp
 8001ae6:	f000 fb1c 	bl	8002122 <matherr>
 8001aea:	2800      	cmp	r0, #0
 8001aec:	f47f aef8 	bne.w	80018e0 <powf+0xc8>
 8001af0:	e7a9      	b.n	8001a46 <powf+0x22e>
 8001af2:	bf00      	nop
 8001af4:	20001038 	.word	0x20001038
 8001af8:	080073b0 	.word	0x080073b0
 8001afc:	3ff00000 	.word	0x3ff00000
 8001b00:	fff00000 	.word	0xfff00000
 8001b04:	47efffff 	.word	0x47efffff
 8001b08:	c7efffff 	.word	0xc7efffff
 8001b0c:	7ff00000 	.word	0x7ff00000

08001b10 <__ieee754_powf>:
 8001b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b14:	ee10 5a90 	vmov	r5, s1
 8001b18:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8001b1c:	ed2d 8b02 	vpush	{d8}
 8001b20:	eeb0 8a40 	vmov.f32	s16, s0
 8001b24:	eef0 8a60 	vmov.f32	s17, s1
 8001b28:	f000 8295 	beq.w	8002056 <__ieee754_powf+0x546>
 8001b2c:	ee10 8a10 	vmov	r8, s0
 8001b30:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8001b34:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8001b38:	dc06      	bgt.n	8001b48 <__ieee754_powf+0x38>
 8001b3a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8001b3e:	dd0a      	ble.n	8001b56 <__ieee754_powf+0x46>
 8001b40:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8001b44:	f000 8287 	beq.w	8002056 <__ieee754_powf+0x546>
 8001b48:	ecbd 8b02 	vpop	{d8}
 8001b4c:	48d9      	ldr	r0, [pc, #868]	; (8001eb4 <__ieee754_powf+0x3a4>)
 8001b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b52:	f000 bb83 	b.w	800225c <nanf>
 8001b56:	f1b8 0f00 	cmp.w	r8, #0
 8001b5a:	da1d      	bge.n	8001b98 <__ieee754_powf+0x88>
 8001b5c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8001b60:	da2c      	bge.n	8001bbc <__ieee754_powf+0xac>
 8001b62:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8001b66:	db30      	blt.n	8001bca <__ieee754_powf+0xba>
 8001b68:	15fb      	asrs	r3, r7, #23
 8001b6a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8001b6e:	fa47 f603 	asr.w	r6, r7, r3
 8001b72:	fa06 f303 	lsl.w	r3, r6, r3
 8001b76:	429f      	cmp	r7, r3
 8001b78:	d127      	bne.n	8001bca <__ieee754_powf+0xba>
 8001b7a:	f006 0601 	and.w	r6, r6, #1
 8001b7e:	f1c6 0602 	rsb	r6, r6, #2
 8001b82:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8001b86:	d122      	bne.n	8001bce <__ieee754_powf+0xbe>
 8001b88:	2d00      	cmp	r5, #0
 8001b8a:	f280 826a 	bge.w	8002062 <__ieee754_powf+0x552>
 8001b8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b92:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8001b96:	e00d      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8001b98:	2600      	movs	r6, #0
 8001b9a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8001b9e:	d1f0      	bne.n	8001b82 <__ieee754_powf+0x72>
 8001ba0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8001ba4:	f000 8257 	beq.w	8002056 <__ieee754_powf+0x546>
 8001ba8:	dd0a      	ble.n	8001bc0 <__ieee754_powf+0xb0>
 8001baa:	2d00      	cmp	r5, #0
 8001bac:	f280 8256 	bge.w	800205c <__ieee754_powf+0x54c>
 8001bb0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8001eb8 <__ieee754_powf+0x3a8>
 8001bb4:	ecbd 8b02 	vpop	{d8}
 8001bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bbc:	2602      	movs	r6, #2
 8001bbe:	e7ec      	b.n	8001b9a <__ieee754_powf+0x8a>
 8001bc0:	2d00      	cmp	r5, #0
 8001bc2:	daf5      	bge.n	8001bb0 <__ieee754_powf+0xa0>
 8001bc4:	eeb1 0a68 	vneg.f32	s0, s17
 8001bc8:	e7f4      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8001bca:	2600      	movs	r6, #0
 8001bcc:	e7d9      	b.n	8001b82 <__ieee754_powf+0x72>
 8001bce:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8001bd2:	d102      	bne.n	8001bda <__ieee754_powf+0xca>
 8001bd4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8001bd8:	e7ec      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8001bda:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8001bde:	eeb0 0a48 	vmov.f32	s0, s16
 8001be2:	d108      	bne.n	8001bf6 <__ieee754_powf+0xe6>
 8001be4:	f1b8 0f00 	cmp.w	r8, #0
 8001be8:	db05      	blt.n	8001bf6 <__ieee754_powf+0xe6>
 8001bea:	ecbd 8b02 	vpop	{d8}
 8001bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bf2:	f000 ba4f 	b.w	8002094 <__ieee754_sqrtf>
 8001bf6:	f000 fb1f 	bl	8002238 <fabsf>
 8001bfa:	b124      	cbz	r4, 8001c06 <__ieee754_powf+0xf6>
 8001bfc:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8001c00:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8001c04:	d117      	bne.n	8001c36 <__ieee754_powf+0x126>
 8001c06:	2d00      	cmp	r5, #0
 8001c08:	bfbc      	itt	lt
 8001c0a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8001c0e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8001c12:	f1b8 0f00 	cmp.w	r8, #0
 8001c16:	dacd      	bge.n	8001bb4 <__ieee754_powf+0xa4>
 8001c18:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8001c1c:	ea54 0306 	orrs.w	r3, r4, r6
 8001c20:	d104      	bne.n	8001c2c <__ieee754_powf+0x11c>
 8001c22:	ee70 7a40 	vsub.f32	s15, s0, s0
 8001c26:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8001c2a:	e7c3      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8001c2c:	2e01      	cmp	r6, #1
 8001c2e:	d1c1      	bne.n	8001bb4 <__ieee754_powf+0xa4>
 8001c30:	eeb1 0a40 	vneg.f32	s0, s0
 8001c34:	e7be      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8001c36:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8001c3a:	3801      	subs	r0, #1
 8001c3c:	ea56 0300 	orrs.w	r3, r6, r0
 8001c40:	d104      	bne.n	8001c4c <__ieee754_powf+0x13c>
 8001c42:	ee38 8a48 	vsub.f32	s16, s16, s16
 8001c46:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8001c4a:	e7b3      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8001c4c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8001c50:	dd6d      	ble.n	8001d2e <__ieee754_powf+0x21e>
 8001c52:	4b9a      	ldr	r3, [pc, #616]	; (8001ebc <__ieee754_powf+0x3ac>)
 8001c54:	429c      	cmp	r4, r3
 8001c56:	dc06      	bgt.n	8001c66 <__ieee754_powf+0x156>
 8001c58:	2d00      	cmp	r5, #0
 8001c5a:	daa9      	bge.n	8001bb0 <__ieee754_powf+0xa0>
 8001c5c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8001ec0 <__ieee754_powf+0x3b0>
 8001c60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001c64:	e7a6      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8001c66:	4b97      	ldr	r3, [pc, #604]	; (8001ec4 <__ieee754_powf+0x3b4>)
 8001c68:	429c      	cmp	r4, r3
 8001c6a:	dd02      	ble.n	8001c72 <__ieee754_powf+0x162>
 8001c6c:	2d00      	cmp	r5, #0
 8001c6e:	dcf5      	bgt.n	8001c5c <__ieee754_powf+0x14c>
 8001c70:	e79e      	b.n	8001bb0 <__ieee754_powf+0xa0>
 8001c72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c76:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001c7a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001ec8 <__ieee754_powf+0x3b8>
 8001c7e:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8001ecc <__ieee754_powf+0x3bc>
 8001c82:	eef1 6a40 	vneg.f32	s13, s0
 8001c86:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8001c8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8001c8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001c92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001c96:	ee20 7a00 	vmul.f32	s14, s0, s0
 8001c9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c9e:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8001ed0 <__ieee754_powf+0x3c0>
 8001ca2:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8001ca6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001ed4 <__ieee754_powf+0x3c4>
 8001caa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001cae:	eeb0 7a67 	vmov.f32	s14, s15
 8001cb2:	eea0 7a06 	vfma.f32	s14, s0, s12
 8001cb6:	ee17 3a10 	vmov	r3, s14
 8001cba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001cbe:	f023 030f 	bic.w	r3, r3, #15
 8001cc2:	ee07 3a10 	vmov	s14, r3
 8001cc6:	eea6 7a86 	vfma.f32	s14, s13, s12
 8001cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cce:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8001cd2:	f025 050f 	bic.w	r5, r5, #15
 8001cd6:	ee07 5a10 	vmov	s14, r5
 8001cda:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8001cde:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8001ce2:	ee07 3a10 	vmov	s14, r3
 8001ce6:	ee06 5a90 	vmov	s13, r5
 8001cea:	eee7 7a28 	vfma.f32	s15, s14, s17
 8001cee:	3e01      	subs	r6, #1
 8001cf0:	ea56 0200 	orrs.w	r2, r6, r0
 8001cf4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001cf8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001cfc:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001d00:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8001d04:	ee16 4a90 	vmov	r4, s13
 8001d08:	bf08      	it	eq
 8001d0a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8001d0e:	2c00      	cmp	r4, #0
 8001d10:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001d14:	f340 8186 	ble.w	8002024 <__ieee754_powf+0x514>
 8001d18:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8001d1c:	f340 80fc 	ble.w	8001f18 <__ieee754_powf+0x408>
 8001d20:	eddf 7a67 	vldr	s15, [pc, #412]	; 8001ec0 <__ieee754_powf+0x3b0>
 8001d24:	ee28 0a27 	vmul.f32	s0, s16, s15
 8001d28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001d2c:	e742      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8001d2e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8001d32:	bfbf      	itttt	lt
 8001d34:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8001ed8 <__ieee754_powf+0x3c8>
 8001d38:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8001d3c:	f06f 0217 	mvnlt.w	r2, #23
 8001d40:	ee17 4a90 	vmovlt	r4, s15
 8001d44:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8001d48:	bfa8      	it	ge
 8001d4a:	2200      	movge	r2, #0
 8001d4c:	3b7f      	subs	r3, #127	; 0x7f
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a62      	ldr	r2, [pc, #392]	; (8001edc <__ieee754_powf+0x3cc>)
 8001d52:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8001d56:	4294      	cmp	r4, r2
 8001d58:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8001d5c:	dd06      	ble.n	8001d6c <__ieee754_powf+0x25c>
 8001d5e:	4a60      	ldr	r2, [pc, #384]	; (8001ee0 <__ieee754_powf+0x3d0>)
 8001d60:	4294      	cmp	r4, r2
 8001d62:	f340 80a5 	ble.w	8001eb0 <__ieee754_powf+0x3a0>
 8001d66:	3301      	adds	r3, #1
 8001d68:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4a5d      	ldr	r2, [pc, #372]	; (8001ee4 <__ieee754_powf+0x3d4>)
 8001d70:	00a7      	lsls	r7, r4, #2
 8001d72:	443a      	add	r2, r7
 8001d74:	ee07 1a90 	vmov	s15, r1
 8001d78:	ed92 7a00 	vldr	s14, [r2]
 8001d7c:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <__ieee754_powf+0x3d8>)
 8001d7e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001d82:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8001d86:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 8001d8a:	1049      	asrs	r1, r1, #1
 8001d8c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8001d90:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8001d94:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8001d98:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8001d9c:	ee06 1a90 	vmov	s13, r1
 8001da0:	ee66 4a05 	vmul.f32	s9, s12, s10
 8001da4:	ee14 ea90 	vmov	lr, s9
 8001da8:	ea02 0e0e 	and.w	lr, r2, lr
 8001dac:	ee05 ea90 	vmov	s11, lr
 8001db0:	eeb1 4a65 	vneg.f32	s8, s11
 8001db4:	eea4 6a26 	vfma.f32	s12, s8, s13
 8001db8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8001dbc:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8001dc0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001dc4:	eddf 7a49 	vldr	s15, [pc, #292]	; 8001eec <__ieee754_powf+0x3dc>
 8001dc8:	eea4 6a26 	vfma.f32	s12, s8, s13
 8001dcc:	ee66 6a05 	vmul.f32	s13, s12, s10
 8001dd0:	ee24 6aa4 	vmul.f32	s12, s9, s9
 8001dd4:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8001ef0 <__ieee754_powf+0x3e0>
 8001dd8:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001ddc:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8001ef4 <__ieee754_powf+0x3e4>
 8001de0:	eea6 5a27 	vfma.f32	s10, s12, s15
 8001de4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8001ec8 <__ieee754_powf+0x3b8>
 8001de8:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001dec:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8001ef8 <__ieee754_powf+0x3e8>
 8001df0:	eea6 5a27 	vfma.f32	s10, s12, s15
 8001df4:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001efc <__ieee754_powf+0x3ec>
 8001df8:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001dfc:	ee66 3a06 	vmul.f32	s7, s12, s12
 8001e00:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8001e04:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001e08:	eeb0 6a45 	vmov.f32	s12, s10
 8001e0c:	eea3 7aa7 	vfma.f32	s14, s7, s15
 8001e10:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8001e14:	ee36 6a07 	vadd.f32	s12, s12, s14
 8001e18:	ee16 1a10 	vmov	r1, s12
 8001e1c:	4011      	ands	r1, r2
 8001e1e:	ee06 1a10 	vmov	s12, r1
 8001e22:	ee76 7a45 	vsub.f32	s15, s12, s10
 8001e26:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8001f00 <__ieee754_powf+0x3f0>
 8001e2a:	eee4 7a25 	vfma.f32	s15, s8, s11
 8001e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e32:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001e36:	eee6 7a26 	vfma.f32	s15, s12, s13
 8001e3a:	eeb0 7a67 	vmov.f32	s14, s15
 8001e3e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8001e42:	ee17 1a10 	vmov	r1, s14
 8001e46:	4011      	ands	r1, r2
 8001e48:	ee07 1a10 	vmov	s14, r1
 8001e4c:	eea4 7a06 	vfma.f32	s14, s8, s12
 8001e50:	ee05 1a90 	vmov	s11, r1
 8001e54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e58:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001f04 <__ieee754_powf+0x3f4>
 8001e5c:	492a      	ldr	r1, [pc, #168]	; (8001f08 <__ieee754_powf+0x3f8>)
 8001e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e62:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001f0c <__ieee754_powf+0x3fc>
 8001e66:	eee5 7a87 	vfma.f32	s15, s11, s14
 8001e6a:	4439      	add	r1, r7
 8001e6c:	ed91 7a00 	vldr	s14, [r1]
 8001e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eeb0 6a47 	vmov.f32	s12, s14
 8001e7c:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <__ieee754_powf+0x400>)
 8001e7e:	eea5 6a85 	vfma.f32	s12, s11, s10
 8001e82:	443b      	add	r3, r7
 8001e84:	edd3 4a00 	vldr	s9, [r3]
 8001e88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e8c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8001e90:	ee76 7a26 	vadd.f32	s15, s12, s13
 8001e94:	ee17 3a90 	vmov	r3, s15
 8001e98:	4013      	ands	r3, r2
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001ea2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8001ea6:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8001eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eae:	e70e      	b.n	8001cce <__ieee754_powf+0x1be>
 8001eb0:	2401      	movs	r4, #1
 8001eb2:	e75c      	b.n	8001d6e <__ieee754_powf+0x25e>
 8001eb4:	080073b4 	.word	0x080073b4
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	3f7ffff7 	.word	0x3f7ffff7
 8001ec0:	7149f2ca 	.word	0x7149f2ca
 8001ec4:	3f800007 	.word	0x3f800007
 8001ec8:	3eaaaaab 	.word	0x3eaaaaab
 8001ecc:	3fb8aa00 	.word	0x3fb8aa00
 8001ed0:	3fb8aa3b 	.word	0x3fb8aa3b
 8001ed4:	36eca570 	.word	0x36eca570
 8001ed8:	4b800000 	.word	0x4b800000
 8001edc:	001cc471 	.word	0x001cc471
 8001ee0:	005db3d6 	.word	0x005db3d6
 8001ee4:	080073b8 	.word	0x080073b8
 8001ee8:	fffff000 	.word	0xfffff000
 8001eec:	3e6c3255 	.word	0x3e6c3255
 8001ef0:	3e53f142 	.word	0x3e53f142
 8001ef4:	3e8ba305 	.word	0x3e8ba305
 8001ef8:	3edb6db7 	.word	0x3edb6db7
 8001efc:	3f19999a 	.word	0x3f19999a
 8001f00:	3f763800 	.word	0x3f763800
 8001f04:	3f76384f 	.word	0x3f76384f
 8001f08:	080073c8 	.word	0x080073c8
 8001f0c:	369dc3a0 	.word	0x369dc3a0
 8001f10:	080073c0 	.word	0x080073c0
 8001f14:	3338aa3c 	.word	0x3338aa3c
 8001f18:	f040 8094 	bne.w	8002044 <__ieee754_powf+0x534>
 8001f1c:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 8001f14 <__ieee754_powf+0x404>
 8001f20:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8001f24:	ee37 6a86 	vadd.f32	s12, s15, s12
 8001f28:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	f73f aef6 	bgt.w	8001d20 <__ieee754_powf+0x210>
 8001f34:	15db      	asrs	r3, r3, #23
 8001f36:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8001f3a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001f3e:	4103      	asrs	r3, r0
 8001f40:	4423      	add	r3, r4
 8001f42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8001f46:	4948      	ldr	r1, [pc, #288]	; (8002068 <__ieee754_powf+0x558>)
 8001f48:	3a7f      	subs	r2, #127	; 0x7f
 8001f4a:	4111      	asrs	r1, r2
 8001f4c:	ea23 0101 	bic.w	r1, r3, r1
 8001f50:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8001f54:	ee06 1a90 	vmov	s13, r1
 8001f58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001f5c:	f1c2 0217 	rsb	r2, r2, #23
 8001f60:	4110      	asrs	r0, r2
 8001f62:	2c00      	cmp	r4, #0
 8001f64:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001f68:	bfb8      	it	lt
 8001f6a:	4240      	neglt	r0, r0
 8001f6c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f70:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800206c <__ieee754_powf+0x55c>
 8001f74:	ee16 3a90 	vmov	r3, s13
 8001f78:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f7c:	f023 030f 	bic.w	r3, r3, #15
 8001f80:	ee06 3a90 	vmov	s13, r3
 8001f84:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8001f88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f8c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002070 <__ieee754_powf+0x560>
 8001f90:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001f94:	eea7 7a86 	vfma.f32	s14, s15, s12
 8001f98:	eef0 7a47 	vmov.f32	s15, s14
 8001f9c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002074 <__ieee754_powf+0x564>
 8001fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa4:	eea6 0a87 	vfma.f32	s0, s13, s14
 8001fa8:	eeb0 6a40 	vmov.f32	s12, s0
 8001fac:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8001fb0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8001fb4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001fb8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002078 <__ieee754_powf+0x568>
 8001fbc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800207c <__ieee754_powf+0x56c>
 8001fc0:	eea7 6a26 	vfma.f32	s12, s14, s13
 8001fc4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002080 <__ieee754_powf+0x570>
 8001fc8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8001fcc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8002084 <__ieee754_powf+0x574>
 8001fd0:	eea7 6a26 	vfma.f32	s12, s14, s13
 8001fd4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002088 <__ieee754_powf+0x578>
 8001fd8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8001fdc:	eeb0 6a40 	vmov.f32	s12, s0
 8001fe0:	eea7 6a66 	vfms.f32	s12, s14, s13
 8001fe4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001fe8:	eeb0 7a46 	vmov.f32	s14, s12
 8001fec:	ee77 6a66 	vsub.f32	s13, s14, s13
 8001ff0:	ee20 6a06 	vmul.f32	s12, s0, s12
 8001ff4:	eee0 7a27 	vfma.f32	s15, s0, s15
 8001ff8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002000:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002004:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002008:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800200c:	ee10 3a10 	vmov	r3, s0
 8002010:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8002014:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002018:	da1a      	bge.n	8002050 <__ieee754_powf+0x540>
 800201a:	f000 f925 	bl	8002268 <scalbnf>
 800201e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002022:	e5c7      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <__ieee754_powf+0x57c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	dd02      	ble.n	8002030 <__ieee754_powf+0x520>
 800202a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002090 <__ieee754_powf+0x580>
 800202e:	e679      	b.n	8001d24 <__ieee754_powf+0x214>
 8002030:	d108      	bne.n	8002044 <__ieee754_powf+0x534>
 8002032:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8002036:	eef4 7ae6 	vcmpe.f32	s15, s13
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	f63f af79 	bhi.w	8001f34 <__ieee754_powf+0x424>
 8002042:	e7f2      	b.n	800202a <__ieee754_powf+0x51a>
 8002044:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8002048:	f73f af74 	bgt.w	8001f34 <__ieee754_powf+0x424>
 800204c:	2000      	movs	r0, #0
 800204e:	e78d      	b.n	8001f6c <__ieee754_powf+0x45c>
 8002050:	ee00 3a10 	vmov	s0, r3
 8002054:	e7e3      	b.n	800201e <__ieee754_powf+0x50e>
 8002056:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800205a:	e5ab      	b.n	8001bb4 <__ieee754_powf+0xa4>
 800205c:	eeb0 0a68 	vmov.f32	s0, s17
 8002060:	e5a8      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8002062:	eeb0 0a48 	vmov.f32	s0, s16
 8002066:	e5a5      	b.n	8001bb4 <__ieee754_powf+0xa4>
 8002068:	007fffff 	.word	0x007fffff
 800206c:	3f317218 	.word	0x3f317218
 8002070:	35bfbe8c 	.word	0x35bfbe8c
 8002074:	3f317200 	.word	0x3f317200
 8002078:	3331bb4c 	.word	0x3331bb4c
 800207c:	b5ddea0e 	.word	0xb5ddea0e
 8002080:	388ab355 	.word	0x388ab355
 8002084:	bb360b61 	.word	0xbb360b61
 8002088:	3e2aaaab 	.word	0x3e2aaaab
 800208c:	43160000 	.word	0x43160000
 8002090:	0da24260 	.word	0x0da24260

08002094 <__ieee754_sqrtf>:
 8002094:	ee10 2a10 	vmov	r2, s0
 8002098:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800209c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	d302      	bcc.n	80020aa <__ieee754_sqrtf+0x16>
 80020a4:	eea0 0a00 	vfma.f32	s0, s0, s0
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
 80020aa:	b3b1      	cbz	r1, 800211a <__ieee754_sqrtf+0x86>
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	da04      	bge.n	80020ba <__ieee754_sqrtf+0x26>
 80020b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80020b4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
 80020ba:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80020be:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80020c2:	d204      	bcs.n	80020ce <__ieee754_sqrtf+0x3a>
 80020c4:	2100      	movs	r1, #0
 80020c6:	0210      	lsls	r0, r2, #8
 80020c8:	d528      	bpl.n	800211c <__ieee754_sqrtf+0x88>
 80020ca:	3901      	subs	r1, #1
 80020cc:	1a5b      	subs	r3, r3, r1
 80020ce:	3b7f      	subs	r3, #127	; 0x7f
 80020d0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80020d4:	07d9      	lsls	r1, r3, #31
 80020d6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020da:	bf48      	it	mi
 80020dc:	0052      	lslmi	r2, r2, #1
 80020de:	1059      	asrs	r1, r3, #1
 80020e0:	2300      	movs	r3, #0
 80020e2:	0052      	lsls	r2, r2, #1
 80020e4:	2419      	movs	r4, #25
 80020e6:	461e      	mov	r6, r3
 80020e8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80020ec:	1835      	adds	r5, r6, r0
 80020ee:	4295      	cmp	r5, r2
 80020f0:	bfde      	ittt	le
 80020f2:	182e      	addle	r6, r5, r0
 80020f4:	1b52      	suble	r2, r2, r5
 80020f6:	181b      	addle	r3, r3, r0
 80020f8:	3c01      	subs	r4, #1
 80020fa:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80020fe:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8002102:	d1f3      	bne.n	80020ec <__ieee754_sqrtf+0x58>
 8002104:	b112      	cbz	r2, 800210c <__ieee754_sqrtf+0x78>
 8002106:	3301      	adds	r3, #1
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	105b      	asrs	r3, r3, #1
 800210e:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8002112:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8002116:	ee00 3a10 	vmov	s0, r3
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	0052      	lsls	r2, r2, #1
 800211e:	3101      	adds	r1, #1
 8002120:	e7d1      	b.n	80020c6 <__ieee754_sqrtf+0x32>

08002122 <matherr>:
 8002122:	2000      	movs	r0, #0
 8002124:	4770      	bx	lr
	...

08002128 <rint>:
 8002128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800212a:	ec51 0b10 	vmov	r0, r1, d0
 800212e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8002132:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8002136:	2e13      	cmp	r6, #19
 8002138:	ee10 7a10 	vmov	r7, s0
 800213c:	460b      	mov	r3, r1
 800213e:	4602      	mov	r2, r0
 8002140:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8002144:	dc58      	bgt.n	80021f8 <rint+0xd0>
 8002146:	2e00      	cmp	r6, #0
 8002148:	da2b      	bge.n	80021a2 <rint+0x7a>
 800214a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800214e:	4302      	orrs	r2, r0
 8002150:	d023      	beq.n	800219a <rint+0x72>
 8002152:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8002156:	4302      	orrs	r2, r0
 8002158:	4251      	negs	r1, r2
 800215a:	4311      	orrs	r1, r2
 800215c:	0b09      	lsrs	r1, r1, #12
 800215e:	0c5b      	lsrs	r3, r3, #17
 8002160:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8002164:	045b      	lsls	r3, r3, #17
 8002166:	ea41 0703 	orr.w	r7, r1, r3
 800216a:	4b31      	ldr	r3, [pc, #196]	; (8002230 <rint+0x108>)
 800216c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002170:	4639      	mov	r1, r7
 8002172:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002176:	ee10 0a10 	vmov	r0, s0
 800217a:	4632      	mov	r2, r6
 800217c:	463b      	mov	r3, r7
 800217e:	f7fe f829 	bl	80001d4 <__adddf3>
 8002182:	e9cd 0100 	strd	r0, r1, [sp]
 8002186:	463b      	mov	r3, r7
 8002188:	4632      	mov	r2, r6
 800218a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800218e:	f7fe f81f 	bl	80001d0 <__aeabi_dsub>
 8002192:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002196:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800219a:	ec41 0b10 	vmov	d0, r0, r1
 800219e:	b003      	add	sp, #12
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a2:	4c24      	ldr	r4, [pc, #144]	; (8002234 <rint+0x10c>)
 80021a4:	4134      	asrs	r4, r6
 80021a6:	ea01 0704 	and.w	r7, r1, r4
 80021aa:	4307      	orrs	r7, r0
 80021ac:	d0f5      	beq.n	800219a <rint+0x72>
 80021ae:	0861      	lsrs	r1, r4, #1
 80021b0:	ea03 0001 	and.w	r0, r3, r1
 80021b4:	4302      	orrs	r2, r0
 80021b6:	d00b      	beq.n	80021d0 <rint+0xa8>
 80021b8:	ea23 0101 	bic.w	r1, r3, r1
 80021bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021c0:	2e13      	cmp	r6, #19
 80021c2:	fa43 f306 	asr.w	r3, r3, r6
 80021c6:	bf0c      	ite	eq
 80021c8:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80021cc:	2200      	movne	r2, #0
 80021ce:	430b      	orrs	r3, r1
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <rint+0x108>)
 80021d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80021d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80021dc:	4610      	mov	r0, r2
 80021de:	462b      	mov	r3, r5
 80021e0:	4622      	mov	r2, r4
 80021e2:	f7fd fff7 	bl	80001d4 <__adddf3>
 80021e6:	e9cd 0100 	strd	r0, r1, [sp]
 80021ea:	4622      	mov	r2, r4
 80021ec:	462b      	mov	r3, r5
 80021ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80021f2:	f7fd ffed 	bl	80001d0 <__aeabi_dsub>
 80021f6:	e7d0      	b.n	800219a <rint+0x72>
 80021f8:	2e33      	cmp	r6, #51	; 0x33
 80021fa:	dd08      	ble.n	800220e <rint+0xe6>
 80021fc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002200:	d1cb      	bne.n	800219a <rint+0x72>
 8002202:	ee10 2a10 	vmov	r2, s0
 8002206:	460b      	mov	r3, r1
 8002208:	f7fd ffe4 	bl	80001d4 <__adddf3>
 800220c:	e7c5      	b.n	800219a <rint+0x72>
 800220e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8002212:	f04f 34ff 	mov.w	r4, #4294967295
 8002216:	40f4      	lsrs	r4, r6
 8002218:	4220      	tst	r0, r4
 800221a:	d0be      	beq.n	800219a <rint+0x72>
 800221c:	0861      	lsrs	r1, r4, #1
 800221e:	420f      	tst	r7, r1
 8002220:	bf1f      	itttt	ne
 8002222:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8002226:	ea27 0101 	bicne.w	r1, r7, r1
 800222a:	4132      	asrne	r2, r6
 800222c:	430a      	orrne	r2, r1
 800222e:	e7cf      	b.n	80021d0 <rint+0xa8>
 8002230:	080073d0 	.word	0x080073d0
 8002234:	000fffff 	.word	0x000fffff

08002238 <fabsf>:
 8002238:	ee10 3a10 	vmov	r3, s0
 800223c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002240:	ee00 3a10 	vmov	s0, r3
 8002244:	4770      	bx	lr

08002246 <finitef>:
 8002246:	ee10 3a10 	vmov	r3, s0
 800224a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800224e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8002252:	bfac      	ite	ge
 8002254:	2000      	movge	r0, #0
 8002256:	2001      	movlt	r0, #1
 8002258:	4770      	bx	lr
	...

0800225c <nanf>:
 800225c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8002264 <nanf+0x8>
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	7fc00000 	.word	0x7fc00000

08002268 <scalbnf>:
 8002268:	b508      	push	{r3, lr}
 800226a:	ee10 2a10 	vmov	r2, s0
 800226e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8002272:	ed2d 8b02 	vpush	{d8}
 8002276:	eef0 0a40 	vmov.f32	s1, s0
 800227a:	d004      	beq.n	8002286 <scalbnf+0x1e>
 800227c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002280:	d306      	bcc.n	8002290 <scalbnf+0x28>
 8002282:	ee70 0a00 	vadd.f32	s1, s0, s0
 8002286:	ecbd 8b02 	vpop	{d8}
 800228a:	eeb0 0a60 	vmov.f32	s0, s1
 800228e:	bd08      	pop	{r3, pc}
 8002290:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002294:	d21c      	bcs.n	80022d0 <scalbnf+0x68>
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <scalbnf+0xac>)
 8002298:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002318 <scalbnf+0xb0>
 800229c:	4298      	cmp	r0, r3
 800229e:	ee60 0a27 	vmul.f32	s1, s0, s15
 80022a2:	db10      	blt.n	80022c6 <scalbnf+0x5e>
 80022a4:	ee10 2a90 	vmov	r2, s1
 80022a8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80022ac:	3b19      	subs	r3, #25
 80022ae:	4403      	add	r3, r0
 80022b0:	2bfe      	cmp	r3, #254	; 0xfe
 80022b2:	dd0f      	ble.n	80022d4 <scalbnf+0x6c>
 80022b4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800231c <scalbnf+0xb4>
 80022b8:	eeb0 0a48 	vmov.f32	s0, s16
 80022bc:	f000 f834 	bl	8002328 <copysignf>
 80022c0:	ee60 0a08 	vmul.f32	s1, s0, s16
 80022c4:	e7df      	b.n	8002286 <scalbnf+0x1e>
 80022c6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002320 <scalbnf+0xb8>
 80022ca:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80022ce:	e7da      	b.n	8002286 <scalbnf+0x1e>
 80022d0:	0ddb      	lsrs	r3, r3, #23
 80022d2:	e7ec      	b.n	80022ae <scalbnf+0x46>
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	dd06      	ble.n	80022e6 <scalbnf+0x7e>
 80022d8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80022dc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80022e0:	ee00 3a90 	vmov	s1, r3
 80022e4:	e7cf      	b.n	8002286 <scalbnf+0x1e>
 80022e6:	f113 0f16 	cmn.w	r3, #22
 80022ea:	da06      	bge.n	80022fa <scalbnf+0x92>
 80022ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80022f0:	4298      	cmp	r0, r3
 80022f2:	dcdf      	bgt.n	80022b4 <scalbnf+0x4c>
 80022f4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8002320 <scalbnf+0xb8>
 80022f8:	e7de      	b.n	80022b8 <scalbnf+0x50>
 80022fa:	3319      	adds	r3, #25
 80022fc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002300:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8002304:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002324 <scalbnf+0xbc>
 8002308:	ee07 3a10 	vmov	s14, r3
 800230c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8002310:	e7b9      	b.n	8002286 <scalbnf+0x1e>
 8002312:	bf00      	nop
 8002314:	ffff3cb0 	.word	0xffff3cb0
 8002318:	4c000000 	.word	0x4c000000
 800231c:	7149f2ca 	.word	0x7149f2ca
 8002320:	0da24260 	.word	0x0da24260
 8002324:	33000000 	.word	0x33000000

08002328 <copysignf>:
 8002328:	ee10 3a10 	vmov	r3, s0
 800232c:	ee10 2a90 	vmov	r2, s1
 8002330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002334:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002338:	4313      	orrs	r3, r2
 800233a:	ee00 3a10 	vmov	s0, r3
 800233e:	4770      	bx	lr

08002340 <__errno>:
 8002340:	4b01      	ldr	r3, [pc, #4]	; (8002348 <__errno+0x8>)
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	2000103c 	.word	0x2000103c

0800234c <__libc_init_array>:
 800234c:	b570      	push	{r4, r5, r6, lr}
 800234e:	4e0d      	ldr	r6, [pc, #52]	; (8002384 <__libc_init_array+0x38>)
 8002350:	4c0d      	ldr	r4, [pc, #52]	; (8002388 <__libc_init_array+0x3c>)
 8002352:	1ba4      	subs	r4, r4, r6
 8002354:	10a4      	asrs	r4, r4, #2
 8002356:	2500      	movs	r5, #0
 8002358:	42a5      	cmp	r5, r4
 800235a:	d109      	bne.n	8002370 <__libc_init_array+0x24>
 800235c:	4e0b      	ldr	r6, [pc, #44]	; (800238c <__libc_init_array+0x40>)
 800235e:	4c0c      	ldr	r4, [pc, #48]	; (8002390 <__libc_init_array+0x44>)
 8002360:	f000 f818 	bl	8002394 <_init>
 8002364:	1ba4      	subs	r4, r4, r6
 8002366:	10a4      	asrs	r4, r4, #2
 8002368:	2500      	movs	r5, #0
 800236a:	42a5      	cmp	r5, r4
 800236c:	d105      	bne.n	800237a <__libc_init_array+0x2e>
 800236e:	bd70      	pop	{r4, r5, r6, pc}
 8002370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002374:	4798      	blx	r3
 8002376:	3501      	adds	r5, #1
 8002378:	e7ee      	b.n	8002358 <__libc_init_array+0xc>
 800237a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800237e:	4798      	blx	r3
 8002380:	3501      	adds	r5, #1
 8002382:	e7f2      	b.n	800236a <__libc_init_array+0x1e>
 8002384:	080073e0 	.word	0x080073e0
 8002388:	080073e0 	.word	0x080073e0
 800238c:	080073e0 	.word	0x080073e0
 8002390:	080073e4 	.word	0x080073e4

08002394 <_init>:
 8002394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002396:	bf00      	nop
 8002398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239a:	bc08      	pop	{r3}
 800239c:	469e      	mov	lr, r3
 800239e:	4770      	bx	lr

080023a0 <_fini>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	bf00      	nop
 80023a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a6:	bc08      	pop	{r3}
 80023a8:	469e      	mov	lr, r3
 80023aa:	4770      	bx	lr
