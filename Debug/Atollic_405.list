
Atollic_405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000398c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005208  08003b18  08003b18  00013b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000000  08008d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
  7 .bss          00004058  2000009c  2000009c  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200040f4  200040f4  0002009c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000281b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000563  00000000  00000000  000228e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000e8  00000000  00000000  00022e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00022f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000092c  00000000  00000000  00022ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001573  00000000  00000000  00023924  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024e97  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000008ec  00000000  00000000  00024f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00025800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003afc 	.word	0x08003afc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	08003afc 	.word	0x08003afc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000b66:	4909      	ldr	r1, [pc, #36]	; (8000b8c <NVIC_EnableIRQ+0x30>)
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	095b      	lsrs	r3, r3, #5
 8000b6e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b72:	f002 021f 	and.w	r2, r2, #31
 8000b76:	2001      	movs	r0, #1
 8000b78:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da0b      	bge.n	8000bbc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000ba4:	490d      	ldr	r1, [pc, #52]	; (8000bdc <NVIC_SetPriority+0x4c>)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	3b04      	subs	r3, #4
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000bba:	e009      	b.n	8000bd0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000bbc:	4908      	ldr	r1, [pc, #32]	; (8000be0 <NVIC_SetPriority+0x50>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <_Z18SystemClock_Configv>:
1110: system clock divided by 256
1111: system clock divided by 512
*/

void SystemClock_Config(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
	uint32_t temp = 0x00000000;
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]

	/* Enable Power Control clock */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;   // Enable PWREN bit (page - 183 of RM)
 8000bee:	4a3f      	ldr	r2, [pc, #252]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	PWR->CR |= 0x00004000;    //VOS bit = 01 (page - 145 or RM)
 8000bfa:	4a3d      	ldr	r2, [pc, #244]	; (8000cf0 <_Z18SystemClock_Configv+0x10c>)
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <_Z18SystemClock_Configv+0x10c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6013      	str	r3, [r2, #0]
	/**************************************************************************/

#ifdef USE_HSE
	//RCC->CR &= ~0x00000001; // HSI OFF, not guaranteed, but does not matter, may be slight increase in current
	RCC->CR |= 0x00010000;    // HSE ON
 8000c06:	4a39      	ldr	r2, [pc, #228]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c08:	4b38      	ldr	r3, [pc, #224]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
	while((RCC->CR & 0x00020000) == 0);   // Wait till HSE is ready
 8000c12:	4b36      	ldr	r3, [pc, #216]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d000      	beq.n	8000c2a <_Z18SystemClock_Configv+0x46>
 8000c28:	e7f3      	b.n	8000c12 <_Z18SystemClock_Configv+0x2e>

	// Set PLL
	temp = 0x00400000;    // PLL source is HSE (PLLSRC bit is set to one)
 8000c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2e:	607b      	str	r3, [r7, #4]
	//RCC->CR &= ~0x00010000; // HSE OFF, not guaranteed, but does not matter, may be slight increase in current
	while((RCC->CR & 0x00000002) == 0);   // Wait till HSI is ready
#endif

	//	Set the clock multipliers and dividers
	temp |= (uint32_t)PLL_M;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)PLL_N << 6);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000c3e:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)PLL_P << 16);
	temp |= ((uint32_t)PLL_Q << 24);
	RCC->PLLCFGR = temp;
 8000c40:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6053      	str	r3, [r2, #4]

	//	Set AHB, APB1 and APB2 prescalars
	temp = RCC->CFGR;
 8000c46:	4b29      	ldr	r3, [pc, #164]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)AHB_PRESCALAR << 4);
	temp |= ((uint32_t)APB1_PRESCALAR << 10);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c52:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)APB2_PRESCALAR << 13);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000c5a:	607b      	str	r3, [r7, #4]
	temp |= RCC_CFGR_SW_1;           // Select PLL as SYSCLK
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
	RCC->CFGR = temp;
 8000c64:	4a21      	ldr	r2, [pc, #132]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6093      	str	r3, [r2, #8]

	// The Flash access control register is used to enable/disable the acceleration features and control the Flash memory access time according to CPU frequency
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS; // FLASH_LATENCY_5
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <_Z18SystemClock_Configv+0x110>)
 8000c6c:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <_Z18SystemClock_Configv+0x110>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f043 0305 	orr.w	r3, r3, #5
 8000c74:	6013      	str	r3, [r2, #0]

	// Switch ON the PLL
	RCC->CR |= RCC_CR_PLLON;    // PLL ON
 8000c76:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c80:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);   // Wait till PLL is ready
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf0c      	ite	eq
 8000c8e:	2301      	moveq	r3, #1
 8000c90:	2300      	movne	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d000      	beq.n	8000c9a <_Z18SystemClock_Configv+0xb6>
 8000c98:	e7f3      	b.n	8000c82 <_Z18SystemClock_Configv+0x9e>

	// wait till PLL is really used as SYSCLK
	while((RCC->CFGR & RCC_CFGR_SWS_PLL) == 0); // System clock switch status SWS = 0b10 = PLL is really selected
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf0c      	ite	eq
 8000ca6:	2301      	moveq	r3, #1
 8000ca8:	2300      	movne	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d000      	beq.n	8000cb2 <_Z18SystemClock_Configv+0xce>
 8000cb0:	e7f3      	b.n	8000c9a <_Z18SystemClock_Configv+0xb6>

	// STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported
	volatile uint32_t idNumber = DBGMCU->IDCODE;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_Z18SystemClock_Configv+0x114>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	603b      	str	r3, [r7, #0]
	idNumber = idNumber >> 16;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	0c1b      	lsrs	r3, r3, #16
 8000cbc:	603b      	str	r3, [r7, #0]

	// Enable the Flash prefetch
	if(idNumber == 0x1001)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	f241 0201 	movw	r2, #4097	; 0x1001
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	bf0c      	ite	eq
 8000cc8:	2301      	moveq	r3, #1
 8000cca:	2300      	movne	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <_Z18SystemClock_Configv+0xfa>
	{
	  FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <_Z18SystemClock_Configv+0x110>)
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_Z18SystemClock_Configv+0x110>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6013      	str	r3, [r2, #0]
	}
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000
 8000cf4:	40023c00 	.word	0x40023c00
 8000cf8:	e0042000 	.word	0xe0042000

08000cfc <_Z7InitDACv>:
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;			// Enable SysTick interrupt
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;			// Enable SysTick
}

void InitDAC()
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	// Once the DAC channelx is enabled, the corresponding GPIO pin (PA4 or PA5) is automatically connected to the analog converter output (DAC_OUTx).
	// In order to avoid parasitic consumption, the PA4 or PA5 pin should first be configured to analog (AIN).

	// Enable DAC and GPIO Clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// Enable GPIO Clock
 8000d00:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <_Z7InitDACv+0x88>)
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <_Z7InitDACv+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;		// Enable DAC Clock
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <_Z7InitDACv+0x88>)
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <_Z7InitDACv+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40

	DAC->CR |= DAC_CR_EN1;			// Enable DAC using PA4 (DAC_OUT1)
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_BOFF1;		// Enable DAC channel output buffer to reduce the output impedance
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TEN1;			// DAC 1 enable trigger
 8000d30:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TSEL1;		// Set trigger to software (0b111: Software trigger)
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000d46:	6013      	str	r3, [r2, #0]

	DAC->CR |= DAC_CR_EN2;			// Enable DAC using PA5 (DAC_OUT2)
 8000d48:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_BOFF2;		// Enable DAC channel output buffer
 8000d54:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5e:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TEN2;			// DAC 2 enable trigger
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6a:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TSEL2;		// Set trigger to software (0b111: Software trigger)
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000d76:	6013      	str	r3, [r2, #0]

}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007400 	.word	0x40007400

08000d8c <_Z6InitIOv>:


void InitIO()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	// PC6 Button in
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;			// reset and clock control - advanced high performamnce bus - GPIO port C
 8000d90:	4a37      	ldr	r2, [pc, #220]	; (8000e70 <_Z6InitIOv+0xe4>)
 8000d92:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <_Z6InitIOv+0xe4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~(GPIO_MODER_MODER6);			// input mode is default
 8000d9c:	4a35      	ldr	r2, [pc, #212]	; (8000e74 <_Z6InitIOv+0xe8>)
 8000d9e:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <_Z6InitIOv+0xe8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000da6:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR6_0;			// Set pin to pull up:  01 Pull-up; 10 Pull-down; 11 Reserved
 8000da8:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <_Z6InitIOv+0xe8>)
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <_Z6InitIOv+0xe8>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db2:	60d3      	str	r3, [r2, #12]

	// Set up PB12 and PB13 for octave up and down switch
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;			// reset and clock control - advanced high performamnce bus - GPIO port B
 8000db4:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <_Z6InitIOv+0xe4>)
 8000db6:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <_Z6InitIOv+0xe4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB->MODER &= ~(GPIO_MODER_MODER12);			// input mode is default
 8000dc0:	4a2d      	ldr	r2, [pc, #180]	; (8000e78 <_Z6InitIOv+0xec>)
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <_Z6InitIOv+0xec>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000dca:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER13);			// input mode is default
 8000dcc:	4a2a      	ldr	r2, [pc, #168]	; (8000e78 <_Z6InitIOv+0xec>)
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <_Z6InitIOv+0xec>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000dd6:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR12_1;			// Set pin to pull down:  01 Pull-up; 10 Pull-down; 11 Reserved
 8000dd8:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <_Z6InitIOv+0xec>)
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <_Z6InitIOv+0xec>)
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de2:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR13_1;			// Set pin to pull down:  01 Pull-up; 10 Pull-down; 11 Reserved
 8000de4:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <_Z6InitIOv+0xec>)
 8000de6:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <_Z6InitIOv+0xec>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dee:	60d3      	str	r3, [r2, #12]


	// configure PB13 & PB12 switch to fire on an interrupt
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;			// Enable system configuration clock: used to manage  external interrupt line connection to GPIOs
 8000df0:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <_Z6InitIOv+0xe4>)
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <_Z6InitIOv+0xe4>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfa:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI12_PB;	// Select Pin PC13 which uses External interrupt 4
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <_Z6InitIOv+0xf0>)
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <_Z6InitIOv+0xf0>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6153      	str	r3, [r2, #20]
	EXTI->RTSR |= EXTI_RTSR_TR12;					// Enable rising edge trigger for line 13
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e12:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= EXTI_FTSR_TR12;					// Enable falling edge trigger for line 13
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e1e:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR12;						// Activate interrupt using mask register 13
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e2a:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PB;	// Select Pin PC13 which uses External interrupt 4
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <_Z6InitIOv+0xf0>)
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_Z6InitIOv+0xf0>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6153      	str	r3, [r2, #20]
	EXTI->RTSR |= EXTI_RTSR_TR13;					// Enable rising edge trigger for line 13
 8000e38:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e42:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= EXTI_FTSR_TR13;					// Enable falling edge trigger for line 13
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e4e:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR13;						// Activate interrupt using mask register 13
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <_Z6InitIOv+0xf4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e5a:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(EXTI15_10_IRQn, 3);
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	2028      	movs	r0, #40	; 0x28
 8000e60:	f7ff fe96 	bl	8000b90 <NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e64:	2028      	movs	r0, #40	; 0x28
 8000e66:	f7ff fe79 	bl	8000b5c <NVIC_EnableIRQ>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	40013c00 	.word	0x40013c00

08000e84 <_Z9InitTimerv>:


void InitTimer()
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	//	Setup Timer 3 on an interrupt to trigger sample loading
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;		// Enable Timer 3
 8000e88:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <_Z9InitTimerv+0x6c>)
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <_Z9InitTimerv+0x6c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = (SystemCoreClock / SAMPLERATE) / 4;	// Set prescaler to fire at sample rate - this is divided by 4 to match the APB2 prescaler
 8000e94:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <_Z9InitTimerv+0x70>)
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <_Z9InitTimerv+0x74>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4918      	ldr	r1, [pc, #96]	; (8000efc <_Z9InitTimerv+0x78>)
 8000e9c:	fba1 1303 	umull	r1, r3, r1, r3
 8000ea0:	0c9b      	lsrs	r3, r3, #18
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	8513      	strh	r3, [r2, #40]	; 0x28
	TIM3->ARR = 1; //SystemCoreClock / 48000 - 1;	// Set maximum count value (auto reload register) - set to system clock / sampling rate
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_Z9InitTimerv+0x70>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c

	SET_BIT(TIM3->DIER, TIM_DIER_UIE);				//  DMA/interrupt enable register
 8000eac:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <_Z9InitTimerv+0x70>)
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <_Z9InitTimerv+0x70>)
 8000eb0:	899b      	ldrh	r3, [r3, #12]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	8193      	strh	r3, [r2, #12]
	NVIC_EnableIRQ(TIM3_IRQn);
 8000ebc:	201d      	movs	r0, #29
 8000ebe:	f7ff fe4d 	bl	8000b5c <NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 6);
 8000ec2:	2106      	movs	r1, #6
 8000ec4:	201d      	movs	r0, #29
 8000ec6:	f7ff fe63 	bl	8000b90 <NVIC_SetPriority>

	SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <_Z9InitTimerv+0x70>)
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <_Z9InitTimerv+0x70>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	8013      	strh	r3, [r2, #0]
	SET_BIT(TIM3->EGR, TIM_EGR_UG);
 8000eda:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <_Z9InitTimerv+0x70>)
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <_Z9InitTimerv+0x70>)
 8000ede:	8a9b      	ldrh	r3, [r3, #20]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	8293      	strh	r3, [r2, #20]
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40000400 	.word	0x40000400
 8000ef8:	20000020 	.word	0x20000020
 8000efc:	e90452d5 	.word	0xe90452d5

08000f00 <_Z7InitADCv>:

void InitADC(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	//	Setup Timer 2 to trigger ADC
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// Enable Timer 2 clock
 8000f04:	4a9c      	ldr	r2, [pc, #624]	; (8001178 <_Z7InitADCv+0x278>)
 8000f06:	4b9c      	ldr	r3, [pc, #624]	; (8001178 <_Z7InitADCv+0x278>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->CR2 |= TIM_CR2_MMS_2;						// 100: Compare - OC1REF signal is used as trigger output (TRGO)
 8000f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f18:	889b      	ldrh	r3, [r3, #4]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	8093      	strh	r3, [r2, #4]
	TIM2->PSC = 20 - 1;								// Prescaler
 8000f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f28:	2213      	movs	r2, #19
 8000f2a:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100 - 1;							// Auto-reload register (ie reset counter) divided by 100
 8000f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f30:	2263      	movs	r2, #99	; 0x63
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 50 - 1;							// Capture and compare - ie when counter hits this number PWM high
 8000f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f38:	2231      	movs	r2, #49	; 0x31
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E;					// Capture/Compare 1 output enable
 8000f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f44:	8c1b      	ldrh	r3, [r3, #32]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	8413      	strh	r3, [r2, #32]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 |TIM_CCMR1_OC1M_2;	// 110 PWM Mode 1
 8000f50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f58:	8b1b      	ldrh	r3, [r3, #24]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	8313      	strh	r3, [r2, #24]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	8013      	strh	r3, [r2, #0]

	// Enable ADC2 and GPIO clock sources
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000f78:	4a7f      	ldr	r2, [pc, #508]	; (8001178 <_Z7InitADCv+0x278>)
 8000f7a:	4b7f      	ldr	r3, [pc, #508]	; (8001178 <_Z7InitADCv+0x278>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000f84:	4a7c      	ldr	r2, [pc, #496]	; (8001178 <_Z7InitADCv+0x278>)
 8000f86:	4b7c      	ldr	r3, [pc, #496]	; (8001178 <_Z7InitADCv+0x278>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000f90:	4a79      	ldr	r2, [pc, #484]	; (8001178 <_Z7InitADCv+0x278>)
 8000f92:	4b79      	ldr	r3, [pc, #484]	; (8001178 <_Z7InitADCv+0x278>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8000f9c:	4a76      	ldr	r2, [pc, #472]	; (8001178 <_Z7InitADCv+0x278>)
 8000f9e:	4b76      	ldr	r3, [pc, #472]	; (8001178 <_Z7InitADCv+0x278>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6453      	str	r3, [r2, #68]	; 0x44

	// Enable ADC - PB0: ADC12_IN8; PB1: ADC12_IN9; PA1: ADC123_IN1; PA2: ADC123_IN2; PA3: ADC123_IN3; PC0: ADC123_IN10, PC2: ADC123_IN12
	GPIOB->MODER |= GPIO_MODER_MODER0;				// Set PB0 to Analog mode (0b11)
 8000fa8:	4a74      	ldr	r2, [pc, #464]	; (800117c <_Z7InitADCv+0x27c>)
 8000faa:	4b74      	ldr	r3, [pc, #464]	; (800117c <_Z7InitADCv+0x27c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f043 0303 	orr.w	r3, r3, #3
 8000fb2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER1;				// Set PB1 to Analog mode (0b11)
 8000fb4:	4a71      	ldr	r2, [pc, #452]	; (800117c <_Z7InitADCv+0x27c>)
 8000fb6:	4b71      	ldr	r3, [pc, #452]	; (800117c <_Z7InitADCv+0x27c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f043 030c 	orr.w	r3, r3, #12
 8000fbe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER1;				// Set PA1 to Analog mode (0b11)
 8000fc0:	4a6f      	ldr	r2, [pc, #444]	; (8001180 <_Z7InitADCv+0x280>)
 8000fc2:	4b6f      	ldr	r3, [pc, #444]	; (8001180 <_Z7InitADCv+0x280>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f043 030c 	orr.w	r3, r3, #12
 8000fca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2;				// Set PA2 to Analog mode (0b11)
 8000fcc:	4a6c      	ldr	r2, [pc, #432]	; (8001180 <_Z7InitADCv+0x280>)
 8000fce:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <_Z7InitADCv+0x280>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000fd6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER3;				// Set PA3 to Analog mode (0b11)
 8000fd8:	4a69      	ldr	r2, [pc, #420]	; (8001180 <_Z7InitADCv+0x280>)
 8000fda:	4b69      	ldr	r3, [pc, #420]	; (8001180 <_Z7InitADCv+0x280>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fe2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER0;				// Set PC0 to Analog mode (0b11)
 8000fe4:	4a67      	ldr	r2, [pc, #412]	; (8001184 <_Z7InitADCv+0x284>)
 8000fe6:	4b67      	ldr	r3, [pc, #412]	; (8001184 <_Z7InitADCv+0x284>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f043 0303 	orr.w	r3, r3, #3
 8000fee:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER2;				// Set PC2 to Analog mode (0b11)
 8000ff0:	4a64      	ldr	r2, [pc, #400]	; (8001184 <_Z7InitADCv+0x284>)
 8000ff2:	4b64      	ldr	r3, [pc, #400]	; (8001184 <_Z7InitADCv+0x284>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ffa:	6013      	str	r3, [r2, #0]

	ADC2->CR1 |= ADC_CR1_SCAN;						// Activate scan mode
 8000ffc:	4a62      	ldr	r2, [pc, #392]	; (8001188 <_Z7InitADCv+0x288>)
 8000ffe:	4b62      	ldr	r3, [pc, #392]	; (8001188 <_Z7InitADCv+0x288>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001006:	6053      	str	r3, [r2, #4]
	ADC2->SQR1 = (ADC_BUFFER_LENGTH - 1) << 20;		// Number of conversions in sequence
 8001008:	4b5f      	ldr	r3, [pc, #380]	; (8001188 <_Z7InitADCv+0x288>)
 800100a:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC2->SQR3 |= 8 << 0;							// Set ADC12_IN8 to first conversion in sequence
 8001010:	4a5d      	ldr	r2, [pc, #372]	; (8001188 <_Z7InitADCv+0x288>)
 8001012:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <_Z7InitADCv+0x288>)
 8001014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 9 << 5;							// Set ADC12_IN9 to second conversion in sequence
 800101c:	4a5a      	ldr	r2, [pc, #360]	; (8001188 <_Z7InitADCv+0x288>)
 800101e:	4b5a      	ldr	r3, [pc, #360]	; (8001188 <_Z7InitADCv+0x288>)
 8001020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001022:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8001026:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 1 << 10;							// Set ADC123_IN1 to third conversion in sequence
 8001028:	4a57      	ldr	r2, [pc, #348]	; (8001188 <_Z7InitADCv+0x288>)
 800102a:	4b57      	ldr	r3, [pc, #348]	; (8001188 <_Z7InitADCv+0x288>)
 800102c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 2 << 15;							// Set ADC123_IN2 to fourth conversion in sequence
 8001034:	4a54      	ldr	r2, [pc, #336]	; (8001188 <_Z7InitADCv+0x288>)
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <_Z7InitADCv+0x288>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 3 << 20;							// Set ADC123_IN3 to fifth conversion in sequence
 8001040:	4a51      	ldr	r2, [pc, #324]	; (8001188 <_Z7InitADCv+0x288>)
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <_Z7InitADCv+0x288>)
 8001044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001046:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800104a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 10 << 25;							// Set ADC123_IN10 to sixth conversion in sequence
 800104c:	4a4e      	ldr	r2, [pc, #312]	; (8001188 <_Z7InitADCv+0x288>)
 800104e:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <_Z7InitADCv+0x288>)
 8001050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001052:	f043 53a0 	orr.w	r3, r3, #335544320	; 0x14000000
 8001056:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR2 |= 12 << 0;							// Set ADC123_IN13 to seventh conversion in sequence
 8001058:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <_Z7InitADCv+0x288>)
 800105a:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <_Z7InitADCv+0x288>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f043 030c 	orr.w	r3, r3, #12
 8001062:	6313      	str	r3, [r2, #48]	; 0x30

	//	Set to 56 cycles (0b11) sampling speed (SMPR2 Left shift speed 3 x ADC_INx up to input 9; use SMPR1 from 0 for ADC_IN10+)
	ADC2->SMPR2 |= 0b11 << 24;						// Set speed of IN8
 8001064:	4a48      	ldr	r2, [pc, #288]	; (8001188 <_Z7InitADCv+0x288>)
 8001066:	4b48      	ldr	r3, [pc, #288]	; (8001188 <_Z7InitADCv+0x288>)
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800106e:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 27;						// Set speed of IN9
 8001070:	4a45      	ldr	r2, [pc, #276]	; (8001188 <_Z7InitADCv+0x288>)
 8001072:	4b45      	ldr	r3, [pc, #276]	; (8001188 <_Z7InitADCv+0x288>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 800107a:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 3;						// Set speed of IN1
 800107c:	4a42      	ldr	r2, [pc, #264]	; (8001188 <_Z7InitADCv+0x288>)
 800107e:	4b42      	ldr	r3, [pc, #264]	; (8001188 <_Z7InitADCv+0x288>)
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	f043 0318 	orr.w	r3, r3, #24
 8001086:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 6;						// Set speed of IN2
 8001088:	4a3f      	ldr	r2, [pc, #252]	; (8001188 <_Z7InitADCv+0x288>)
 800108a:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <_Z7InitADCv+0x288>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001092:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 9;						// Set speed of IN3
 8001094:	4a3c      	ldr	r2, [pc, #240]	; (8001188 <_Z7InitADCv+0x288>)
 8001096:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <_Z7InitADCv+0x288>)
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800109e:	6113      	str	r3, [r2, #16]
	ADC2->SMPR1 |= 0b11 << 0;						// Set speed of IN10
 80010a0:	4a39      	ldr	r2, [pc, #228]	; (8001188 <_Z7InitADCv+0x288>)
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <_Z7InitADCv+0x288>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	f043 0303 	orr.w	r3, r3, #3
 80010aa:	60d3      	str	r3, [r2, #12]
	ADC2->SMPR1 |= 0b11 << 6;						// Set speed of IN12
 80010ac:	4a36      	ldr	r2, [pc, #216]	; (8001188 <_Z7InitADCv+0x288>)
 80010ae:	4b36      	ldr	r3, [pc, #216]	; (8001188 <_Z7InitADCv+0x288>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010b6:	60d3      	str	r3, [r2, #12]

	ADC2->CR2 |= ADC_CR2_EOCS;						// Trigger interrupt on end of each individual conversion
 80010b8:	4a33      	ldr	r2, [pc, #204]	; (8001188 <_Z7InitADCv+0x288>)
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <_Z7InitADCv+0x288>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c2:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_EXTEN_0;					// ADC hardware trigger 00: Trigger detection disabled; 01: Trigger detection on the rising edge; 10: Trigger detection on the falling edge; 11: Trigger detection on both the rising and falling edges
 80010c4:	4a30      	ldr	r2, [pc, #192]	; (8001188 <_Z7InitADCv+0x288>)
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <_Z7InitADCv+0x288>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;	// ADC External trigger: 0110 = TIM2_TRGO event
 80010d0:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <_Z7InitADCv+0x288>)
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <_Z7InitADCv+0x288>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80010da:	6093      	str	r3, [r2, #8]

	// Enable DMA - DMA2, Channel 1, Stream 2  = ADC2 (Manual p207)
	ADC2->CR2 |= ADC_CR2_DMA;						// Enable DMA Mode on ADC2
 80010dc:	4a2a      	ldr	r2, [pc, #168]	; (8001188 <_Z7InitADCv+0x288>)
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <_Z7InitADCv+0x288>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DDS;						// DMA requests are issued as long as data are converted and DMA=1
 80010e8:	4a27      	ldr	r2, [pc, #156]	; (8001188 <_Z7InitADCv+0x288>)
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <_Z7InitADCv+0x288>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f2:	6093      	str	r3, [r2, #8]
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80010f4:	4a20      	ldr	r2, [pc, #128]	; (8001178 <_Z7InitADCv+0x278>)
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <_Z7InitADCv+0x278>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010fe:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2_Stream2->CR &= ~DMA_SxCR_DIR;				// 00 = Peripheral-to-memory
 8001100:	4a22      	ldr	r2, [pc, #136]	; (800118c <_Z7InitADCv+0x28c>)
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <_Z7InitADCv+0x28c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800110a:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_PL_1;				// Priority: 00 = low; 01 = Medium; 10 = High; 11 = Very High
 800110c:	4a1f      	ldr	r2, [pc, #124]	; (800118c <_Z7InitADCv+0x28c>)
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <_Z7InitADCv+0x28c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001116:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_PSIZE_0;			// Peripheral size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8001118:	4a1c      	ldr	r2, [pc, #112]	; (800118c <_Z7InitADCv+0x28c>)
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <_Z7InitADCv+0x28c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001122:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_MSIZE_0;			// Memory size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <_Z7InitADCv+0x28c>)
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <_Z7InitADCv+0x28c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112e:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR &= ~DMA_SxCR_PINC;				// Peripheral not in increment mode
 8001130:	4a16      	ldr	r2, [pc, #88]	; (800118c <_Z7InitADCv+0x28c>)
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <_Z7InitADCv+0x28c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800113a:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_MINC;				// Memory in increment mode
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <_Z7InitADCv+0x28c>)
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <_Z7InitADCv+0x28c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_CIRC;				// circular mode to keep refilling buffer
 8001148:	4a10      	ldr	r2, [pc, #64]	; (800118c <_Z7InitADCv+0x28c>)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_Z7InitADCv+0x28c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR &= ~DMA_SxCR_DIR;				// data transfer direction: 00: peripheral-to-memory; 01: memory-to-peripheral; 10: memory-to-memory
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <_Z7InitADCv+0x28c>)
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <_Z7InitADCv+0x28c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800115e:	6013      	str	r3, [r2, #0]

	DMA2_Stream2->NDTR |= ADC_BUFFER_LENGTH;		// Number of data items to transfer (ie size of ADC buffer)
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <_Z7InitADCv+0x28c>)
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <_Z7InitADCv+0x28c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f043 0307 	orr.w	r3, r3, #7
 800116a:	6053      	str	r3, [r2, #4]
	DMA2_Stream2->PAR = (uint32_t)(&(ADC2->DR));	// Configure the peripheral data register address
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <_Z7InitADCv+0x28c>)
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <_Z7InitADCv+0x290>)
 8001170:	609a      	str	r2, [r3, #8]
	DMA2_Stream2->M0AR = (uint32_t)(ADC_array);		// Configure the memory address (note that M1AR is used for double-buffer mode)
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <_Z7InitADCv+0x28c>)
 8001174:	e00e      	b.n	8001194 <_Z7InitADCv+0x294>
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400
 8001180:	40020000 	.word	0x40020000
 8001184:	40020800 	.word	0x40020800
 8001188:	40012100 	.word	0x40012100
 800118c:	40026440 	.word	0x40026440
 8001190:	4001214c 	.word	0x4001214c
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <_Z7InitADCv+0x2c8>)
 8001196:	60da      	str	r2, [r3, #12]
	DMA2_Stream2->CR |= DMA_SxCR_CHSEL_0;			// channel select to 1 for ADC2
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <_Z7InitADCv+0x2cc>)
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <_Z7InitADCv+0x2cc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011a2:	6013      	str	r3, [r2, #0]

	DMA2_Stream2->CR |= DMA_SxCR_EN;				// Enable DMA2
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <_Z7InitADCv+0x2cc>)
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <_Z7InitADCv+0x2cc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6013      	str	r3, [r2, #0]
	ADC2->CR2 |= ADC_CR2_ADON;						// Activate ADC
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <_Z7InitADCv+0x2d0>)
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_Z7InitADCv+0x2d0>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6093      	str	r3, [r2, #8]

	DMA2_Stream0->CR |= DMA_SxCR_EN;				// Enable DMA2
	ADC1->CR2 |= ADC_CR2_ADON;						// Activate ADC*/


}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200000b8 	.word	0x200000b8
 80011cc:	40026440 	.word	0x40026440
 80011d0:	40012100 	.word	0x40012100

080011d4 <_ZSt3powff>:
  using ::pow;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	ed87 0a01 	vstr	s0, [r7, #4]
 80011de:	edc7 0a00 	vstr	s1, [r7]
 80011e2:	edd7 0a00 	vldr	s1, [r7]
 80011e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80011ea:	f000 fecd 	bl	8001f88 <powf>
 80011ee:	eef0 7a40 	vmov.f32	s15, s0
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <TIM3_IRQHandler>:
uint8_t NoOfLUTs = sizeof(LUTArray) / sizeof(LUTArray[0]);

//	Use extern C to allow linker to find ISR
extern "C"
{
	void TIM3_IRQHandler(void) {
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
		// Send next samples to DAC
		if (TIM3->SR & TIM_SR_UIF) 						// if UIF flag is set
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <TIM3_IRQHandler+0x68>)
 8001202:	8a1b      	ldrh	r3, [r3, #16]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf14      	ite	ne
 800120e:	2301      	movne	r3, #1
 8001210:	2300      	moveq	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01f      	beq.n	8001258 <TIM3_IRQHandler+0x5c>
		{
			TIM3->SR &= ~TIM_SR_UIF;					// clear UIF flag
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <TIM3_IRQHandler+0x68>)
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <TIM3_IRQHandler+0x68>)
 800121c:	8a1b      	ldrh	r3, [r3, #16]
 800121e:	b29b      	uxth	r3, r3
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	b29b      	uxth	r3, r3
 8001226:	8213      	strh	r3, [r2, #16]
			DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;		// Tell the DAC to output the next value
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <TIM3_IRQHandler+0x6c>)
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <TIM3_IRQHandler+0x6c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6053      	str	r3, [r2, #4]
			DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;		// Tell the DAC to output the next value
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <TIM3_IRQHandler+0x6c>)
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <TIM3_IRQHandler+0x6c>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	6053      	str	r3, [r2, #4]

			if (DacRead == 1)							// If the buffer has not been refilled increment overrun warning
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <TIM3_IRQHandler+0x70>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <TIM3_IRQHandler+0x56>
				overrun++;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <TIM3_IRQHandler+0x74>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <TIM3_IRQHandler+0x74>)
 8001250:	6013      	str	r3, [r2, #0]

			DacRead = 1;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <TIM3_IRQHandler+0x70>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
		}
	}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40000400 	.word	0x40000400
 8001268:	40007400 	.word	0x40007400
 800126c:	200000c7 	.word	0x200000c7
 8001270:	200000e0 	.word	0x200000e0

08001274 <EXTI15_10_IRQHandler>:

	void EXTI15_10_IRQHandler(void) {
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
		// Read PB12 and PB13 for octave up and down switch
		if (GPIOB->IDR & GPIO_IDR_IDR_12)
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <EXTI15_10_IRQHandler+0x5c>)
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <EXTI15_10_IRQHandler+0x22>
			RelPitch = OCTAVEUP;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <EXTI15_10_IRQHandler+0x60>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e011      	b.n	80012ba <EXTI15_10_IRQHandler+0x46>
		else if (GPIOB->IDR & GPIO_IDR_IDR_13)
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <EXTI15_10_IRQHandler+0x5c>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bf14      	ite	ne
 80012a2:	2301      	movne	r3, #1
 80012a4:	2300      	moveq	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <EXTI15_10_IRQHandler+0x40>
			RelPitch = OCTAVEDOWN;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <EXTI15_10_IRQHandler+0x60>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e002      	b.n	80012ba <EXTI15_10_IRQHandler+0x46>
		else
			RelPitch = NONE;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <EXTI15_10_IRQHandler+0x60>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
		EXTI->PR |= EXTI_PR_PR13 | EXTI_PR_PR12;;
 80012ba:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <EXTI15_10_IRQHandler+0x64>)
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <EXTI15_10_IRQHandler+0x64>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80012c4:	6153      	str	r3, [r2, #20]
	}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40020400 	.word	0x40020400
 80012d4:	200000c6 	.word	0x200000c6
 80012d8:	40013c00 	.word	0x40013c00

080012dc <_Z11InterpolatePfRf>:
}


//	Interpolate between two positions (derived from a float and its rounded value) in a LUT
float Interpolate(float* LUT, float& LUTPosition)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	float s1 = LUT[(int) LUTPosition];
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f0:	ee17 3a90 	vmov	r3, s15
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
	float s2 = LUT[((int) LUTPosition + 1) % LUTSIZE];
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001308:	ee17 3a90 	vmov	r3, s15
 800130c:	3301      	adds	r3, #1
 800130e:	425a      	negs	r2, r3
 8001310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001314:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001318:	bf58      	it	pl
 800131a:	4253      	negpl	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60bb      	str	r3, [r7, #8]
	return s1 + ((s2 - s1) * (LUTPosition - (int)LUTPosition));
 8001326:	ed97 7a02 	vldr	s14, [r7, #8]
 800132a:	edd7 7a03 	vldr	s15, [r7, #12]
 800132e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	edd3 6a00 	vldr	s13, [r3]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001346:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800134a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001352:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_Z12GetPhaseDistPKffff>:

// Generate a phase distorted sine wave - pass LUT containing PD offsets, LUT position as a fraction of the wave cycle and a scaling factor
float GetPhaseDist(const float* PdLUT, const float LUTPosition, float scale = 1, float offset = 0){
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001370:	edc7 0a01 	vstr	s1, [r7, #4]
 8001374:	ed87 1a00 	vstr	s2, [r7]
	PhaseDist = PdLUT[(int)(LUTPosition * LUTSIZE)] * LUTSIZE * scale;
 8001378:	edd7 7a02 	vldr	s15, [r7, #8]
 800137c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001430 <_Z12GetPhaseDistPKffff+0xcc>
 8001380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001388:	ee17 3a90 	vmov	r3, s15
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4413      	add	r3, r2
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001430 <_Z12GetPhaseDistPKffff+0xcc>
 800139a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a6:	4b23      	ldr	r3, [pc, #140]	; (8001434 <_Z12GetPhaseDistPKffff+0xd0>)
 80013a8:	edc3 7a00 	vstr	s15, [r3]

	// Add main wave position to phase distortion position and ensure in bounds
	float Pos = ((LUTPosition + offset) * LUTSIZE) + PhaseDist;
 80013ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80013b0:	edd7 7a00 	vldr	s15, [r7]
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001430 <_Z12GetPhaseDistPKffff+0xcc>
 80013bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <_Z12GetPhaseDistPKffff+0xd0>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ca:	edc7 7a05 	vstr	s15, [r7, #20]
	while (Pos > LUTSIZE)
 80013ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001430 <_Z12GetPhaseDistPKffff+0xcc>
 80013d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	dc00      	bgt.n	80013e2 <_Z12GetPhaseDistPKffff+0x7e>
 80013e0:	e008      	b.n	80013f4 <_Z12GetPhaseDistPKffff+0x90>
		Pos -= LUTSIZE;
 80013e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001430 <_Z12GetPhaseDistPKffff+0xcc>
 80013ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ee:	edc7 7a05 	vstr	s15, [r7, #20]
	while (Pos > LUTSIZE)
 80013f2:	e7ec      	b.n	80013ce <_Z12GetPhaseDistPKffff+0x6a>
	while (Pos < 0)
 80013f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	d508      	bpl.n	8001414 <_Z12GetPhaseDistPKffff+0xb0>
		Pos =  LUTSIZE + Pos;
 8001402:	edd7 7a05 	vldr	s15, [r7, #20]
 8001406:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001430 <_Z12GetPhaseDistPKffff+0xcc>
 800140a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800140e:	edc7 7a05 	vstr	s15, [r7, #20]
	while (Pos < 0)
 8001412:	e7ef      	b.n	80013f4 <_Z12GetPhaseDistPKffff+0x90>

	return Interpolate(SineLUT, Pos); 	//	interpolate samples
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <_Z12GetPhaseDistPKffff+0xd4>)
 800141c:	f7ff ff5e 	bl	80012dc <_Z11InterpolatePfRf>
 8001420:	eef0 7a40 	vmov.f32	s15, s0
}
 8001424:	eeb0 0a67 	vmov.f32	s0, s15
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	44800000 	.word	0x44800000
 8001434:	200000cc 	.word	0x200000cc
 8001438:	200000f0 	.word	0x200000f0

0800143c <_Z17GetBlendPhaseDistffff>:

// Generate a phase distorted sine wave - pass LUT containing PD offsets, LUT position as a fraction of the wave cycle and a scaling factor
float GetBlendPhaseDist(float PDBlend, const float LUTPosition, float scale = 1, float offset = 0){
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0
 8001442:	ed87 0a05 	vstr	s0, [r7, #20]
 8001446:	edc7 0a04 	vstr	s1, [r7, #16]
 800144a:	ed87 1a03 	vstr	s2, [r7, #12]
 800144e:	edc7 1a02 	vstr	s3, [r7, #8]
	// get the two PD LUTs that will be blended
	const float* PdLUTBlendA = LUTArray[(uint8_t)PDBlend];
 8001452:	edd7 7a05 	vldr	s15, [r7, #20]
 8001456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800145a:	edc7 7a01 	vstr	s15, [r7, #4]
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <_Z17GetBlendPhaseDistffff+0x198>)
 8001466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float* PdLUTBlendB = LUTArray[(uint8_t)(PDBlend + 1) % NoOfLUTs];
 800146c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001474:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001480:	793b      	ldrb	r3, [r7, #4]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4a54      	ldr	r2, [pc, #336]	; (80015d8 <_Z17GetBlendPhaseDistffff+0x19c>)
 8001486:	7812      	ldrb	r2, [r2, #0]
 8001488:	fbb3 f1f2 	udiv	r1, r3, r2
 800148c:	fb02 f201 	mul.w	r2, r2, r1
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	b2db      	uxtb	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4b4f      	ldr	r3, [pc, #316]	; (80015d4 <_Z17GetBlendPhaseDistffff+0x198>)
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28

	// Get the values from each LUT for the sample position
	float PhaseDistA = PdLUTBlendA[(int)(LUTPosition * LUTSIZE)] * LUTSIZE * scale;
 800149e:	edd7 7a04 	vldr	s15, [r7, #16]
 80014a2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80015dc <_Z17GetBlendPhaseDistffff+0x1a0>
 80014a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ae:	ee17 3a90 	vmov	r3, s15
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b6:	4413      	add	r3, r2
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80015dc <_Z17GetBlendPhaseDistffff+0x1a0>
 80014c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float PhaseDistB = PdLUTBlendB[(int)(LUTPosition * LUTSIZE)] * LUTSIZE * scale;
 80014d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014d4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80015dc <_Z17GetBlendPhaseDistffff+0x1a0>
 80014d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e0:	ee17 3a90 	vmov	r3, s15
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014e8:	4413      	add	r3, r2
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80015dc <_Z17GetBlendPhaseDistffff+0x1a0>
 80014f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fe:	edc7 7a08 	vstr	s15, [r7, #32]

	// Get the weighted blend of the two PD amounts
	float blend = PDBlend - (uint8_t)PDBlend;
 8001502:	edd7 7a05 	vldr	s15, [r7, #20]
 8001506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800150a:	edc7 7a01 	vstr	s15, [r7, #4]
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151a:	ed97 7a05 	vldr	s14, [r7, #20]
 800151e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001522:	edc7 7a07 	vstr	s15, [r7, #28]
	PhaseDist = ((1 - blend) * PhaseDistA) + (blend * PhaseDistB);
 8001526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800152a:	edd7 7a07 	vldr	s15, [r7, #28]
 800152e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001532:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800153a:	edd7 6a07 	vldr	s13, [r7, #28]
 800153e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <_Z17GetBlendPhaseDistffff+0x1a4>)
 800154c:	edc3 7a00 	vstr	s15, [r3]

	// Add main wave position to phase distortion position and ensure in bounds
	float Pos = ((LUTPosition + offset) * LUTSIZE) + PhaseDist;
 8001550:	ed97 7a04 	vldr	s14, [r7, #16]
 8001554:	edd7 7a02 	vldr	s15, [r7, #8]
 8001558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80015dc <_Z17GetBlendPhaseDistffff+0x1a0>
 8001560:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <_Z17GetBlendPhaseDistffff+0x1a4>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	edc7 7a06 	vstr	s15, [r7, #24]
	while (Pos > LUTSIZE)
 8001572:	edd7 7a06 	vldr	s15, [r7, #24]
 8001576:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80015dc <_Z17GetBlendPhaseDistffff+0x1a0>
 800157a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	dc00      	bgt.n	8001586 <_Z17GetBlendPhaseDistffff+0x14a>
 8001584:	e008      	b.n	8001598 <_Z17GetBlendPhaseDistffff+0x15c>
		Pos -= LUTSIZE;
 8001586:	edd7 7a06 	vldr	s15, [r7, #24]
 800158a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80015dc <_Z17GetBlendPhaseDistffff+0x1a0>
 800158e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001592:	edc7 7a06 	vstr	s15, [r7, #24]
	while (Pos > LUTSIZE)
 8001596:	e7ec      	b.n	8001572 <_Z17GetBlendPhaseDistffff+0x136>
	while (Pos < 0)
 8001598:	edd7 7a06 	vldr	s15, [r7, #24]
 800159c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	d508      	bpl.n	80015b8 <_Z17GetBlendPhaseDistffff+0x17c>
		Pos =  LUTSIZE + Pos;
 80015a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80015dc <_Z17GetBlendPhaseDistffff+0x1a0>
 80015ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b2:	edc7 7a06 	vstr	s15, [r7, #24]
	while (Pos < 0)
 80015b6:	e7ef      	b.n	8001598 <_Z17GetBlendPhaseDistffff+0x15c>

	return Interpolate(SineLUT, Pos); 	//	interpolate samples
 80015b8:	f107 0318 	add.w	r3, r7, #24
 80015bc:	4619      	mov	r1, r3
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <_Z17GetBlendPhaseDistffff+0x1a8>)
 80015c0:	f7ff fe8c 	bl	80012dc <_Z11InterpolatePfRf>
 80015c4:	eef0 7a40 	vmov.f32	s15, s0
}
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	3730      	adds	r7, #48	; 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	2000001c 	.word	0x2000001c
 80015dc:	44800000 	.word	0x44800000
 80015e0:	200000cc 	.word	0x200000cc
 80015e4:	200000f0 	.word	0x200000f0

080015e8 <_Z10CreateLUTsv>:

void CreateLUTs(void)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
	// Generate pitch lookup table
	for (int p = 0; p < LUTSIZE; p++){
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f8:	da24      	bge.n	8001644 <_Z10CreateLUTsv+0x5c>
		float power = (float)(p * 4.0f) / -583.8f;			// Reduce 584 to decrease spread
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001604:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001608:	ee27 7a87 	vmul.f32	s14, s15, s14
 800160c:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8001840 <_Z10CreateLUTsv+0x258>
 8001610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001614:	edc7 7a03 	vstr	s15, [r7, #12]
		PitchLUT[p] = 2299 * (float)std::pow(2.0f, power);	// Increase 2282 to increase pitch
 8001618:	edd7 0a03 	vldr	s1, [r7, #12]
 800161c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001620:	f7ff fdd8 	bl	80011d4 <_ZSt3powff>
 8001624:	eeb0 7a40 	vmov.f32	s14, s0
 8001628:	eddf 7a86 	vldr	s15, [pc, #536]	; 8001844 <_Z10CreateLUTsv+0x25c>
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	4a85      	ldr	r2, [pc, #532]	; (8001848 <_Z10CreateLUTsv+0x260>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	edc3 7a00 	vstr	s15, [r3]
	for (int p = 0; p < LUTSIZE; p++){
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	3301      	adds	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e7d6      	b.n	80015f2 <_Z10CreateLUTsv+0xa>
	}

	// Generate Sine LUT
	for (int s = 0; s < LUTSIZE; s++){
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	da32      	bge.n	80016b6 <_Z10CreateLUTsv+0xce>
		SineLUT[s] = sin(s * 2.0f * M_PI / LUTSIZE);
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800165e:	ee17 0a90 	vmov	r0, s15
 8001662:	f7fe ff15 	bl	8000490 <__aeabi_f2d>
 8001666:	a372      	add	r3, pc, #456	; (adr r3, 8001830 <_Z10CreateLUTsv+0x248>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ff64 	bl	8000538 <__aeabi_dmul>
 8001670:	4603      	mov	r3, r0
 8001672:	460c      	mov	r4, r1
 8001674:	4618      	mov	r0, r3
 8001676:	4621      	mov	r1, r4
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b73      	ldr	r3, [pc, #460]	; (800184c <_Z10CreateLUTsv+0x264>)
 800167e:	f7ff f885 	bl	800078c <__aeabi_ddiv>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	ec44 3b17 	vmov	d7, r3, r4
 800168a:	eeb0 0a47 	vmov.f32	s0, s14
 800168e:	eef0 0a67 	vmov.f32	s1, s15
 8001692:	f000 fc31 	bl	8001ef8 <sin>
 8001696:	ec54 3b10 	vmov	r3, r4, d0
 800169a:	4618      	mov	r0, r3
 800169c:	4621      	mov	r1, r4
 800169e:	f7ff fa0d 	bl	8000abc <__aeabi_d2f>
 80016a2:	4601      	mov	r1, r0
 80016a4:	4a6a      	ldr	r2, [pc, #424]	; (8001850 <_Z10CreateLUTsv+0x268>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	6019      	str	r1, [r3, #0]
	for (int s = 0; s < LUTSIZE; s++){
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	e7c8      	b.n	8001648 <_Z10CreateLUTsv+0x60>
	}

	// Generate Triangle LUT
	for (int s = 0; s < LUTSIZE; s++){
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c0:	da3a      	bge.n	8001738 <_Z10CreateLUTsv+0x150>
		float slope = 4 * (float)s / (float)LUTSIZE;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80016d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016d4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001854 <_Z10CreateLUTsv+0x26c>
 80016d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016dc:	edc7 7a02 	vstr	s15, [r7, #8]

		if 			(s <= LUTSIZE / 4)		{	TriLUT[s] = slope;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016e6:	dc06      	bgt.n	80016f6 <_Z10CreateLUTsv+0x10e>
 80016e8:	4a5b      	ldr	r2, [pc, #364]	; (8001858 <_Z10CreateLUTsv+0x270>)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e01c      	b.n	8001730 <_Z10CreateLUTsv+0x148>
		} else if 	(s <= 3 * LUTSIZE / 4)	{	TriLUT[s] = 2.0f - slope;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016fc:	dc0c      	bgt.n	8001718 <_Z10CreateLUTsv+0x130>
 80016fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001702:	edd7 7a02 	vldr	s15, [r7, #8]
 8001706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170a:	4a53      	ldr	r2, [pc, #332]	; (8001858 <_Z10CreateLUTsv+0x270>)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	edc3 7a00 	vstr	s15, [r3]
 8001716:	e00b      	b.n	8001730 <_Z10CreateLUTsv+0x148>
		} else								{	TriLUT[s] = slope - 4;
 8001718:	edd7 7a02 	vldr	s15, [r7, #8]
 800171c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001724:	4a4c      	ldr	r2, [pc, #304]	; (8001858 <_Z10CreateLUTsv+0x270>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	edc3 7a00 	vstr	s15, [r3]
	for (int s = 0; s < LUTSIZE; s++){
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3301      	adds	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e7c0      	b.n	80016ba <_Z10CreateLUTsv+0xd2>
		}
	}

	// Generate curvy triangle LUT
	for (int s = 0; s < LUTSIZE; s++){
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	da6f      	bge.n	8001824 <_Z10CreateLUTsv+0x23c>
		float slope = cos(2.0f * M_PI * (float)s / (float)LUTSIZE);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174e:	ee17 0a90 	vmov	r0, s15
 8001752:	f7fe fe9d 	bl	8000490 <__aeabi_f2d>
 8001756:	a338      	add	r3, pc, #224	; (adr r3, 8001838 <_Z10CreateLUTsv+0x250>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe feec 	bl	8000538 <__aeabi_dmul>
 8001760:	4603      	mov	r3, r0
 8001762:	460c      	mov	r4, r1
 8001764:	4618      	mov	r0, r3
 8001766:	4621      	mov	r1, r4
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <_Z10CreateLUTsv+0x264>)
 800176e:	f7ff f80d 	bl	800078c <__aeabi_ddiv>
 8001772:	4603      	mov	r3, r0
 8001774:	460c      	mov	r4, r1
 8001776:	ec44 3b17 	vmov	d7, r3, r4
 800177a:	eeb0 0a47 	vmov.f32	s0, s14
 800177e:	eef0 0a67 	vmov.f32	s1, s15
 8001782:	f000 fb75 	bl	8001e70 <cos>
 8001786:	ec54 3b10 	vmov	r3, r4, d0
 800178a:	4618      	mov	r0, r3
 800178c:	4621      	mov	r1, r4
 800178e:	f7ff f995 	bl	8000abc <__aeabi_d2f>
 8001792:	4603      	mov	r3, r0
 8001794:	607b      	str	r3, [r7, #4]

		if 			(s <= LUTSIZE / 4)		{	CTriLUT[s] = -1 * (slope - 1);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800179c:	dc0e      	bgt.n	80017bc <_Z10CreateLUTsv+0x1d4>
 800179e:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017aa:	eef1 7a67 	vneg.f32	s15, s15
 80017ae:	4a2b      	ldr	r2, [pc, #172]	; (800185c <_Z10CreateLUTsv+0x274>)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	edc3 7a00 	vstr	s15, [r3]
 80017ba:	e02f      	b.n	800181c <_Z10CreateLUTsv+0x234>
		} else if 	(s <= LUTSIZE / 2)		{	CTriLUT[s] = slope + 1;
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c2:	dc0c      	bgt.n	80017de <_Z10CreateLUTsv+0x1f6>
 80017c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017d0:	4a22      	ldr	r2, [pc, #136]	; (800185c <_Z10CreateLUTsv+0x274>)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	edc3 7a00 	vstr	s15, [r3]
 80017dc:	e01e      	b.n	800181c <_Z10CreateLUTsv+0x234>
		} else if 	(s <= 3 * LUTSIZE / 4)	{	CTriLUT[s] = -1 * (slope + 1);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017e4:	dc0e      	bgt.n	8001804 <_Z10CreateLUTsv+0x21c>
 80017e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017f2:	eef1 7a67 	vneg.f32	s15, s15
 80017f6:	4a19      	ldr	r2, [pc, #100]	; (800185c <_Z10CreateLUTsv+0x274>)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	edc3 7a00 	vstr	s15, [r3]
 8001802:	e00b      	b.n	800181c <_Z10CreateLUTsv+0x234>
		} else 								{	CTriLUT[s] = slope - 1;
 8001804:	edd7 7a01 	vldr	s15, [r7, #4]
 8001808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800180c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <_Z10CreateLUTsv+0x274>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	edc3 7a00 	vstr	s15, [r3]
	for (int s = 0; s < LUTSIZE; s++){
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	3301      	adds	r3, #1
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	e78b      	b.n	800173c <_Z10CreateLUTsv+0x154>
		}
	}
}
 8001824:	bf00      	nop
 8001826:	3724      	adds	r7, #36	; 0x24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	f3af 8000 	nop.w
 8001830:	54442d18 	.word	0x54442d18
 8001834:	400921fb 	.word	0x400921fb
 8001838:	54442d18 	.word	0x54442d18
 800183c:	401921fb 	.word	0x401921fb
 8001840:	c411f333 	.word	0xc411f333
 8001844:	450fb000 	.word	0x450fb000
 8001848:	200030f0 	.word	0x200030f0
 800184c:	40900000 	.word	0x40900000
 8001850:	200000f0 	.word	0x200000f0
 8001854:	44800000 	.word	0x44800000
 8001858:	200010f0 	.word	0x200010f0
 800185c:	200020f0 	.word	0x200020f0

08001860 <main>:


int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
	SystemInit();				// Activates floating point coprocessor and resets clock
 8001866:	f000 fa4f 	bl	8001d08 <SystemInit>
	SystemClock_Config();		// Configure the clock and PLL
 800186a:	f7ff f9bb 	bl	8000be4 <_Z18SystemClock_Configv>
	SystemCoreClockUpdate();	// Update SystemCoreClock, which is the system clock frequency supplied to the SysTick timer and the processor core clock. This variable can be used by debuggers to query the frequency of the debug timer or to configure the trace clock speed.
 800186e:	f000 fa81 	bl	8001d74 <SystemCoreClockUpdate>

	CreateLUTs();				// Create pitch and sine wave look up tables
 8001872:	f7ff feb9 	bl	80015e8 <_Z10CreateLUTsv>
	InitIO();					// PC6 Button in (Ring mod)
 8001876:	f7ff fa89 	bl	8000d8c <_Z6InitIOv>
	InitDAC();					// DAC1 Output on PA4 (A2); DAC2 Output on PA5 (D13)
 800187a:	f7ff fa3f 	bl	8000cfc <_Z7InitDACv>
	InitTimer();				// Sample output timer 3 - fires interrupt to trigger sample output from DAC
 800187e:	f7ff fb01 	bl	8000e84 <_Z9InitTimerv>
	InitADC();					// ADC for reading pitch on PB0 (A3); PD CV on PB1 (A1); DAC1 Type Pot on PA1;  DAC2 Type Pot on PA2; CV1 on PA3
 8001882:	f7ff fb3d 	bl	8000f00 <_Z7InitADCv>

	float oldOutput1 =  0;
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
	float oldOutput2 = 0;
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	613b      	str	r3, [r7, #16]

	EXTI15_10_IRQHandler();		// Call the Interrupt event handler to set up the octave up/down switch to current position
 8001892:	f7ff fcef 	bl	8001274 <EXTI15_10_IRQHandler>


	while (1)
	{
		// Get Pitch from ADC and smooth
		Pitch = (0.5f * Pitch) + (0.5f * ADC_PITCH);
 8001896:	4bbe      	ldr	r3, [pc, #760]	; (8001b90 <main+0x330>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018ac:	4bb9      	ldr	r3, [pc, #740]	; (8001b94 <main+0x334>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ba:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80018be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80018ce:	88bb      	ldrh	r3, [r7, #4]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4baf      	ldr	r3, [pc, #700]	; (8001b90 <main+0x330>)
 80018d4:	801a      	strh	r2, [r3, #0]

		// Analog selection of PD LUT table allows a smooth transition between LUTs for DAC1 and a stepped transition for DAC2
		SelPDLut1 = (float)ADC_OSC1TYPE * (NoOfLUTs - 1) / 4096;
 80018d6:	4bb0      	ldr	r3, [pc, #704]	; (8001b98 <main+0x338>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018e4:	4bad      	ldr	r3, [pc, #692]	; (8001b9c <main+0x33c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f6:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8001ba0 <main+0x340>
 80018fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fe:	4ba9      	ldr	r3, [pc, #676]	; (8001ba4 <main+0x344>)
 8001900:	edc3 7a00 	vstr	s15, [r3]
		PDLut2 = ADC_OSC2TYPE * NoOfLUTs / 4096;
 8001904:	4ba8      	ldr	r3, [pc, #672]	; (8001ba8 <main+0x348>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	4ba3      	ldr	r3, [pc, #652]	; (8001b9c <main+0x33c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	fb03 f302 	mul.w	r3, r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	da01      	bge.n	800191c <main+0xbc>
 8001918:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800191c:	131b      	asrs	r3, r3, #12
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4ba2      	ldr	r3, [pc, #648]	; (8001bac <main+0x34c>)
 8001922:	701a      	strb	r2, [r3, #0]

		// Ready for next sample
		if (DacRead)
 8001924:	4ba2      	ldr	r3, [pc, #648]	; (8001bb0 <main+0x350>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 8194 	beq.w	8001c56 <main+0x3f6>
		{
			// Get modulation from ADC; Currently seeing 0v as ~3000 and 5V as ~960
			PD1Scale = (float)(3800 - ADC_PD1AMT) / 800;		// Convert PD amount for OSC1
 800192e:	4ba1      	ldr	r3, [pc, #644]	; (8001bb4 <main+0x354>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8001938:	3308      	adds	r3, #8
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001942:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8001bb8 <main+0x358>
 8001946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194a:	4b9c      	ldr	r3, [pc, #624]	; (8001bbc <main+0x35c>)
 800194c:	edc3 7a00 	vstr	s15, [r3]
			PD2Scale = (float)(4096 - ADC_PD2AMT) / 800;		// Convert PD amount for OSC2
 8001950:	4b9b      	ldr	r3, [pc, #620]	; (8001bc0 <main+0x360>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001962:	eddf 6a95 	vldr	s13, [pc, #596]	; 8001bb8 <main+0x358>
 8001966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196a:	4b96      	ldr	r3, [pc, #600]	; (8001bc4 <main+0x364>)
 800196c:	edc3 7a00 	vstr	s15, [r3]
			if (ADC_VCA > 4070)	VCALevel = 0;									//	 Filter out very low level VCA signals
 8001970:	4b95      	ldr	r3, [pc, #596]	; (8001bc8 <main+0x368>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	f640 73e6 	movw	r3, #4070	; 0xfe6
 800197c:	429a      	cmp	r2, r3
 800197e:	bfcc      	ite	gt
 8001980:	2301      	movgt	r3, #1
 8001982:	2300      	movle	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <main+0x134>
 800198a:	4b90      	ldr	r3, [pc, #576]	; (8001bcc <main+0x36c>)
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e011      	b.n	80019b8 <main+0x158>
			else				VCALevel = (4096.0f - ADC_VCA) / 4096;			// Convert ADC for VCA to float between 0 and 1
 8001994:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <main+0x368>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a2:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001ba0 <main+0x340>
 80019a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019aa:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8001ba0 <main+0x340>
 80019ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b2:	4b86      	ldr	r3, [pc, #536]	; (8001bcc <main+0x36c>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]

			// Calculate output as a float from -1 to +1 checking phase distortion and phase offset as required
			float SampleOut1 = GetBlendPhaseDist(SelPDLut1, SamplePos1 / SAMPLERATE, PD1Scale, 0);
 80019b8:	4b7a      	ldr	r3, [pc, #488]	; (8001ba4 <main+0x344>)
 80019ba:	edd3 6a00 	vldr	s13, [r3]
 80019be:	4b84      	ldr	r3, [pc, #528]	; (8001bd0 <main+0x370>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001bd4 <main+0x374>
 80019c8:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80019cc:	4b7b      	ldr	r3, [pc, #492]	; (8001bbc <main+0x35c>)
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	eddf 1a81 	vldr	s3, [pc, #516]	; 8001bd8 <main+0x378>
 80019d6:	eeb0 1a67 	vmov.f32	s2, s15
 80019da:	eef0 0a46 	vmov.f32	s1, s12
 80019de:	eeb0 0a66 	vmov.f32	s0, s13
 80019e2:	f7ff fd2b 	bl	800143c <_Z17GetBlendPhaseDistffff>
 80019e6:	ed87 0a03 	vstr	s0, [r7, #12]
			float SampleOut2 = GetPhaseDist(LUTArray[PDLut2], SamplePos2 / SAMPLERATE, PD2Scale, 0);
 80019ea:	4b70      	ldr	r3, [pc, #448]	; (8001bac <main+0x34c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b7a      	ldr	r3, [pc, #488]	; (8001bdc <main+0x37c>)
 80019f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019f8:	4b79      	ldr	r3, [pc, #484]	; (8001be0 <main+0x380>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001bd4 <main+0x374>
 8001a02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a06:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <main+0x364>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8001bd8 <main+0x378>
 8001a10:	eef0 0a67 	vmov.f32	s1, s15
 8001a14:	eeb0 0a66 	vmov.f32	s0, s13
 8001a18:	4610      	mov	r0, r2
 8001a1a:	f7ff fca3 	bl	8001364 <_Z12GetPhaseDistPKffff>
 8001a1e:	ed87 0a02 	vstr	s0, [r7, #8]

			// Set DAC output values for when sample interrupt next fires
			if (RingModOn) {
 8001a22:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <main+0x384>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d019      	beq.n	8001a5e <main+0x1fe>
				DAC->DHR12R1 = (int)((1 + (SampleOut1 * SampleOut2) * VCALevel) * 2047);		// Ring mod of 1 * 2
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <main+0x388>)
 8001a2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a38:	4a64      	ldr	r2, [pc, #400]	; (8001bcc <main+0x36c>)
 8001a3a:	edd2 7a00 	vldr	s15, [r2]
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a4a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001bec <main+0x38c>
 8001a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a56:	ee17 2a90 	vmov	r2, s15
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	e014      	b.n	8001a88 <main+0x228>
				//DAC->DHR12R1 = (int)(((2 + SampleOut1 + SampleOut2) / 2) * 2047);		// Mix of 1 + 2
			} else {
				DAC->DHR12R1 = (int)((1 + SampleOut1 * VCALevel) * 2047);		// load the next sample into the DAC 1 buffer
 8001a5e:	4b62      	ldr	r3, [pc, #392]	; (8001be8 <main+0x388>)
 8001a60:	4a5a      	ldr	r2, [pc, #360]	; (8001bcc <main+0x36c>)
 8001a62:	ed92 7a00 	vldr	s14, [r2]
 8001a66:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a76:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001bec <main+0x38c>
 8001a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a82:	ee17 2a90 	vmov	r2, s15
 8001a86:	609a      	str	r2, [r3, #8]
			}
			DAC->DHR12R2 = (int)((1 + SampleOut2 * VCALevel) * 2047);			// load the next sample into the DAC 2 buffer
 8001a88:	4b57      	ldr	r3, [pc, #348]	; (8001be8 <main+0x388>)
 8001a8a:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <main+0x36c>)
 8001a8c:	ed92 7a00 	vldr	s14, [r2]
 8001a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aa0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001bec <main+0x38c>
 8001aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aac:	ee17 2a90 	vmov	r2, s15
 8001ab0:	615a      	str	r2, [r3, #20]

			DacRead = 0;
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <main+0x350>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]

			oldOutput1 = SampleOut1;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	617b      	str	r3, [r7, #20]
			oldOutput2 = SampleOut2;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	613b      	str	r3, [r7, #16]

			// adjust frequency according to fine tune knob
			FineTune = (2048 - ADC_FTUNE) / 30;
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <main+0x390>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001aca:	4a4a      	ldr	r2, [pc, #296]	; (8001bf4 <main+0x394>)
 8001acc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad0:	441a      	add	r2, r3
 8001ad2:	1112      	asrs	r2, r2, #4
 8001ad4:	17db      	asrs	r3, r3, #31
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <main+0x398>)
 8001adc:	801a      	strh	r2, [r3, #0]
			freq1 = PitchLUT[(Pitch + FineTune) / 4];		// divide by four as there are 1024 items in DAC CV Voltage to Pitch Freq LUT and 4096 possible DAC voltage values
 8001ade:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <main+0x330>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <main+0x398>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da00      	bge.n	8001af4 <main+0x294>
 8001af2:	3303      	adds	r3, #3
 8001af4:	109b      	asrs	r3, r3, #2
 8001af6:	4a41      	ldr	r2, [pc, #260]	; (8001bfc <main+0x39c>)
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a40      	ldr	r2, [pc, #256]	; (8001c00 <main+0x3a0>)
 8001b00:	6013      	str	r3, [r2, #0]


			// octave down
			switch(RelPitch) {
 8001b02:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <main+0x3a4>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d008      	beq.n	8001b1c <main+0x2bc>
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d011      	beq.n	8001b32 <main+0x2d2>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d118      	bne.n	8001b44 <main+0x2e4>
				case NONE: 			freq2 = freq1; 		break;
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <main+0x3a0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a3c      	ldr	r2, [pc, #240]	; (8001c08 <main+0x3a8>)
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e013      	b.n	8001b44 <main+0x2e4>
				case OCTAVEDOWN:	freq2 = freq1 / 2;	break;
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <main+0x3a0>)
 8001b1e:	ed93 7a00 	vldr	s14, [r3]
 8001b22:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <main+0x3a8>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
 8001b30:	e008      	b.n	8001b44 <main+0x2e4>
				case OCTAVEUP: 		freq2 = freq1 * 2;	break;
 8001b32:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <main+0x3a0>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b3c:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <main+0x3a8>)
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
 8001b42:	bf00      	nop
			}

			// jump forward to the next sample position
			SamplePos1 += freq1;
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <main+0x3a0>)
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <main+0x370>)
 8001b4c:	ed93 7a00 	vldr	s14, [r3]
 8001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <main+0x370>)
 8001b56:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos1 >= SAMPLERATE)
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <main+0x370>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001bd4 <main+0x374>
 8001b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6c:	bfac      	ite	ge
 8001b6e:	2301      	movge	r3, #1
 8001b70:	2300      	movlt	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d049      	beq.n	8001c0c <main+0x3ac>
				SamplePos1-= SAMPLERATE;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <main+0x370>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001bd4 <main+0x374>
 8001b82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <main+0x370>)
 8001b88:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos1 >= SAMPLERATE)
 8001b8c:	e7e5      	b.n	8001b5a <main+0x2fa>
 8001b8e:	bf00      	nop
 8001b90:	200000ca 	.word	0x200000ca
 8001b94:	200000b8 	.word	0x200000b8
 8001b98:	200000bc 	.word	0x200000bc
 8001b9c:	2000001c 	.word	0x2000001c
 8001ba0:	45800000 	.word	0x45800000
 8001ba4:	200000e4 	.word	0x200000e4
 8001ba8:	200000be 	.word	0x200000be
 8001bac:	200000e8 	.word	0x200000e8
 8001bb0:	200000c7 	.word	0x200000c7
 8001bb4:	200000c4 	.word	0x200000c4
 8001bb8:	44480000 	.word	0x44480000
 8001bbc:	200000d8 	.word	0x200000d8
 8001bc0:	200000c0 	.word	0x200000c0
 8001bc4:	200000dc 	.word	0x200000dc
 8001bc8:	200000c2 	.word	0x200000c2
 8001bcc:	200000ec 	.word	0x200000ec
 8001bd0:	200000d0 	.word	0x200000d0
 8001bd4:	478ca000 	.word	0x478ca000
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	200000d4 	.word	0x200000d4
 8001be4:	200000c8 	.word	0x200000c8
 8001be8:	40007400 	.word	0x40007400
 8001bec:	44ffe000 	.word	0x44ffe000
 8001bf0:	200000ba 	.word	0x200000ba
 8001bf4:	88888889 	.word	0x88888889
 8001bf8:	200040f0 	.word	0x200040f0
 8001bfc:	200030f0 	.word	0x200030f0
 8001c00:	20000000 	.word	0x20000000
 8001c04:	200000c6 	.word	0x200000c6
 8001c08:	20000004 	.word	0x20000004

			SamplePos2 += freq2;
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <main+0x43c>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <main+0x440>)
 8001c14:	ed93 7a00 	vldr	s14, [r3]
 8001c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <main+0x440>)
 8001c1e:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos2 >= SAMPLERATE)
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <main+0x440>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001ca4 <main+0x444>
 8001c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	bfac      	ite	ge
 8001c36:	2301      	movge	r3, #1
 8001c38:	2300      	movlt	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00a      	beq.n	8001c56 <main+0x3f6>
				SamplePos2-= SAMPLERATE;
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <main+0x440>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001ca4 <main+0x444>
 8001c4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <main+0x440>)
 8001c50:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos2 >= SAMPLERATE)
 8001c54:	e7e5      	b.n	8001c22 <main+0x3c2>
		}

		// Toggle Ring mod when button pressed
		if (!READ_BIT(GPIOC->IDR, GPIO_IDR_IDR_6)) {
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <main+0x448>)
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d012      	beq.n	8001c92 <main+0x432>
			if (!ButtonDown) {
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <main+0x44c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f43f ae0d 	beq.w	8001896 <main+0x36>
				RingModOn = !RingModOn;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <main+0x450>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	f083 0301 	eor.w	r3, r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <main+0x450>)
 8001c88:	701a      	strb	r2, [r3, #0]
				ButtonDown = true;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <main+0x44c>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	e601      	b.n	8001896 <main+0x36>
			}
		} else {
			ButtonDown = false;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <main+0x44c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
		}



	}
 8001c98:	e5fd      	b.n	8001896 <main+0x36>
 8001c9a:	bf00      	nop
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	200000d4 	.word	0x200000d4
 8001ca4:	478ca000 	.word	0x478ca000
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	200000c9 	.word	0x200000c9
 8001cb0:	200000c8 	.word	0x200000c8

08001cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cba:	e003      	b.n	8001cc4 <LoopCopyDataInit>

08001cbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cc2:	3104      	adds	r1, #4

08001cc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cc4:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ccc:	d3f6      	bcc.n	8001cbc <CopyDataInit>
  ldr  r2, =_sbss
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cd0:	e002      	b.n	8001cd8 <LoopFillZerobss>

08001cd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cd4:	f842 3b04 	str.w	r3, [r2], #4

08001cd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cdc:	d3f9      	bcc.n	8001cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cde:	f000 f813 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f001 fee7 	bl	8003ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce6:	f7ff fdbb 	bl	8001860 <main>
  bx  lr    
 8001cea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cf0:	08008d28 	.word	0x08008d28
  ldr  r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cf8:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8001cfc:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8001d00:	200040f4 	.word	0x200040f4

08001d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC_IRQHandler>
	...

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <SystemInit+0x60>)
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <SystemInit+0x60>)
 8001d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d1c:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <SystemInit+0x64>)
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <SystemInit+0x64>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <SystemInit+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d2e:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <SystemInit+0x64>)
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <SystemInit+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <SystemInit+0x64>)
 8001d40:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <SystemInit+0x68>)
 8001d42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d44:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <SystemInit+0x64>)
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <SystemInit+0x64>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <SystemInit+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <SystemInit+0x60>)
 8001d58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d5c:	609a      	str	r2, [r3, #8]
#endif
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	24003010 	.word	0x24003010

08001d74 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	2302      	movs	r3, #2
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <SystemCoreClockUpdate+0xe4>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d007      	beq.n	8001dae <SystemCoreClockUpdate+0x3a>
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d009      	beq.n	8001db6 <SystemCoreClockUpdate+0x42>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d13d      	bne.n	8001e22 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <SystemCoreClockUpdate+0xe8>)
 8001da8:	4a2d      	ldr	r2, [pc, #180]	; (8001e60 <SystemCoreClockUpdate+0xec>)
 8001daa:	601a      	str	r2, [r3, #0]
      break;
 8001dac:	e03d      	b.n	8001e2a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001dae:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <SystemCoreClockUpdate+0xe8>)
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <SystemCoreClockUpdate+0xf0>)
 8001db2:	601a      	str	r2, [r3, #0]
      break;
 8001db4:	e039      	b.n	8001e2a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <SystemCoreClockUpdate+0xe4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	0d9b      	lsrs	r3, r3, #22
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <SystemCoreClockUpdate+0xe4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dca:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001dd2:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <SystemCoreClockUpdate+0xf0>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <SystemCoreClockUpdate+0xe4>)
 8001ddc:	6852      	ldr	r2, [r2, #4]
 8001dde:	0992      	lsrs	r2, r2, #6
 8001de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e00b      	b.n	8001e04 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <SystemCoreClockUpdate+0xec>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <SystemCoreClockUpdate+0xe4>)
 8001df6:	6852      	ldr	r2, [r2, #4]
 8001df8:	0992      	lsrs	r2, r2, #6
 8001dfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <SystemCoreClockUpdate+0xe4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <SystemCoreClockUpdate+0xe8>)
 8001e1e:	6013      	str	r3, [r2, #0]
      break;
 8001e20:	e003      	b.n	8001e2a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <SystemCoreClockUpdate+0xe8>)
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <SystemCoreClockUpdate+0xec>)
 8001e26:	601a      	str	r2, [r3, #0]
      break;
 8001e28:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <SystemCoreClockUpdate+0xe4>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <SystemCoreClockUpdate+0xf4>)
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <SystemCoreClockUpdate+0xe8>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	fa22 f303 	lsr.w	r3, r2, r3
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <SystemCoreClockUpdate+0xe8>)
 8001e48:	6013      	str	r3, [r2, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	20000020 	.word	0x20000020
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	007a1200 	.word	0x007a1200
 8001e68:	20000024 	.word	0x20000024
 8001e6c:	00000000 	.word	0x00000000

08001e70 <cos>:
 8001e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e72:	ec51 0b10 	vmov	r0, r1, d0
 8001e76:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <cos+0x80>)
 8001e78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	dc06      	bgt.n	8001e8e <cos+0x1e>
 8001e80:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001ee8 <cos+0x78>
 8001e84:	f000 fef8 	bl	8002c78 <__kernel_cos>
 8001e88:	ec51 0b10 	vmov	r0, r1, d0
 8001e8c:	e007      	b.n	8001e9e <cos+0x2e>
 8001e8e:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <cos+0x84>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	dd09      	ble.n	8001ea8 <cos+0x38>
 8001e94:	ee10 2a10 	vmov	r2, s0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	f7fe f999 	bl	80001d0 <__aeabi_dsub>
 8001e9e:	ec41 0b10 	vmov	d0, r0, r1
 8001ea2:	b005      	add	sp, #20
 8001ea4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ea8:	4668      	mov	r0, sp
 8001eaa:	f000 f9e9 	bl	8002280 <__ieee754_rem_pio2>
 8001eae:	f000 0003 	and.w	r0, r0, #3
 8001eb2:	2801      	cmp	r0, #1
 8001eb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001eb8:	ed9d 0b00 	vldr	d0, [sp]
 8001ebc:	d007      	beq.n	8001ece <cos+0x5e>
 8001ebe:	2802      	cmp	r0, #2
 8001ec0:	d00e      	beq.n	8001ee0 <cos+0x70>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d0de      	beq.n	8001e84 <cos+0x14>
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f001 fb0e 	bl	80034e8 <__kernel_sin>
 8001ecc:	e7dc      	b.n	8001e88 <cos+0x18>
 8001ece:	f001 fb0b 	bl	80034e8 <__kernel_sin>
 8001ed2:	ec53 2b10 	vmov	r2, r3, d0
 8001ed6:	ee10 0a10 	vmov	r0, s0
 8001eda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8001ede:	e7de      	b.n	8001e9e <cos+0x2e>
 8001ee0:	f000 feca 	bl	8002c78 <__kernel_cos>
 8001ee4:	e7f5      	b.n	8001ed2 <cos+0x62>
 8001ee6:	bf00      	nop
	...
 8001ef0:	3fe921fb 	.word	0x3fe921fb
 8001ef4:	7fefffff 	.word	0x7fefffff

08001ef8 <sin>:
 8001ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001efa:	ec51 0b10 	vmov	r0, r1, d0
 8001efe:	4a20      	ldr	r2, [pc, #128]	; (8001f80 <sin+0x88>)
 8001f00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001f04:	4293      	cmp	r3, r2
 8001f06:	dc07      	bgt.n	8001f18 <sin+0x20>
 8001f08:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8001f78 <sin+0x80>
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f001 faeb 	bl	80034e8 <__kernel_sin>
 8001f12:	ec51 0b10 	vmov	r0, r1, d0
 8001f16:	e007      	b.n	8001f28 <sin+0x30>
 8001f18:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <sin+0x8c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	dd09      	ble.n	8001f32 <sin+0x3a>
 8001f1e:	ee10 2a10 	vmov	r2, s0
 8001f22:	460b      	mov	r3, r1
 8001f24:	f7fe f954 	bl	80001d0 <__aeabi_dsub>
 8001f28:	ec41 0b10 	vmov	d0, r0, r1
 8001f2c:	b005      	add	sp, #20
 8001f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f32:	4668      	mov	r0, sp
 8001f34:	f000 f9a4 	bl	8002280 <__ieee754_rem_pio2>
 8001f38:	f000 0003 	and.w	r0, r0, #3
 8001f3c:	2801      	cmp	r0, #1
 8001f3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001f42:	ed9d 0b00 	vldr	d0, [sp]
 8001f46:	d004      	beq.n	8001f52 <sin+0x5a>
 8001f48:	2802      	cmp	r0, #2
 8001f4a:	d005      	beq.n	8001f58 <sin+0x60>
 8001f4c:	b970      	cbnz	r0, 8001f6c <sin+0x74>
 8001f4e:	2001      	movs	r0, #1
 8001f50:	e7dd      	b.n	8001f0e <sin+0x16>
 8001f52:	f000 fe91 	bl	8002c78 <__kernel_cos>
 8001f56:	e7dc      	b.n	8001f12 <sin+0x1a>
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f001 fac5 	bl	80034e8 <__kernel_sin>
 8001f5e:	ec53 2b10 	vmov	r2, r3, d0
 8001f62:	ee10 0a10 	vmov	r0, s0
 8001f66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8001f6a:	e7dd      	b.n	8001f28 <sin+0x30>
 8001f6c:	f000 fe84 	bl	8002c78 <__kernel_cos>
 8001f70:	e7f5      	b.n	8001f5e <sin+0x66>
 8001f72:	bf00      	nop
 8001f74:	f3af 8000 	nop.w
	...
 8001f80:	3fe921fb 	.word	0x3fe921fb
 8001f84:	7fefffff 	.word	0x7fefffff

08001f88 <powf>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	ed2d 8b04 	vpush	{d8-d9}
 8001f8e:	4cb5      	ldr	r4, [pc, #724]	; (8002264 <powf+0x2dc>)
 8001f90:	b08a      	sub	sp, #40	; 0x28
 8001f92:	eef0 8a40 	vmov.f32	s17, s0
 8001f96:	eeb0 8a60 	vmov.f32	s16, s1
 8001f9a:	f000 fb63 	bl	8002664 <__ieee754_powf>
 8001f9e:	f994 5000 	ldrsb.w	r5, [r4]
 8001fa2:	1c6b      	adds	r3, r5, #1
 8001fa4:	eeb0 9a40 	vmov.f32	s18, s0
 8001fa8:	4626      	mov	r6, r4
 8001faa:	d05d      	beq.n	8002068 <powf+0xe0>
 8001fac:	eeb4 8a48 	vcmp.f32	s16, s16
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	d658      	bvs.n	8002068 <powf+0xe0>
 8001fb6:	eef4 8a68 	vcmp.f32	s17, s17
 8001fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbe:	d721      	bvc.n	8002004 <powf+0x7c>
 8001fc0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	d14e      	bne.n	8002068 <powf+0xe0>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	4ba6      	ldr	r3, [pc, #664]	; (8002268 <powf+0x2e0>)
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	ee18 0a90 	vmov	r0, s17
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9308      	str	r3, [sp, #32]
 8001fda:	f7fe fa59 	bl	8000490 <__aeabi_f2d>
 8001fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001fe2:	ee18 0a10 	vmov	r0, s16
 8001fe6:	f7fe fa53 	bl	8000490 <__aeabi_f2d>
 8001fea:	4ba0      	ldr	r3, [pc, #640]	; (800226c <powf+0x2e4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	2d02      	cmp	r5, #2
 8001ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001ff4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001ff8:	d030      	beq.n	800205c <powf+0xd4>
 8001ffa:	4668      	mov	r0, sp
 8001ffc:	f001 fbbc 	bl	8003778 <matherr>
 8002000:	bb30      	cbnz	r0, 8002050 <powf+0xc8>
 8002002:	e062      	b.n	80020ca <powf+0x142>
 8002004:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200c:	d162      	bne.n	80020d4 <powf+0x14c>
 800200e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	d12d      	bne.n	8002074 <powf+0xec>
 8002018:	2301      	movs	r3, #1
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4b92      	ldr	r3, [pc, #584]	; (8002268 <powf+0x2e0>)
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	ee18 0a90 	vmov	r0, s17
 8002024:	2300      	movs	r3, #0
 8002026:	9308      	str	r3, [sp, #32]
 8002028:	f7fe fa32 	bl	8000490 <__aeabi_f2d>
 800202c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002030:	ee18 0a10 	vmov	r0, s16
 8002034:	f7fe fa2c 	bl	8000490 <__aeabi_f2d>
 8002038:	2200      	movs	r2, #0
 800203a:	2300      	movs	r3, #0
 800203c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002040:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002044:	2d00      	cmp	r5, #0
 8002046:	d0d8      	beq.n	8001ffa <powf+0x72>
 8002048:	4b88      	ldr	r3, [pc, #544]	; (800226c <powf+0x2e4>)
 800204a:	2200      	movs	r2, #0
 800204c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002050:	9b08      	ldr	r3, [sp, #32]
 8002052:	b11b      	cbz	r3, 800205c <powf+0xd4>
 8002054:	f001 fd28 	bl	8003aa8 <__errno>
 8002058:	9b08      	ldr	r3, [sp, #32]
 800205a:	6003      	str	r3, [r0, #0]
 800205c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002060:	f7fe fd2c 	bl	8000abc <__aeabi_d2f>
 8002064:	ee09 0a10 	vmov	s18, r0
 8002068:	eeb0 0a49 	vmov.f32	s0, s18
 800206c:	b00a      	add	sp, #40	; 0x28
 800206e:	ecbd 8b04 	vpop	{d8-d9}
 8002072:	bd70      	pop	{r4, r5, r6, pc}
 8002074:	eeb0 0a48 	vmov.f32	s0, s16
 8002078:	f001 fc8b 	bl	8003992 <finitef>
 800207c:	2800      	cmp	r0, #0
 800207e:	d0f3      	beq.n	8002068 <powf+0xe0>
 8002080:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002088:	d5ee      	bpl.n	8002068 <powf+0xe0>
 800208a:	2301      	movs	r3, #1
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <powf+0x2e0>)
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	ee18 0a90 	vmov	r0, s17
 8002096:	2300      	movs	r3, #0
 8002098:	9308      	str	r3, [sp, #32]
 800209a:	f7fe f9f9 	bl	8000490 <__aeabi_f2d>
 800209e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020a2:	ee18 0a10 	vmov	r0, s16
 80020a6:	f7fe f9f3 	bl	8000490 <__aeabi_f2d>
 80020aa:	f994 3000 	ldrsb.w	r3, [r4]
 80020ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80020b2:	b923      	cbnz	r3, 80020be <powf+0x136>
 80020b4:	2200      	movs	r2, #0
 80020b6:	2300      	movs	r3, #0
 80020b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80020bc:	e79d      	b.n	8001ffa <powf+0x72>
 80020be:	496c      	ldr	r1, [pc, #432]	; (8002270 <powf+0x2e8>)
 80020c0:	2000      	movs	r0, #0
 80020c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d197      	bne.n	8001ffa <powf+0x72>
 80020ca:	f001 fced 	bl	8003aa8 <__errno>
 80020ce:	2321      	movs	r3, #33	; 0x21
 80020d0:	6003      	str	r3, [r0, #0]
 80020d2:	e7bd      	b.n	8002050 <powf+0xc8>
 80020d4:	f001 fc5d 	bl	8003992 <finitef>
 80020d8:	4605      	mov	r5, r0
 80020da:	2800      	cmp	r0, #0
 80020dc:	f040 8091 	bne.w	8002202 <powf+0x27a>
 80020e0:	eeb0 0a68 	vmov.f32	s0, s17
 80020e4:	f001 fc55 	bl	8003992 <finitef>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	f000 808a 	beq.w	8002202 <powf+0x27a>
 80020ee:	eeb0 0a48 	vmov.f32	s0, s16
 80020f2:	f001 fc4e 	bl	8003992 <finitef>
 80020f6:	2800      	cmp	r0, #0
 80020f8:	f000 8083 	beq.w	8002202 <powf+0x27a>
 80020fc:	eeb4 9a49 	vcmp.f32	s18, s18
 8002100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002104:	f994 4000 	ldrsb.w	r4, [r4]
 8002108:	4b57      	ldr	r3, [pc, #348]	; (8002268 <powf+0x2e0>)
 800210a:	d71b      	bvc.n	8002144 <powf+0x1bc>
 800210c:	2201      	movs	r2, #1
 800210e:	ee18 0a90 	vmov	r0, s17
 8002112:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002116:	9508      	str	r5, [sp, #32]
 8002118:	f7fe f9ba 	bl	8000490 <__aeabi_f2d>
 800211c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002120:	ee18 0a10 	vmov	r0, s16
 8002124:	f7fe f9b4 	bl	8000490 <__aeabi_f2d>
 8002128:	2200      	movs	r2, #0
 800212a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800212e:	2300      	movs	r3, #0
 8002130:	2c00      	cmp	r4, #0
 8002132:	d0c1      	beq.n	80020b8 <powf+0x130>
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fb28 	bl	800078c <__aeabi_ddiv>
 800213c:	2c02      	cmp	r4, #2
 800213e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002142:	e7c1      	b.n	80020c8 <powf+0x140>
 8002144:	2203      	movs	r2, #3
 8002146:	ee18 0a90 	vmov	r0, s17
 800214a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800214e:	9508      	str	r5, [sp, #32]
 8002150:	f7fe f99e 	bl	8000490 <__aeabi_f2d>
 8002154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002158:	ee18 0a10 	vmov	r0, s16
 800215c:	f7fe f998 	bl	8000490 <__aeabi_f2d>
 8002160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002164:	bb5c      	cbnz	r4, 80021be <powf+0x236>
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <powf+0x2ec>)
 8002168:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800216c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002178:	d56c      	bpl.n	8002254 <powf+0x2cc>
 800217a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800217e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002182:	ee17 0a90 	vmov	r0, s15
 8002186:	f7fe f983 	bl	8000490 <__aeabi_f2d>
 800218a:	4604      	mov	r4, r0
 800218c:	460d      	mov	r5, r1
 800218e:	ec45 4b10 	vmov	d0, r4, r5
 8002192:	f001 faf3 	bl	800377c <rint>
 8002196:	4620      	mov	r0, r4
 8002198:	ec53 2b10 	vmov	r2, r3, d0
 800219c:	4629      	mov	r1, r5
 800219e:	f7fe fc33 	bl	8000a08 <__aeabi_dcmpeq>
 80021a2:	b920      	cbnz	r0, 80021ae <powf+0x226>
 80021a4:	4b34      	ldr	r3, [pc, #208]	; (8002278 <powf+0x2f0>)
 80021a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80021aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80021ae:	f996 3000 	ldrsb.w	r3, [r6]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d14e      	bne.n	8002254 <powf+0x2cc>
 80021b6:	f001 fc77 	bl	8003aa8 <__errno>
 80021ba:	2322      	movs	r3, #34	; 0x22
 80021bc:	e788      	b.n	80020d0 <powf+0x148>
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <powf+0x2f4>)
 80021c0:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80021c4:	2200      	movs	r2, #0
 80021c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80021ce:	d5ee      	bpl.n	80021ae <powf+0x226>
 80021d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80021d4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80021d8:	ee17 0a90 	vmov	r0, s15
 80021dc:	f7fe f958 	bl	8000490 <__aeabi_f2d>
 80021e0:	4604      	mov	r4, r0
 80021e2:	460d      	mov	r5, r1
 80021e4:	ec45 4b10 	vmov	d0, r4, r5
 80021e8:	f001 fac8 	bl	800377c <rint>
 80021ec:	4620      	mov	r0, r4
 80021ee:	ec53 2b10 	vmov	r2, r3, d0
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fe fc08 	bl	8000a08 <__aeabi_dcmpeq>
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d1d8      	bne.n	80021ae <powf+0x226>
 80021fc:	2200      	movs	r2, #0
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <powf+0x2e8>)
 8002200:	e7d3      	b.n	80021aa <powf+0x222>
 8002202:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	f47f af2d 	bne.w	8002068 <powf+0xe0>
 800220e:	eeb0 0a68 	vmov.f32	s0, s17
 8002212:	f001 fbbe 	bl	8003992 <finitef>
 8002216:	2800      	cmp	r0, #0
 8002218:	f43f af26 	beq.w	8002068 <powf+0xe0>
 800221c:	eeb0 0a48 	vmov.f32	s0, s16
 8002220:	f001 fbb7 	bl	8003992 <finitef>
 8002224:	2800      	cmp	r0, #0
 8002226:	f43f af1f 	beq.w	8002068 <powf+0xe0>
 800222a:	2304      	movs	r3, #4
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <powf+0x2e0>)
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	ee18 0a90 	vmov	r0, s17
 8002236:	2300      	movs	r3, #0
 8002238:	9308      	str	r3, [sp, #32]
 800223a:	f7fe f929 	bl	8000490 <__aeabi_f2d>
 800223e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002242:	ee18 0a10 	vmov	r0, s16
 8002246:	f7fe f923 	bl	8000490 <__aeabi_f2d>
 800224a:	2200      	movs	r2, #0
 800224c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002250:	2300      	movs	r3, #0
 8002252:	e7aa      	b.n	80021aa <powf+0x222>
 8002254:	4668      	mov	r0, sp
 8002256:	f001 fa8f 	bl	8003778 <matherr>
 800225a:	2800      	cmp	r0, #0
 800225c:	f47f aef8 	bne.w	8002050 <powf+0xc8>
 8002260:	e7a9      	b.n	80021b6 <powf+0x22e>
 8002262:	bf00      	nop
 8002264:	20000034 	.word	0x20000034
 8002268:	08008b18 	.word	0x08008b18
 800226c:	3ff00000 	.word	0x3ff00000
 8002270:	fff00000 	.word	0xfff00000
 8002274:	47efffff 	.word	0x47efffff
 8002278:	c7efffff 	.word	0xc7efffff
 800227c:	7ff00000 	.word	0x7ff00000

08002280 <__ieee754_rem_pio2>:
 8002280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002284:	ec57 6b10 	vmov	r6, r7, d0
 8002288:	4bc3      	ldr	r3, [pc, #780]	; (8002598 <__ieee754_rem_pio2+0x318>)
 800228a:	b08d      	sub	sp, #52	; 0x34
 800228c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8002290:	4598      	cmp	r8, r3
 8002292:	4604      	mov	r4, r0
 8002294:	9704      	str	r7, [sp, #16]
 8002296:	dc07      	bgt.n	80022a8 <__ieee754_rem_pio2+0x28>
 8002298:	2200      	movs	r2, #0
 800229a:	2300      	movs	r3, #0
 800229c:	ed84 0b00 	vstr	d0, [r4]
 80022a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80022a4:	2500      	movs	r5, #0
 80022a6:	e027      	b.n	80022f8 <__ieee754_rem_pio2+0x78>
 80022a8:	4bbc      	ldr	r3, [pc, #752]	; (800259c <__ieee754_rem_pio2+0x31c>)
 80022aa:	4598      	cmp	r8, r3
 80022ac:	dc75      	bgt.n	800239a <__ieee754_rem_pio2+0x11a>
 80022ae:	9b04      	ldr	r3, [sp, #16]
 80022b0:	4dbb      	ldr	r5, [pc, #748]	; (80025a0 <__ieee754_rem_pio2+0x320>)
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	ee10 0a10 	vmov	r0, s0
 80022b8:	a3a9      	add	r3, pc, #676	; (adr r3, 8002560 <__ieee754_rem_pio2+0x2e0>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	4639      	mov	r1, r7
 80022c0:	dd36      	ble.n	8002330 <__ieee754_rem_pio2+0xb0>
 80022c2:	f7fd ff85 	bl	80001d0 <__aeabi_dsub>
 80022c6:	45a8      	cmp	r8, r5
 80022c8:	4606      	mov	r6, r0
 80022ca:	460f      	mov	r7, r1
 80022cc:	d018      	beq.n	8002300 <__ieee754_rem_pio2+0x80>
 80022ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8002568 <__ieee754_rem_pio2+0x2e8>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f7fd ff7c 	bl	80001d0 <__aeabi_dsub>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	e9c4 2300 	strd	r2, r3, [r4]
 80022e0:	4630      	mov	r0, r6
 80022e2:	4639      	mov	r1, r7
 80022e4:	f7fd ff74 	bl	80001d0 <__aeabi_dsub>
 80022e8:	a39f      	add	r3, pc, #636	; (adr r3, 8002568 <__ieee754_rem_pio2+0x2e8>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fd ff6f 	bl	80001d0 <__aeabi_dsub>
 80022f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80022f6:	2501      	movs	r5, #1
 80022f8:	4628      	mov	r0, r5
 80022fa:	b00d      	add	sp, #52	; 0x34
 80022fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002300:	a39b      	add	r3, pc, #620	; (adr r3, 8002570 <__ieee754_rem_pio2+0x2f0>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ff63 	bl	80001d0 <__aeabi_dsub>
 800230a:	a39b      	add	r3, pc, #620	; (adr r3, 8002578 <__ieee754_rem_pio2+0x2f8>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	4606      	mov	r6, r0
 8002312:	460f      	mov	r7, r1
 8002314:	f7fd ff5c 	bl	80001d0 <__aeabi_dsub>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	e9c4 2300 	strd	r2, r3, [r4]
 8002320:	4630      	mov	r0, r6
 8002322:	4639      	mov	r1, r7
 8002324:	f7fd ff54 	bl	80001d0 <__aeabi_dsub>
 8002328:	a393      	add	r3, pc, #588	; (adr r3, 8002578 <__ieee754_rem_pio2+0x2f8>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	e7de      	b.n	80022ee <__ieee754_rem_pio2+0x6e>
 8002330:	f7fd ff50 	bl	80001d4 <__adddf3>
 8002334:	45a8      	cmp	r8, r5
 8002336:	4606      	mov	r6, r0
 8002338:	460f      	mov	r7, r1
 800233a:	d016      	beq.n	800236a <__ieee754_rem_pio2+0xea>
 800233c:	a38a      	add	r3, pc, #552	; (adr r3, 8002568 <__ieee754_rem_pio2+0x2e8>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fd ff47 	bl	80001d4 <__adddf3>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	e9c4 2300 	strd	r2, r3, [r4]
 800234e:	4630      	mov	r0, r6
 8002350:	4639      	mov	r1, r7
 8002352:	f7fd ff3d 	bl	80001d0 <__aeabi_dsub>
 8002356:	a384      	add	r3, pc, #528	; (adr r3, 8002568 <__ieee754_rem_pio2+0x2e8>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	f7fd ff3a 	bl	80001d4 <__adddf3>
 8002360:	f04f 35ff 	mov.w	r5, #4294967295
 8002364:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002368:	e7c6      	b.n	80022f8 <__ieee754_rem_pio2+0x78>
 800236a:	a381      	add	r3, pc, #516	; (adr r3, 8002570 <__ieee754_rem_pio2+0x2f0>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fd ff30 	bl	80001d4 <__adddf3>
 8002374:	a380      	add	r3, pc, #512	; (adr r3, 8002578 <__ieee754_rem_pio2+0x2f8>)
 8002376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237a:	4606      	mov	r6, r0
 800237c:	460f      	mov	r7, r1
 800237e:	f7fd ff29 	bl	80001d4 <__adddf3>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	e9c4 2300 	strd	r2, r3, [r4]
 800238a:	4630      	mov	r0, r6
 800238c:	4639      	mov	r1, r7
 800238e:	f7fd ff1f 	bl	80001d0 <__aeabi_dsub>
 8002392:	a379      	add	r3, pc, #484	; (adr r3, 8002578 <__ieee754_rem_pio2+0x2f8>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	e7e0      	b.n	800235c <__ieee754_rem_pio2+0xdc>
 800239a:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <__ieee754_rem_pio2+0x324>)
 800239c:	4598      	cmp	r8, r3
 800239e:	f300 80d0 	bgt.w	8002542 <__ieee754_rem_pio2+0x2c2>
 80023a2:	f001 f95b 	bl	800365c <fabs>
 80023a6:	ec57 6b10 	vmov	r6, r7, d0
 80023aa:	ee10 0a10 	vmov	r0, s0
 80023ae:	a374      	add	r3, pc, #464	; (adr r3, 8002580 <__ieee754_rem_pio2+0x300>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	4639      	mov	r1, r7
 80023b6:	f7fe f8bf 	bl	8000538 <__aeabi_dmul>
 80023ba:	2200      	movs	r2, #0
 80023bc:	4b7a      	ldr	r3, [pc, #488]	; (80025a8 <__ieee754_rem_pio2+0x328>)
 80023be:	f7fd ff09 	bl	80001d4 <__adddf3>
 80023c2:	f7fe fb53 	bl	8000a6c <__aeabi_d2iz>
 80023c6:	4605      	mov	r5, r0
 80023c8:	f7fe f850 	bl	800046c <__aeabi_i2d>
 80023cc:	a364      	add	r3, pc, #400	; (adr r3, 8002560 <__ieee754_rem_pio2+0x2e0>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80023d6:	f7fe f8af 	bl	8000538 <__aeabi_dmul>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4630      	mov	r0, r6
 80023e0:	4639      	mov	r1, r7
 80023e2:	f7fd fef5 	bl	80001d0 <__aeabi_dsub>
 80023e6:	a360      	add	r3, pc, #384	; (adr r3, 8002568 <__ieee754_rem_pio2+0x2e8>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	4682      	mov	sl, r0
 80023ee:	468b      	mov	fp, r1
 80023f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80023f4:	f7fe f8a0 	bl	8000538 <__aeabi_dmul>
 80023f8:	2d1f      	cmp	r5, #31
 80023fa:	4606      	mov	r6, r0
 80023fc:	460f      	mov	r7, r1
 80023fe:	dc2a      	bgt.n	8002456 <__ieee754_rem_pio2+0x1d6>
 8002400:	1e6a      	subs	r2, r5, #1
 8002402:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <__ieee754_rem_pio2+0x32c>)
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	4598      	cmp	r8, r3
 800240a:	d024      	beq.n	8002456 <__ieee754_rem_pio2+0x1d6>
 800240c:	4632      	mov	r2, r6
 800240e:	463b      	mov	r3, r7
 8002410:	4650      	mov	r0, sl
 8002412:	4659      	mov	r1, fp
 8002414:	f7fd fedc 	bl	80001d0 <__aeabi_dsub>
 8002418:	e9c4 0100 	strd	r0, r1, [r4]
 800241c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8002420:	4650      	mov	r0, sl
 8002422:	4642      	mov	r2, r8
 8002424:	464b      	mov	r3, r9
 8002426:	4659      	mov	r1, fp
 8002428:	f7fd fed2 	bl	80001d0 <__aeabi_dsub>
 800242c:	463b      	mov	r3, r7
 800242e:	4632      	mov	r2, r6
 8002430:	f7fd fece 	bl	80001d0 <__aeabi_dsub>
 8002434:	9b04      	ldr	r3, [sp, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800243c:	f6bf af5c 	bge.w	80022f8 <__ieee754_rem_pio2+0x78>
 8002440:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002444:	6063      	str	r3, [r4, #4]
 8002446:	f8c4 8000 	str.w	r8, [r4]
 800244a:	60a0      	str	r0, [r4, #8]
 800244c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002450:	60e3      	str	r3, [r4, #12]
 8002452:	426d      	negs	r5, r5
 8002454:	e750      	b.n	80022f8 <__ieee754_rem_pio2+0x78>
 8002456:	4632      	mov	r2, r6
 8002458:	463b      	mov	r3, r7
 800245a:	4650      	mov	r0, sl
 800245c:	4659      	mov	r1, fp
 800245e:	f7fd feb7 	bl	80001d0 <__aeabi_dsub>
 8002462:	ea4f 5228 	mov.w	r2, r8, asr #20
 8002466:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b10      	cmp	r3, #16
 800246e:	e9c4 0100 	strd	r0, r1, [r4]
 8002472:	9205      	str	r2, [sp, #20]
 8002474:	ddd2      	ble.n	800241c <__ieee754_rem_pio2+0x19c>
 8002476:	a33e      	add	r3, pc, #248	; (adr r3, 8002570 <__ieee754_rem_pio2+0x2f0>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002480:	f7fe f85a 	bl	8000538 <__aeabi_dmul>
 8002484:	4606      	mov	r6, r0
 8002486:	460f      	mov	r7, r1
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4650      	mov	r0, sl
 800248e:	4659      	mov	r1, fp
 8002490:	f7fd fe9e 	bl	80001d0 <__aeabi_dsub>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4680      	mov	r8, r0
 800249a:	4689      	mov	r9, r1
 800249c:	4650      	mov	r0, sl
 800249e:	4659      	mov	r1, fp
 80024a0:	f7fd fe96 	bl	80001d0 <__aeabi_dsub>
 80024a4:	4632      	mov	r2, r6
 80024a6:	463b      	mov	r3, r7
 80024a8:	f7fd fe92 	bl	80001d0 <__aeabi_dsub>
 80024ac:	a332      	add	r3, pc, #200	; (adr r3, 8002578 <__ieee754_rem_pio2+0x2f8>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	4606      	mov	r6, r0
 80024b4:	460f      	mov	r7, r1
 80024b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80024ba:	f7fe f83d 	bl	8000538 <__aeabi_dmul>
 80024be:	4632      	mov	r2, r6
 80024c0:	463b      	mov	r3, r7
 80024c2:	f7fd fe85 	bl	80001d0 <__aeabi_dsub>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4606      	mov	r6, r0
 80024cc:	460f      	mov	r7, r1
 80024ce:	4640      	mov	r0, r8
 80024d0:	4649      	mov	r1, r9
 80024d2:	f7fd fe7d 	bl	80001d0 <__aeabi_dsub>
 80024d6:	9a05      	ldr	r2, [sp, #20]
 80024d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b31      	cmp	r3, #49	; 0x31
 80024e0:	e9c4 0100 	strd	r0, r1, [r4]
 80024e4:	dd2a      	ble.n	800253c <__ieee754_rem_pio2+0x2bc>
 80024e6:	a328      	add	r3, pc, #160	; (adr r3, 8002588 <__ieee754_rem_pio2+0x308>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80024f0:	f7fe f822 	bl	8000538 <__aeabi_dmul>
 80024f4:	4606      	mov	r6, r0
 80024f6:	460f      	mov	r7, r1
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4640      	mov	r0, r8
 80024fe:	4649      	mov	r1, r9
 8002500:	f7fd fe66 	bl	80001d0 <__aeabi_dsub>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4682      	mov	sl, r0
 800250a:	468b      	mov	fp, r1
 800250c:	4640      	mov	r0, r8
 800250e:	4649      	mov	r1, r9
 8002510:	f7fd fe5e 	bl	80001d0 <__aeabi_dsub>
 8002514:	4632      	mov	r2, r6
 8002516:	463b      	mov	r3, r7
 8002518:	f7fd fe5a 	bl	80001d0 <__aeabi_dsub>
 800251c:	a31c      	add	r3, pc, #112	; (adr r3, 8002590 <__ieee754_rem_pio2+0x310>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	4606      	mov	r6, r0
 8002524:	460f      	mov	r7, r1
 8002526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800252a:	f7fe f805 	bl	8000538 <__aeabi_dmul>
 800252e:	4632      	mov	r2, r6
 8002530:	463b      	mov	r3, r7
 8002532:	f7fd fe4d 	bl	80001d0 <__aeabi_dsub>
 8002536:	4606      	mov	r6, r0
 8002538:	460f      	mov	r7, r1
 800253a:	e767      	b.n	800240c <__ieee754_rem_pio2+0x18c>
 800253c:	46c2      	mov	sl, r8
 800253e:	46cb      	mov	fp, r9
 8002540:	e76c      	b.n	800241c <__ieee754_rem_pio2+0x19c>
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <__ieee754_rem_pio2+0x330>)
 8002544:	4598      	cmp	r8, r3
 8002546:	dd35      	ble.n	80025b4 <__ieee754_rem_pio2+0x334>
 8002548:	ee10 2a10 	vmov	r2, s0
 800254c:	463b      	mov	r3, r7
 800254e:	4630      	mov	r0, r6
 8002550:	4639      	mov	r1, r7
 8002552:	f7fd fe3d 	bl	80001d0 <__aeabi_dsub>
 8002556:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800255a:	e9c4 0100 	strd	r0, r1, [r4]
 800255e:	e6a1      	b.n	80022a4 <__ieee754_rem_pio2+0x24>
 8002560:	54400000 	.word	0x54400000
 8002564:	3ff921fb 	.word	0x3ff921fb
 8002568:	1a626331 	.word	0x1a626331
 800256c:	3dd0b461 	.word	0x3dd0b461
 8002570:	1a600000 	.word	0x1a600000
 8002574:	3dd0b461 	.word	0x3dd0b461
 8002578:	2e037073 	.word	0x2e037073
 800257c:	3ba3198a 	.word	0x3ba3198a
 8002580:	6dc9c883 	.word	0x6dc9c883
 8002584:	3fe45f30 	.word	0x3fe45f30
 8002588:	2e000000 	.word	0x2e000000
 800258c:	3ba3198a 	.word	0x3ba3198a
 8002590:	252049c1 	.word	0x252049c1
 8002594:	397b839a 	.word	0x397b839a
 8002598:	3fe921fb 	.word	0x3fe921fb
 800259c:	4002d97b 	.word	0x4002d97b
 80025a0:	3ff921fb 	.word	0x3ff921fb
 80025a4:	413921fb 	.word	0x413921fb
 80025a8:	3fe00000 	.word	0x3fe00000
 80025ac:	08008b20 	.word	0x08008b20
 80025b0:	7fefffff 	.word	0x7fefffff
 80025b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80025b8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80025bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80025c0:	4630      	mov	r0, r6
 80025c2:	460f      	mov	r7, r1
 80025c4:	f7fe fa52 	bl	8000a6c <__aeabi_d2iz>
 80025c8:	f7fd ff50 	bl	800046c <__aeabi_i2d>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4630      	mov	r0, r6
 80025d2:	4639      	mov	r1, r7
 80025d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80025d8:	f7fd fdfa 	bl	80001d0 <__aeabi_dsub>
 80025dc:	2200      	movs	r2, #0
 80025de:	4b1f      	ldr	r3, [pc, #124]	; (800265c <__ieee754_rem_pio2+0x3dc>)
 80025e0:	f7fd ffaa 	bl	8000538 <__aeabi_dmul>
 80025e4:	460f      	mov	r7, r1
 80025e6:	4606      	mov	r6, r0
 80025e8:	f7fe fa40 	bl	8000a6c <__aeabi_d2iz>
 80025ec:	f7fd ff3e 	bl	800046c <__aeabi_i2d>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4630      	mov	r0, r6
 80025f6:	4639      	mov	r1, r7
 80025f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80025fc:	f7fd fde8 	bl	80001d0 <__aeabi_dsub>
 8002600:	2200      	movs	r2, #0
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <__ieee754_rem_pio2+0x3dc>)
 8002604:	f7fd ff98 	bl	8000538 <__aeabi_dmul>
 8002608:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800260c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002610:	f04f 0803 	mov.w	r8, #3
 8002614:	2600      	movs	r6, #0
 8002616:	2700      	movs	r7, #0
 8002618:	4632      	mov	r2, r6
 800261a:	463b      	mov	r3, r7
 800261c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8002620:	f108 3aff 	add.w	sl, r8, #4294967295
 8002624:	f7fe f9f0 	bl	8000a08 <__aeabi_dcmpeq>
 8002628:	b9b0      	cbnz	r0, 8002658 <__ieee754_rem_pio2+0x3d8>
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <__ieee754_rem_pio2+0x3e0>)
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2302      	movs	r3, #2
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	462a      	mov	r2, r5
 8002634:	4643      	mov	r3, r8
 8002636:	4621      	mov	r1, r4
 8002638:	a806      	add	r0, sp, #24
 800263a:	f000 fc05 	bl	8002e48 <__kernel_rem_pio2>
 800263e:	9b04      	ldr	r3, [sp, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	4605      	mov	r5, r0
 8002644:	f6bf ae58 	bge.w	80022f8 <__ieee754_rem_pio2+0x78>
 8002648:	6863      	ldr	r3, [r4, #4]
 800264a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800264e:	6063      	str	r3, [r4, #4]
 8002650:	68e3      	ldr	r3, [r4, #12]
 8002652:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002656:	e6fb      	b.n	8002450 <__ieee754_rem_pio2+0x1d0>
 8002658:	46d0      	mov	r8, sl
 800265a:	e7dd      	b.n	8002618 <__ieee754_rem_pio2+0x398>
 800265c:	41700000 	.word	0x41700000
 8002660:	08008ba0 	.word	0x08008ba0

08002664 <__ieee754_powf>:
 8002664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002668:	ee10 5a90 	vmov	r5, s1
 800266c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8002670:	ed2d 8b02 	vpush	{d8}
 8002674:	eeb0 8a40 	vmov.f32	s16, s0
 8002678:	eef0 8a60 	vmov.f32	s17, s1
 800267c:	f000 8295 	beq.w	8002baa <__ieee754_powf+0x546>
 8002680:	ee10 8a10 	vmov	r8, s0
 8002684:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8002688:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800268c:	dc06      	bgt.n	800269c <__ieee754_powf+0x38>
 800268e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8002692:	dd0a      	ble.n	80026aa <__ieee754_powf+0x46>
 8002694:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8002698:	f000 8287 	beq.w	8002baa <__ieee754_powf+0x546>
 800269c:	ecbd 8b02 	vpop	{d8}
 80026a0:	48d9      	ldr	r0, [pc, #868]	; (8002a08 <__ieee754_powf+0x3a4>)
 80026a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026a6:	f001 b97f 	b.w	80039a8 <nanf>
 80026aa:	f1b8 0f00 	cmp.w	r8, #0
 80026ae:	da1d      	bge.n	80026ec <__ieee754_powf+0x88>
 80026b0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80026b4:	da2c      	bge.n	8002710 <__ieee754_powf+0xac>
 80026b6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80026ba:	db30      	blt.n	800271e <__ieee754_powf+0xba>
 80026bc:	15fb      	asrs	r3, r7, #23
 80026be:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80026c2:	fa47 f603 	asr.w	r6, r7, r3
 80026c6:	fa06 f303 	lsl.w	r3, r6, r3
 80026ca:	429f      	cmp	r7, r3
 80026cc:	d127      	bne.n	800271e <__ieee754_powf+0xba>
 80026ce:	f006 0601 	and.w	r6, r6, #1
 80026d2:	f1c6 0602 	rsb	r6, r6, #2
 80026d6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80026da:	d122      	bne.n	8002722 <__ieee754_powf+0xbe>
 80026dc:	2d00      	cmp	r5, #0
 80026de:	f280 826a 	bge.w	8002bb6 <__ieee754_powf+0x552>
 80026e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80026e6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80026ea:	e00d      	b.n	8002708 <__ieee754_powf+0xa4>
 80026ec:	2600      	movs	r6, #0
 80026ee:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80026f2:	d1f0      	bne.n	80026d6 <__ieee754_powf+0x72>
 80026f4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80026f8:	f000 8257 	beq.w	8002baa <__ieee754_powf+0x546>
 80026fc:	dd0a      	ble.n	8002714 <__ieee754_powf+0xb0>
 80026fe:	2d00      	cmp	r5, #0
 8002700:	f280 8256 	bge.w	8002bb0 <__ieee754_powf+0x54c>
 8002704:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8002a0c <__ieee754_powf+0x3a8>
 8002708:	ecbd 8b02 	vpop	{d8}
 800270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002710:	2602      	movs	r6, #2
 8002712:	e7ec      	b.n	80026ee <__ieee754_powf+0x8a>
 8002714:	2d00      	cmp	r5, #0
 8002716:	daf5      	bge.n	8002704 <__ieee754_powf+0xa0>
 8002718:	eeb1 0a68 	vneg.f32	s0, s17
 800271c:	e7f4      	b.n	8002708 <__ieee754_powf+0xa4>
 800271e:	2600      	movs	r6, #0
 8002720:	e7d9      	b.n	80026d6 <__ieee754_powf+0x72>
 8002722:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8002726:	d102      	bne.n	800272e <__ieee754_powf+0xca>
 8002728:	ee28 0a08 	vmul.f32	s0, s16, s16
 800272c:	e7ec      	b.n	8002708 <__ieee754_powf+0xa4>
 800272e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8002732:	eeb0 0a48 	vmov.f32	s0, s16
 8002736:	d108      	bne.n	800274a <__ieee754_powf+0xe6>
 8002738:	f1b8 0f00 	cmp.w	r8, #0
 800273c:	db05      	blt.n	800274a <__ieee754_powf+0xe6>
 800273e:	ecbd 8b02 	vpop	{d8}
 8002742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002746:	f000 ba4f 	b.w	8002be8 <__ieee754_sqrtf>
 800274a:	f001 f91b 	bl	8003984 <fabsf>
 800274e:	b124      	cbz	r4, 800275a <__ieee754_powf+0xf6>
 8002750:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8002754:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8002758:	d117      	bne.n	800278a <__ieee754_powf+0x126>
 800275a:	2d00      	cmp	r5, #0
 800275c:	bfbc      	itt	lt
 800275e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8002762:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002766:	f1b8 0f00 	cmp.w	r8, #0
 800276a:	dacd      	bge.n	8002708 <__ieee754_powf+0xa4>
 800276c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8002770:	ea54 0306 	orrs.w	r3, r4, r6
 8002774:	d104      	bne.n	8002780 <__ieee754_powf+0x11c>
 8002776:	ee70 7a40 	vsub.f32	s15, s0, s0
 800277a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800277e:	e7c3      	b.n	8002708 <__ieee754_powf+0xa4>
 8002780:	2e01      	cmp	r6, #1
 8002782:	d1c1      	bne.n	8002708 <__ieee754_powf+0xa4>
 8002784:	eeb1 0a40 	vneg.f32	s0, s0
 8002788:	e7be      	b.n	8002708 <__ieee754_powf+0xa4>
 800278a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800278e:	3801      	subs	r0, #1
 8002790:	ea56 0300 	orrs.w	r3, r6, r0
 8002794:	d104      	bne.n	80027a0 <__ieee754_powf+0x13c>
 8002796:	ee38 8a48 	vsub.f32	s16, s16, s16
 800279a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800279e:	e7b3      	b.n	8002708 <__ieee754_powf+0xa4>
 80027a0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80027a4:	dd6d      	ble.n	8002882 <__ieee754_powf+0x21e>
 80027a6:	4b9a      	ldr	r3, [pc, #616]	; (8002a10 <__ieee754_powf+0x3ac>)
 80027a8:	429c      	cmp	r4, r3
 80027aa:	dc06      	bgt.n	80027ba <__ieee754_powf+0x156>
 80027ac:	2d00      	cmp	r5, #0
 80027ae:	daa9      	bge.n	8002704 <__ieee754_powf+0xa0>
 80027b0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8002a14 <__ieee754_powf+0x3b0>
 80027b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80027b8:	e7a6      	b.n	8002708 <__ieee754_powf+0xa4>
 80027ba:	4b97      	ldr	r3, [pc, #604]	; (8002a18 <__ieee754_powf+0x3b4>)
 80027bc:	429c      	cmp	r4, r3
 80027be:	dd02      	ble.n	80027c6 <__ieee754_powf+0x162>
 80027c0:	2d00      	cmp	r5, #0
 80027c2:	dcf5      	bgt.n	80027b0 <__ieee754_powf+0x14c>
 80027c4:	e79e      	b.n	8002704 <__ieee754_powf+0xa0>
 80027c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80027ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80027ce:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002a1c <__ieee754_powf+0x3b8>
 80027d2:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8002a20 <__ieee754_powf+0x3bc>
 80027d6:	eef1 6a40 	vneg.f32	s13, s0
 80027da:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80027de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80027e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80027e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80027ea:	ee20 7a00 	vmul.f32	s14, s0, s0
 80027ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027f2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8002a24 <__ieee754_powf+0x3c0>
 80027f6:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80027fa:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002a28 <__ieee754_powf+0x3c4>
 80027fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002802:	eeb0 7a67 	vmov.f32	s14, s15
 8002806:	eea0 7a06 	vfma.f32	s14, s0, s12
 800280a:	ee17 3a10 	vmov	r3, s14
 800280e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002812:	f023 030f 	bic.w	r3, r3, #15
 8002816:	ee07 3a10 	vmov	s14, r3
 800281a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800281e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002822:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8002826:	f025 050f 	bic.w	r5, r5, #15
 800282a:	ee07 5a10 	vmov	s14, r5
 800282e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002832:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8002836:	ee07 3a10 	vmov	s14, r3
 800283a:	ee06 5a90 	vmov	s13, r5
 800283e:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002842:	3e01      	subs	r6, #1
 8002844:	ea56 0200 	orrs.w	r2, r6, r0
 8002848:	ee27 7a26 	vmul.f32	s14, s14, s13
 800284c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002850:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002854:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8002858:	ee16 4a90 	vmov	r4, s13
 800285c:	bf08      	it	eq
 800285e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8002862:	2c00      	cmp	r4, #0
 8002864:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002868:	f340 8186 	ble.w	8002b78 <__ieee754_powf+0x514>
 800286c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8002870:	f340 80fc 	ble.w	8002a6c <__ieee754_powf+0x408>
 8002874:	eddf 7a67 	vldr	s15, [pc, #412]	; 8002a14 <__ieee754_powf+0x3b0>
 8002878:	ee28 0a27 	vmul.f32	s0, s16, s15
 800287c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002880:	e742      	b.n	8002708 <__ieee754_powf+0xa4>
 8002882:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8002886:	bfbf      	itttt	lt
 8002888:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8002a2c <__ieee754_powf+0x3c8>
 800288c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8002890:	f06f 0217 	mvnlt.w	r2, #23
 8002894:	ee17 4a90 	vmovlt	r4, s15
 8002898:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800289c:	bfa8      	it	ge
 800289e:	2200      	movge	r2, #0
 80028a0:	3b7f      	subs	r3, #127	; 0x7f
 80028a2:	4413      	add	r3, r2
 80028a4:	4a62      	ldr	r2, [pc, #392]	; (8002a30 <__ieee754_powf+0x3cc>)
 80028a6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80028aa:	4294      	cmp	r4, r2
 80028ac:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80028b0:	dd06      	ble.n	80028c0 <__ieee754_powf+0x25c>
 80028b2:	4a60      	ldr	r2, [pc, #384]	; (8002a34 <__ieee754_powf+0x3d0>)
 80028b4:	4294      	cmp	r4, r2
 80028b6:	f340 80a5 	ble.w	8002a04 <__ieee754_powf+0x3a0>
 80028ba:	3301      	adds	r3, #1
 80028bc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80028c0:	2400      	movs	r4, #0
 80028c2:	4a5d      	ldr	r2, [pc, #372]	; (8002a38 <__ieee754_powf+0x3d4>)
 80028c4:	00a7      	lsls	r7, r4, #2
 80028c6:	443a      	add	r2, r7
 80028c8:	ee07 1a90 	vmov	s15, r1
 80028cc:	ed92 7a00 	vldr	s14, [r2]
 80028d0:	4a5a      	ldr	r2, [pc, #360]	; (8002a3c <__ieee754_powf+0x3d8>)
 80028d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80028d6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80028da:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 80028de:	1049      	asrs	r1, r1, #1
 80028e0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80028e4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80028e8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80028ec:	ee37 6ac7 	vsub.f32	s12, s15, s14
 80028f0:	ee06 1a90 	vmov	s13, r1
 80028f4:	ee66 4a05 	vmul.f32	s9, s12, s10
 80028f8:	ee14 ea90 	vmov	lr, s9
 80028fc:	ea02 0e0e 	and.w	lr, r2, lr
 8002900:	ee05 ea90 	vmov	s11, lr
 8002904:	eeb1 4a65 	vneg.f32	s8, s11
 8002908:	eea4 6a26 	vfma.f32	s12, s8, s13
 800290c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8002910:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8002914:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002918:	eddf 7a49 	vldr	s15, [pc, #292]	; 8002a40 <__ieee754_powf+0x3dc>
 800291c:	eea4 6a26 	vfma.f32	s12, s8, s13
 8002920:	ee66 6a05 	vmul.f32	s13, s12, s10
 8002924:	ee24 6aa4 	vmul.f32	s12, s9, s9
 8002928:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8002a44 <__ieee754_powf+0x3e0>
 800292c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002930:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8002a48 <__ieee754_powf+0x3e4>
 8002934:	eea6 5a27 	vfma.f32	s10, s12, s15
 8002938:	eddf 7a38 	vldr	s15, [pc, #224]	; 8002a1c <__ieee754_powf+0x3b8>
 800293c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002940:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8002a4c <__ieee754_powf+0x3e8>
 8002944:	eea6 5a27 	vfma.f32	s10, s12, s15
 8002948:	eddf 7a41 	vldr	s15, [pc, #260]	; 8002a50 <__ieee754_powf+0x3ec>
 800294c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002950:	ee66 3a06 	vmul.f32	s7, s12, s12
 8002954:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8002958:	ee27 7a26 	vmul.f32	s14, s14, s13
 800295c:	eeb0 6a45 	vmov.f32	s12, s10
 8002960:	eea3 7aa7 	vfma.f32	s14, s7, s15
 8002964:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8002968:	ee36 6a07 	vadd.f32	s12, s12, s14
 800296c:	ee16 1a10 	vmov	r1, s12
 8002970:	4011      	ands	r1, r2
 8002972:	ee06 1a10 	vmov	s12, r1
 8002976:	ee76 7a45 	vsub.f32	s15, s12, s10
 800297a:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8002a54 <__ieee754_powf+0x3f0>
 800297e:	eee4 7a25 	vfma.f32	s15, s8, s11
 8002982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002986:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800298a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800298e:	eeb0 7a67 	vmov.f32	s14, s15
 8002992:	eea5 7a86 	vfma.f32	s14, s11, s12
 8002996:	ee17 1a10 	vmov	r1, s14
 800299a:	4011      	ands	r1, r2
 800299c:	ee07 1a10 	vmov	s14, r1
 80029a0:	eea4 7a06 	vfma.f32	s14, s8, s12
 80029a4:	ee05 1a90 	vmov	s11, r1
 80029a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ac:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002a58 <__ieee754_powf+0x3f4>
 80029b0:	492a      	ldr	r1, [pc, #168]	; (8002a5c <__ieee754_powf+0x3f8>)
 80029b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002a60 <__ieee754_powf+0x3fc>
 80029ba:	eee5 7a87 	vfma.f32	s15, s11, s14
 80029be:	4439      	add	r1, r7
 80029c0:	ed91 7a00 	vldr	s14, [r1]
 80029c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eeb0 6a47 	vmov.f32	s12, s14
 80029d0:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <__ieee754_powf+0x400>)
 80029d2:	eea5 6a85 	vfma.f32	s12, s11, s10
 80029d6:	443b      	add	r3, r7
 80029d8:	edd3 4a00 	vldr	s9, [r3]
 80029dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029e0:	ee36 6a24 	vadd.f32	s12, s12, s9
 80029e4:	ee76 7a26 	vadd.f32	s15, s12, s13
 80029e8:	ee17 3a90 	vmov	r3, s15
 80029ec:	4013      	ands	r3, r2
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029f6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80029fa:	eee5 7ac5 	vfms.f32	s15, s11, s10
 80029fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a02:	e70e      	b.n	8002822 <__ieee754_powf+0x1be>
 8002a04:	2401      	movs	r4, #1
 8002a06:	e75c      	b.n	80028c2 <__ieee754_powf+0x25e>
 8002a08:	08008b1c 	.word	0x08008b1c
 8002a0c:	00000000 	.word	0x00000000
 8002a10:	3f7ffff7 	.word	0x3f7ffff7
 8002a14:	7149f2ca 	.word	0x7149f2ca
 8002a18:	3f800007 	.word	0x3f800007
 8002a1c:	3eaaaaab 	.word	0x3eaaaaab
 8002a20:	3fb8aa00 	.word	0x3fb8aa00
 8002a24:	3fb8aa3b 	.word	0x3fb8aa3b
 8002a28:	36eca570 	.word	0x36eca570
 8002a2c:	4b800000 	.word	0x4b800000
 8002a30:	001cc471 	.word	0x001cc471
 8002a34:	005db3d6 	.word	0x005db3d6
 8002a38:	08008ca8 	.word	0x08008ca8
 8002a3c:	fffff000 	.word	0xfffff000
 8002a40:	3e6c3255 	.word	0x3e6c3255
 8002a44:	3e53f142 	.word	0x3e53f142
 8002a48:	3e8ba305 	.word	0x3e8ba305
 8002a4c:	3edb6db7 	.word	0x3edb6db7
 8002a50:	3f19999a 	.word	0x3f19999a
 8002a54:	3f763800 	.word	0x3f763800
 8002a58:	3f76384f 	.word	0x3f76384f
 8002a5c:	08008cb8 	.word	0x08008cb8
 8002a60:	369dc3a0 	.word	0x369dc3a0
 8002a64:	08008cb0 	.word	0x08008cb0
 8002a68:	3338aa3c 	.word	0x3338aa3c
 8002a6c:	f040 8094 	bne.w	8002b98 <__ieee754_powf+0x534>
 8002a70:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 8002a68 <__ieee754_powf+0x404>
 8002a74:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8002a78:	ee37 6a86 	vadd.f32	s12, s15, s12
 8002a7c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	f73f aef6 	bgt.w	8002874 <__ieee754_powf+0x210>
 8002a88:	15db      	asrs	r3, r3, #23
 8002a8a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8002a8e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002a92:	4103      	asrs	r3, r0
 8002a94:	4423      	add	r3, r4
 8002a96:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002a9a:	4948      	ldr	r1, [pc, #288]	; (8002bbc <__ieee754_powf+0x558>)
 8002a9c:	3a7f      	subs	r2, #127	; 0x7f
 8002a9e:	4111      	asrs	r1, r2
 8002aa0:	ea23 0101 	bic.w	r1, r3, r1
 8002aa4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8002aa8:	ee06 1a90 	vmov	s13, r1
 8002aac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002ab0:	f1c2 0217 	rsb	r2, r2, #23
 8002ab4:	4110      	asrs	r0, r2
 8002ab6:	2c00      	cmp	r4, #0
 8002ab8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002abc:	bfb8      	it	lt
 8002abe:	4240      	neglt	r0, r0
 8002ac0:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002ac4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8002bc0 <__ieee754_powf+0x55c>
 8002ac8:	ee16 3a90 	vmov	r3, s13
 8002acc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002ad0:	f023 030f 	bic.w	r3, r3, #15
 8002ad4:	ee06 3a90 	vmov	s13, r3
 8002ad8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002adc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ae0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002bc4 <__ieee754_powf+0x560>
 8002ae4:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002ae8:	eea7 7a86 	vfma.f32	s14, s15, s12
 8002aec:	eef0 7a47 	vmov.f32	s15, s14
 8002af0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002bc8 <__ieee754_powf+0x564>
 8002af4:	eeb0 0a67 	vmov.f32	s0, s15
 8002af8:	eea6 0a87 	vfma.f32	s0, s13, s14
 8002afc:	eeb0 6a40 	vmov.f32	s12, s0
 8002b00:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8002b04:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002b08:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002b0c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002bcc <__ieee754_powf+0x568>
 8002b10:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8002bd0 <__ieee754_powf+0x56c>
 8002b14:	eea7 6a26 	vfma.f32	s12, s14, s13
 8002b18:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002bd4 <__ieee754_powf+0x570>
 8002b1c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8002b20:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8002bd8 <__ieee754_powf+0x574>
 8002b24:	eea7 6a26 	vfma.f32	s12, s14, s13
 8002b28:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002bdc <__ieee754_powf+0x578>
 8002b2c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8002b30:	eeb0 6a40 	vmov.f32	s12, s0
 8002b34:	eea7 6a66 	vfms.f32	s12, s14, s13
 8002b38:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b3c:	eeb0 7a46 	vmov.f32	s14, s12
 8002b40:	ee77 6a66 	vsub.f32	s13, s14, s13
 8002b44:	ee20 6a06 	vmul.f32	s12, s0, s12
 8002b48:	eee0 7a27 	vfma.f32	s15, s0, s15
 8002b4c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b54:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002b58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002b5c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002b60:	ee10 3a10 	vmov	r3, s0
 8002b64:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8002b68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b6c:	da1a      	bge.n	8002ba4 <__ieee754_powf+0x540>
 8002b6e:	f000 ff21 	bl	80039b4 <scalbnf>
 8002b72:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002b76:	e5c7      	b.n	8002708 <__ieee754_powf+0xa4>
 8002b78:	4a19      	ldr	r2, [pc, #100]	; (8002be0 <__ieee754_powf+0x57c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	dd02      	ble.n	8002b84 <__ieee754_powf+0x520>
 8002b7e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002be4 <__ieee754_powf+0x580>
 8002b82:	e679      	b.n	8002878 <__ieee754_powf+0x214>
 8002b84:	d108      	bne.n	8002b98 <__ieee754_powf+0x534>
 8002b86:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8002b8a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	f63f af79 	bhi.w	8002a88 <__ieee754_powf+0x424>
 8002b96:	e7f2      	b.n	8002b7e <__ieee754_powf+0x51a>
 8002b98:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8002b9c:	f73f af74 	bgt.w	8002a88 <__ieee754_powf+0x424>
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	e78d      	b.n	8002ac0 <__ieee754_powf+0x45c>
 8002ba4:	ee00 3a10 	vmov	s0, r3
 8002ba8:	e7e3      	b.n	8002b72 <__ieee754_powf+0x50e>
 8002baa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002bae:	e5ab      	b.n	8002708 <__ieee754_powf+0xa4>
 8002bb0:	eeb0 0a68 	vmov.f32	s0, s17
 8002bb4:	e5a8      	b.n	8002708 <__ieee754_powf+0xa4>
 8002bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8002bba:	e5a5      	b.n	8002708 <__ieee754_powf+0xa4>
 8002bbc:	007fffff 	.word	0x007fffff
 8002bc0:	3f317218 	.word	0x3f317218
 8002bc4:	35bfbe8c 	.word	0x35bfbe8c
 8002bc8:	3f317200 	.word	0x3f317200
 8002bcc:	3331bb4c 	.word	0x3331bb4c
 8002bd0:	b5ddea0e 	.word	0xb5ddea0e
 8002bd4:	388ab355 	.word	0x388ab355
 8002bd8:	bb360b61 	.word	0xbb360b61
 8002bdc:	3e2aaaab 	.word	0x3e2aaaab
 8002be0:	43160000 	.word	0x43160000
 8002be4:	0da24260 	.word	0x0da24260

08002be8 <__ieee754_sqrtf>:
 8002be8:	ee10 2a10 	vmov	r2, s0
 8002bec:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8002bf0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	d302      	bcc.n	8002bfe <__ieee754_sqrtf+0x16>
 8002bf8:	eea0 0a00 	vfma.f32	s0, s0, s0
 8002bfc:	bd70      	pop	{r4, r5, r6, pc}
 8002bfe:	b3b1      	cbz	r1, 8002c6e <__ieee754_sqrtf+0x86>
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	da04      	bge.n	8002c0e <__ieee754_sqrtf+0x26>
 8002c04:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002c08:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002c12:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8002c16:	d204      	bcs.n	8002c22 <__ieee754_sqrtf+0x3a>
 8002c18:	2100      	movs	r1, #0
 8002c1a:	0210      	lsls	r0, r2, #8
 8002c1c:	d528      	bpl.n	8002c70 <__ieee754_sqrtf+0x88>
 8002c1e:	3901      	subs	r1, #1
 8002c20:	1a5b      	subs	r3, r3, r1
 8002c22:	3b7f      	subs	r3, #127	; 0x7f
 8002c24:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8002c28:	07d9      	lsls	r1, r3, #31
 8002c2a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c2e:	bf48      	it	mi
 8002c30:	0052      	lslmi	r2, r2, #1
 8002c32:	1059      	asrs	r1, r3, #1
 8002c34:	2300      	movs	r3, #0
 8002c36:	0052      	lsls	r2, r2, #1
 8002c38:	2419      	movs	r4, #25
 8002c3a:	461e      	mov	r6, r3
 8002c3c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002c40:	1835      	adds	r5, r6, r0
 8002c42:	4295      	cmp	r5, r2
 8002c44:	bfde      	ittt	le
 8002c46:	182e      	addle	r6, r5, r0
 8002c48:	1b52      	suble	r2, r2, r5
 8002c4a:	181b      	addle	r3, r3, r0
 8002c4c:	3c01      	subs	r4, #1
 8002c4e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002c52:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8002c56:	d1f3      	bne.n	8002c40 <__ieee754_sqrtf+0x58>
 8002c58:	b112      	cbz	r2, 8002c60 <__ieee754_sqrtf+0x78>
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	105b      	asrs	r3, r3, #1
 8002c62:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8002c66:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8002c6a:	ee00 3a10 	vmov	s0, r3
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	0052      	lsls	r2, r2, #1
 8002c72:	3101      	adds	r1, #1
 8002c74:	e7d1      	b.n	8002c1a <__ieee754_sqrtf+0x32>
	...

08002c78 <__kernel_cos>:
 8002c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c7c:	ec59 8b10 	vmov	r8, r9, d0
 8002c80:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8002c84:	b085      	sub	sp, #20
 8002c86:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8002c8a:	ed8d 1b00 	vstr	d1, [sp]
 8002c8e:	da07      	bge.n	8002ca0 <__kernel_cos+0x28>
 8002c90:	ee10 0a10 	vmov	r0, s0
 8002c94:	4649      	mov	r1, r9
 8002c96:	f7fd fee9 	bl	8000a6c <__aeabi_d2iz>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	f000 80aa 	beq.w	8002df4 <__kernel_cos+0x17c>
 8002ca0:	4642      	mov	r2, r8
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	4640      	mov	r0, r8
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	f7fd fc46 	bl	8000538 <__aeabi_dmul>
 8002cac:	a359      	add	r3, pc, #356	; (adr r3, 8002e14 <__kernel_cos+0x19c>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	460d      	mov	r5, r1
 8002cb6:	f7fd fc3f 	bl	8000538 <__aeabi_dmul>
 8002cba:	a358      	add	r3, pc, #352	; (adr r3, 8002e1c <__kernel_cos+0x1a4>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd fa88 	bl	80001d4 <__adddf3>
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	f7fd fc36 	bl	8000538 <__aeabi_dmul>
 8002ccc:	a355      	add	r3, pc, #340	; (adr r3, 8002e24 <__kernel_cos+0x1ac>)
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	f7fd fa7d 	bl	80001d0 <__aeabi_dsub>
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	462b      	mov	r3, r5
 8002cda:	f7fd fc2d 	bl	8000538 <__aeabi_dmul>
 8002cde:	a353      	add	r3, pc, #332	; (adr r3, 8002e2c <__kernel_cos+0x1b4>)
 8002ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce4:	f7fd fa76 	bl	80001d4 <__adddf3>
 8002ce8:	4622      	mov	r2, r4
 8002cea:	462b      	mov	r3, r5
 8002cec:	f7fd fc24 	bl	8000538 <__aeabi_dmul>
 8002cf0:	a350      	add	r3, pc, #320	; (adr r3, 8002e34 <__kernel_cos+0x1bc>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f7fd fa6b 	bl	80001d0 <__aeabi_dsub>
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	f7fd fc1b 	bl	8000538 <__aeabi_dmul>
 8002d02:	a34e      	add	r3, pc, #312	; (adr r3, 8002e3c <__kernel_cos+0x1c4>)
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f7fd fa64 	bl	80001d4 <__adddf3>
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	4622      	mov	r2, r4
 8002d10:	f7fd fc12 	bl	8000538 <__aeabi_dmul>
 8002d14:	4b3a      	ldr	r3, [pc, #232]	; (8002e00 <__kernel_cos+0x188>)
 8002d16:	429f      	cmp	r7, r3
 8002d18:	4682      	mov	sl, r0
 8002d1a:	468b      	mov	fp, r1
 8002d1c:	dc2c      	bgt.n	8002d78 <__kernel_cos+0x100>
 8002d1e:	2200      	movs	r2, #0
 8002d20:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <__kernel_cos+0x18c>)
 8002d22:	4620      	mov	r0, r4
 8002d24:	4629      	mov	r1, r5
 8002d26:	f7fd fc07 	bl	8000538 <__aeabi_dmul>
 8002d2a:	4652      	mov	r2, sl
 8002d2c:	4606      	mov	r6, r0
 8002d2e:	460f      	mov	r7, r1
 8002d30:	465b      	mov	r3, fp
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd fbff 	bl	8000538 <__aeabi_dmul>
 8002d3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d3e:	4604      	mov	r4, r0
 8002d40:	460d      	mov	r5, r1
 8002d42:	4640      	mov	r0, r8
 8002d44:	4649      	mov	r1, r9
 8002d46:	f7fd fbf7 	bl	8000538 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4620      	mov	r0, r4
 8002d50:	4629      	mov	r1, r5
 8002d52:	f7fd fa3d 	bl	80001d0 <__aeabi_dsub>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	4639      	mov	r1, r7
 8002d5e:	f7fd fa37 	bl	80001d0 <__aeabi_dsub>
 8002d62:	460b      	mov	r3, r1
 8002d64:	4928      	ldr	r1, [pc, #160]	; (8002e08 <__kernel_cos+0x190>)
 8002d66:	4602      	mov	r2, r0
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fd fa31 	bl	80001d0 <__aeabi_dsub>
 8002d6e:	ec41 0b10 	vmov	d0, r0, r1
 8002d72:	b005      	add	sp, #20
 8002d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d78:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <__kernel_cos+0x194>)
 8002d7a:	4923      	ldr	r1, [pc, #140]	; (8002e08 <__kernel_cos+0x190>)
 8002d7c:	429f      	cmp	r7, r3
 8002d7e:	bfd7      	itett	le
 8002d80:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8002d84:	4f22      	ldrgt	r7, [pc, #136]	; (8002e10 <__kernel_cos+0x198>)
 8002d86:	2200      	movle	r2, #0
 8002d88:	4616      	movle	r6, r2
 8002d8a:	bfd4      	ite	le
 8002d8c:	461f      	movle	r7, r3
 8002d8e:	2600      	movgt	r6, #0
 8002d90:	4632      	mov	r2, r6
 8002d92:	463b      	mov	r3, r7
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fd fa1b 	bl	80001d0 <__aeabi_dsub>
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <__kernel_cos+0x18c>)
 8002da2:	4620      	mov	r0, r4
 8002da4:	4629      	mov	r1, r5
 8002da6:	f7fd fbc7 	bl	8000538 <__aeabi_dmul>
 8002daa:	4632      	mov	r2, r6
 8002dac:	463b      	mov	r3, r7
 8002dae:	f7fd fa0f 	bl	80001d0 <__aeabi_dsub>
 8002db2:	4652      	mov	r2, sl
 8002db4:	4606      	mov	r6, r0
 8002db6:	460f      	mov	r7, r1
 8002db8:	465b      	mov	r3, fp
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f7fd fbbb 	bl	8000538 <__aeabi_dmul>
 8002dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	460d      	mov	r5, r1
 8002dca:	4640      	mov	r0, r8
 8002dcc:	4649      	mov	r1, r9
 8002dce:	f7fd fbb3 	bl	8000538 <__aeabi_dmul>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	4629      	mov	r1, r5
 8002dda:	f7fd f9f9 	bl	80001d0 <__aeabi_dsub>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4630      	mov	r0, r6
 8002de4:	4639      	mov	r1, r7
 8002de6:	f7fd f9f3 	bl	80001d0 <__aeabi_dsub>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002df2:	e7ba      	b.n	8002d6a <__kernel_cos+0xf2>
 8002df4:	2000      	movs	r0, #0
 8002df6:	4904      	ldr	r1, [pc, #16]	; (8002e08 <__kernel_cos+0x190>)
 8002df8:	e7b9      	b.n	8002d6e <__kernel_cos+0xf6>
 8002dfa:	bf00      	nop
 8002dfc:	f3af 8000 	nop.w
 8002e00:	3fd33332 	.word	0x3fd33332
 8002e04:	3fe00000 	.word	0x3fe00000
 8002e08:	3ff00000 	.word	0x3ff00000
 8002e0c:	3fe90000 	.word	0x3fe90000
 8002e10:	3fd20000 	.word	0x3fd20000
 8002e14:	be8838d4 	.word	0xbe8838d4
 8002e18:	bda8fae9 	.word	0xbda8fae9
 8002e1c:	bdb4b1c4 	.word	0xbdb4b1c4
 8002e20:	3e21ee9e 	.word	0x3e21ee9e
 8002e24:	809c52ad 	.word	0x809c52ad
 8002e28:	3e927e4f 	.word	0x3e927e4f
 8002e2c:	19cb1590 	.word	0x19cb1590
 8002e30:	3efa01a0 	.word	0x3efa01a0
 8002e34:	16c15177 	.word	0x16c15177
 8002e38:	3f56c16c 	.word	0x3f56c16c
 8002e3c:	5555554c 	.word	0x5555554c
 8002e40:	3fa55555 	.word	0x3fa55555
 8002e44:	00000000 	.word	0x00000000

08002e48 <__kernel_rem_pio2>:
 8002e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4c:	ed2d 8b02 	vpush	{d8}
 8002e50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8002e54:	1ed4      	subs	r4, r2, #3
 8002e56:	9306      	str	r3, [sp, #24]
 8002e58:	9102      	str	r1, [sp, #8]
 8002e5a:	4bc3      	ldr	r3, [pc, #780]	; (8003168 <__kernel_rem_pio2+0x320>)
 8002e5c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8002e5e:	9009      	str	r0, [sp, #36]	; 0x24
 8002e60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	9b06      	ldr	r3, [sp, #24]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	9304      	str	r3, [sp, #16]
 8002e6c:	2318      	movs	r3, #24
 8002e6e:	fb94 f4f3 	sdiv	r4, r4, r3
 8002e72:	f06f 0317 	mvn.w	r3, #23
 8002e76:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8002e7a:	fb04 3303 	mla	r3, r4, r3, r3
 8002e7e:	eb03 0a02 	add.w	sl, r3, r2
 8002e82:	9b00      	ldr	r3, [sp, #0]
 8002e84:	9a04      	ldr	r2, [sp, #16]
 8002e86:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8003158 <__kernel_rem_pio2+0x310>
 8002e8a:	eb03 0802 	add.w	r8, r3, r2
 8002e8e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002e90:	1aa7      	subs	r7, r4, r2
 8002e92:	ae20      	add	r6, sp, #128	; 0x80
 8002e94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002e98:	2500      	movs	r5, #0
 8002e9a:	4545      	cmp	r5, r8
 8002e9c:	dd13      	ble.n	8002ec6 <__kernel_rem_pio2+0x7e>
 8002e9e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8003158 <__kernel_rem_pio2+0x310>
 8002ea2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	429e      	cmp	r6, r3
 8002eac:	dc32      	bgt.n	8002f14 <__kernel_rem_pio2+0xcc>
 8002eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eb0:	9303      	str	r3, [sp, #12]
 8002eb2:	9b06      	ldr	r3, [sp, #24]
 8002eb4:	199d      	adds	r5, r3, r6
 8002eb6:	ab20      	add	r3, sp, #128	; 0x80
 8002eb8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002ebc:	9308      	str	r3, [sp, #32]
 8002ebe:	ec59 8b18 	vmov	r8, r9, d8
 8002ec2:	2700      	movs	r7, #0
 8002ec4:	e01f      	b.n	8002f06 <__kernel_rem_pio2+0xbe>
 8002ec6:	42ef      	cmn	r7, r5
 8002ec8:	d407      	bmi.n	8002eda <__kernel_rem_pio2+0x92>
 8002eca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002ece:	f7fd facd 	bl	800046c <__aeabi_i2d>
 8002ed2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002ed6:	3501      	adds	r5, #1
 8002ed8:	e7df      	b.n	8002e9a <__kernel_rem_pio2+0x52>
 8002eda:	ec51 0b18 	vmov	r0, r1, d8
 8002ede:	e7f8      	b.n	8002ed2 <__kernel_rem_pio2+0x8a>
 8002ee0:	9908      	ldr	r1, [sp, #32]
 8002ee2:	9d03      	ldr	r5, [sp, #12]
 8002ee4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002ee8:	9108      	str	r1, [sp, #32]
 8002eea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002eee:	9503      	str	r5, [sp, #12]
 8002ef0:	f7fd fb22 	bl	8000538 <__aeabi_dmul>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4640      	mov	r0, r8
 8002efa:	4649      	mov	r1, r9
 8002efc:	f7fd f96a 	bl	80001d4 <__adddf3>
 8002f00:	3701      	adds	r7, #1
 8002f02:	4680      	mov	r8, r0
 8002f04:	4689      	mov	r9, r1
 8002f06:	9b04      	ldr	r3, [sp, #16]
 8002f08:	429f      	cmp	r7, r3
 8002f0a:	dde9      	ble.n	8002ee0 <__kernel_rem_pio2+0x98>
 8002f0c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8002f10:	3601      	adds	r6, #1
 8002f12:	e7c9      	b.n	8002ea8 <__kernel_rem_pio2+0x60>
 8002f14:	9b00      	ldr	r3, [sp, #0]
 8002f16:	9f00      	ldr	r7, [sp, #0]
 8002f18:	aa0c      	add	r2, sp, #48	; 0x30
 8002f1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f20:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002f22:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002f26:	930a      	str	r3, [sp, #40]	; 0x28
 8002f28:	ab98      	add	r3, sp, #608	; 0x260
 8002f2a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8002f2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002f32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f36:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8002f3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f3e:	9308      	str	r3, [sp, #32]
 8002f40:	9a08      	ldr	r2, [sp, #32]
 8002f42:	ab98      	add	r3, sp, #608	; 0x260
 8002f44:	4413      	add	r3, r2
 8002f46:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8002f4a:	2600      	movs	r6, #0
 8002f4c:	1bbb      	subs	r3, r7, r6
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	dc77      	bgt.n	8003042 <__kernel_rem_pio2+0x1fa>
 8002f52:	ec49 8b10 	vmov	d0, r8, r9
 8002f56:	4650      	mov	r0, sl
 8002f58:	f000 fc9a 	bl	8003890 <scalbn>
 8002f5c:	ec55 4b10 	vmov	r4, r5, d0
 8002f60:	2200      	movs	r2, #0
 8002f62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002f66:	ee10 0a10 	vmov	r0, s0
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	f7fd fae4 	bl	8000538 <__aeabi_dmul>
 8002f70:	ec41 0b10 	vmov	d0, r0, r1
 8002f74:	f000 fb7c 	bl	8003670 <floor>
 8002f78:	2200      	movs	r2, #0
 8002f7a:	ec51 0b10 	vmov	r0, r1, d0
 8002f7e:	4b7b      	ldr	r3, [pc, #492]	; (800316c <__kernel_rem_pio2+0x324>)
 8002f80:	f7fd fada 	bl	8000538 <__aeabi_dmul>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4620      	mov	r0, r4
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	f7fd f920 	bl	80001d0 <__aeabi_dsub>
 8002f90:	460d      	mov	r5, r1
 8002f92:	4604      	mov	r4, r0
 8002f94:	f7fd fd6a 	bl	8000a6c <__aeabi_d2iz>
 8002f98:	9003      	str	r0, [sp, #12]
 8002f9a:	f7fd fa67 	bl	800046c <__aeabi_i2d>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	f7fd f913 	bl	80001d0 <__aeabi_dsub>
 8002faa:	f1ba 0f00 	cmp.w	sl, #0
 8002fae:	4680      	mov	r8, r0
 8002fb0:	4689      	mov	r9, r1
 8002fb2:	dd6b      	ble.n	800308c <__kernel_rem_pio2+0x244>
 8002fb4:	1e7a      	subs	r2, r7, #1
 8002fb6:	ab0c      	add	r3, sp, #48	; 0x30
 8002fb8:	f1ca 0118 	rsb	r1, sl, #24
 8002fbc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002fc0:	9c03      	ldr	r4, [sp, #12]
 8002fc2:	fa40 f301 	asr.w	r3, r0, r1
 8002fc6:	441c      	add	r4, r3
 8002fc8:	408b      	lsls	r3, r1
 8002fca:	1ac0      	subs	r0, r0, r3
 8002fcc:	ab0c      	add	r3, sp, #48	; 0x30
 8002fce:	9403      	str	r4, [sp, #12]
 8002fd0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002fd4:	f1ca 0317 	rsb	r3, sl, #23
 8002fd8:	fa40 fb03 	asr.w	fp, r0, r3
 8002fdc:	f1bb 0f00 	cmp.w	fp, #0
 8002fe0:	dd62      	ble.n	80030a8 <__kernel_rem_pio2+0x260>
 8002fe2:	9b03      	ldr	r3, [sp, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	9303      	str	r3, [sp, #12]
 8002fea:	4614      	mov	r4, r2
 8002fec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002ff0:	4297      	cmp	r7, r2
 8002ff2:	f300 8089 	bgt.w	8003108 <__kernel_rem_pio2+0x2c0>
 8002ff6:	f1ba 0f00 	cmp.w	sl, #0
 8002ffa:	dd07      	ble.n	800300c <__kernel_rem_pio2+0x1c4>
 8002ffc:	f1ba 0f01 	cmp.w	sl, #1
 8003000:	f000 8096 	beq.w	8003130 <__kernel_rem_pio2+0x2e8>
 8003004:	f1ba 0f02 	cmp.w	sl, #2
 8003008:	f000 809c 	beq.w	8003144 <__kernel_rem_pio2+0x2fc>
 800300c:	f1bb 0f02 	cmp.w	fp, #2
 8003010:	d14a      	bne.n	80030a8 <__kernel_rem_pio2+0x260>
 8003012:	4642      	mov	r2, r8
 8003014:	464b      	mov	r3, r9
 8003016:	2000      	movs	r0, #0
 8003018:	4955      	ldr	r1, [pc, #340]	; (8003170 <__kernel_rem_pio2+0x328>)
 800301a:	f7fd f8d9 	bl	80001d0 <__aeabi_dsub>
 800301e:	4680      	mov	r8, r0
 8003020:	4689      	mov	r9, r1
 8003022:	2c00      	cmp	r4, #0
 8003024:	d040      	beq.n	80030a8 <__kernel_rem_pio2+0x260>
 8003026:	4650      	mov	r0, sl
 8003028:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003160 <__kernel_rem_pio2+0x318>
 800302c:	f000 fc30 	bl	8003890 <scalbn>
 8003030:	4640      	mov	r0, r8
 8003032:	4649      	mov	r1, r9
 8003034:	ec53 2b10 	vmov	r2, r3, d0
 8003038:	f7fd f8ca 	bl	80001d0 <__aeabi_dsub>
 800303c:	4680      	mov	r8, r0
 800303e:	4689      	mov	r9, r1
 8003040:	e032      	b.n	80030a8 <__kernel_rem_pio2+0x260>
 8003042:	2200      	movs	r2, #0
 8003044:	4b4b      	ldr	r3, [pc, #300]	; (8003174 <__kernel_rem_pio2+0x32c>)
 8003046:	4640      	mov	r0, r8
 8003048:	4649      	mov	r1, r9
 800304a:	f7fd fa75 	bl	8000538 <__aeabi_dmul>
 800304e:	f7fd fd0d 	bl	8000a6c <__aeabi_d2iz>
 8003052:	f7fd fa0b 	bl	800046c <__aeabi_i2d>
 8003056:	2200      	movs	r2, #0
 8003058:	4b47      	ldr	r3, [pc, #284]	; (8003178 <__kernel_rem_pio2+0x330>)
 800305a:	4604      	mov	r4, r0
 800305c:	460d      	mov	r5, r1
 800305e:	f7fd fa6b 	bl	8000538 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4640      	mov	r0, r8
 8003068:	4649      	mov	r1, r9
 800306a:	f7fd f8b1 	bl	80001d0 <__aeabi_dsub>
 800306e:	f7fd fcfd 	bl	8000a6c <__aeabi_d2iz>
 8003072:	ab0c      	add	r3, sp, #48	; 0x30
 8003074:	4629      	mov	r1, r5
 8003076:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800307a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800307e:	4620      	mov	r0, r4
 8003080:	f7fd f8a8 	bl	80001d4 <__adddf3>
 8003084:	3601      	adds	r6, #1
 8003086:	4680      	mov	r8, r0
 8003088:	4689      	mov	r9, r1
 800308a:	e75f      	b.n	8002f4c <__kernel_rem_pio2+0x104>
 800308c:	d106      	bne.n	800309c <__kernel_rem_pio2+0x254>
 800308e:	1e7b      	subs	r3, r7, #1
 8003090:	aa0c      	add	r2, sp, #48	; 0x30
 8003092:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003096:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800309a:	e79f      	b.n	8002fdc <__kernel_rem_pio2+0x194>
 800309c:	2200      	movs	r2, #0
 800309e:	4b37      	ldr	r3, [pc, #220]	; (800317c <__kernel_rem_pio2+0x334>)
 80030a0:	f7fd fcd0 	bl	8000a44 <__aeabi_dcmpge>
 80030a4:	bb68      	cbnz	r0, 8003102 <__kernel_rem_pio2+0x2ba>
 80030a6:	4683      	mov	fp, r0
 80030a8:	2200      	movs	r2, #0
 80030aa:	2300      	movs	r3, #0
 80030ac:	4640      	mov	r0, r8
 80030ae:	4649      	mov	r1, r9
 80030b0:	f7fd fcaa 	bl	8000a08 <__aeabi_dcmpeq>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	f000 80c1 	beq.w	800323c <__kernel_rem_pio2+0x3f4>
 80030ba:	1e7c      	subs	r4, r7, #1
 80030bc:	4623      	mov	r3, r4
 80030be:	2200      	movs	r2, #0
 80030c0:	9900      	ldr	r1, [sp, #0]
 80030c2:	428b      	cmp	r3, r1
 80030c4:	da5c      	bge.n	8003180 <__kernel_rem_pio2+0x338>
 80030c6:	2a00      	cmp	r2, #0
 80030c8:	f040 808b 	bne.w	80031e2 <__kernel_rem_pio2+0x39a>
 80030cc:	2401      	movs	r4, #1
 80030ce:	f06f 0203 	mvn.w	r2, #3
 80030d2:	fb02 f304 	mul.w	r3, r2, r4
 80030d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030d8:	58cb      	ldr	r3, [r1, r3]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d056      	beq.n	800318c <__kernel_rem_pio2+0x344>
 80030de:	9b08      	ldr	r3, [sp, #32]
 80030e0:	aa98      	add	r2, sp, #608	; 0x260
 80030e2:	4413      	add	r3, r2
 80030e4:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 80030e8:	9b06      	ldr	r3, [sp, #24]
 80030ea:	19dd      	adds	r5, r3, r7
 80030ec:	ab20      	add	r3, sp, #128	; 0x80
 80030ee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80030f2:	19e3      	adds	r3, r4, r7
 80030f4:	1c7e      	adds	r6, r7, #1
 80030f6:	9303      	str	r3, [sp, #12]
 80030f8:	9b03      	ldr	r3, [sp, #12]
 80030fa:	429e      	cmp	r6, r3
 80030fc:	dd48      	ble.n	8003190 <__kernel_rem_pio2+0x348>
 80030fe:	461f      	mov	r7, r3
 8003100:	e712      	b.n	8002f28 <__kernel_rem_pio2+0xe0>
 8003102:	f04f 0b02 	mov.w	fp, #2
 8003106:	e76c      	b.n	8002fe2 <__kernel_rem_pio2+0x19a>
 8003108:	ab0c      	add	r3, sp, #48	; 0x30
 800310a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310e:	b94c      	cbnz	r4, 8003124 <__kernel_rem_pio2+0x2dc>
 8003110:	b12b      	cbz	r3, 800311e <__kernel_rem_pio2+0x2d6>
 8003112:	a80c      	add	r0, sp, #48	; 0x30
 8003114:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003118:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800311c:	2301      	movs	r3, #1
 800311e:	3201      	adds	r2, #1
 8003120:	461c      	mov	r4, r3
 8003122:	e765      	b.n	8002ff0 <__kernel_rem_pio2+0x1a8>
 8003124:	a80c      	add	r0, sp, #48	; 0x30
 8003126:	1acb      	subs	r3, r1, r3
 8003128:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800312c:	4623      	mov	r3, r4
 800312e:	e7f6      	b.n	800311e <__kernel_rem_pio2+0x2d6>
 8003130:	1e7a      	subs	r2, r7, #1
 8003132:	ab0c      	add	r3, sp, #48	; 0x30
 8003134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003138:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800313c:	a90c      	add	r1, sp, #48	; 0x30
 800313e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003142:	e763      	b.n	800300c <__kernel_rem_pio2+0x1c4>
 8003144:	1e7a      	subs	r2, r7, #1
 8003146:	ab0c      	add	r3, sp, #48	; 0x30
 8003148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003150:	e7f4      	b.n	800313c <__kernel_rem_pio2+0x2f4>
 8003152:	bf00      	nop
 8003154:	f3af 8000 	nop.w
	...
 8003164:	3ff00000 	.word	0x3ff00000
 8003168:	08008d00 	.word	0x08008d00
 800316c:	40200000 	.word	0x40200000
 8003170:	3ff00000 	.word	0x3ff00000
 8003174:	3e700000 	.word	0x3e700000
 8003178:	41700000 	.word	0x41700000
 800317c:	3fe00000 	.word	0x3fe00000
 8003180:	a90c      	add	r1, sp, #48	; 0x30
 8003182:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003186:	3b01      	subs	r3, #1
 8003188:	430a      	orrs	r2, r1
 800318a:	e799      	b.n	80030c0 <__kernel_rem_pio2+0x278>
 800318c:	3401      	adds	r4, #1
 800318e:	e7a0      	b.n	80030d2 <__kernel_rem_pio2+0x28a>
 8003190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003192:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003196:	f7fd f969 	bl	800046c <__aeabi_i2d>
 800319a:	e8e5 0102 	strd	r0, r1, [r5], #8
 800319e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031a0:	9508      	str	r5, [sp, #32]
 80031a2:	461c      	mov	r4, r3
 80031a4:	2700      	movs	r7, #0
 80031a6:	f04f 0800 	mov.w	r8, #0
 80031aa:	f04f 0900 	mov.w	r9, #0
 80031ae:	9b04      	ldr	r3, [sp, #16]
 80031b0:	429f      	cmp	r7, r3
 80031b2:	dd03      	ble.n	80031bc <__kernel_rem_pio2+0x374>
 80031b4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80031b8:	3601      	adds	r6, #1
 80031ba:	e79d      	b.n	80030f8 <__kernel_rem_pio2+0x2b0>
 80031bc:	9908      	ldr	r1, [sp, #32]
 80031be:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80031c2:	9108      	str	r1, [sp, #32]
 80031c4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80031c8:	f7fd f9b6 	bl	8000538 <__aeabi_dmul>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4640      	mov	r0, r8
 80031d2:	4649      	mov	r1, r9
 80031d4:	f7fc fffe 	bl	80001d4 <__adddf3>
 80031d8:	3701      	adds	r7, #1
 80031da:	4680      	mov	r8, r0
 80031dc:	4689      	mov	r9, r1
 80031de:	e7e6      	b.n	80031ae <__kernel_rem_pio2+0x366>
 80031e0:	3c01      	subs	r4, #1
 80031e2:	ab0c      	add	r3, sp, #48	; 0x30
 80031e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80031e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f7      	beq.n	80031e0 <__kernel_rem_pio2+0x398>
 80031f0:	4650      	mov	r0, sl
 80031f2:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 80034c8 <__kernel_rem_pio2+0x680>
 80031f6:	f000 fb4b 	bl	8003890 <scalbn>
 80031fa:	00e5      	lsls	r5, r4, #3
 80031fc:	ab98      	add	r3, sp, #608	; 0x260
 80031fe:	eb03 0905 	add.w	r9, r3, r5
 8003202:	ec57 6b10 	vmov	r6, r7, d0
 8003206:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800320a:	46a0      	mov	r8, r4
 800320c:	f1b8 0f00 	cmp.w	r8, #0
 8003210:	da4d      	bge.n	80032ae <__kernel_rem_pio2+0x466>
 8003212:	ed9f 8baf 	vldr	d8, [pc, #700]	; 80034d0 <__kernel_rem_pio2+0x688>
 8003216:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 800321a:	2300      	movs	r3, #0
 800321c:	9304      	str	r3, [sp, #16]
 800321e:	4657      	mov	r7, sl
 8003220:	9b04      	ldr	r3, [sp, #16]
 8003222:	ebb4 0903 	subs.w	r9, r4, r3
 8003226:	d476      	bmi.n	8003316 <__kernel_rem_pio2+0x4ce>
 8003228:	4bab      	ldr	r3, [pc, #684]	; (80034d8 <__kernel_rem_pio2+0x690>)
 800322a:	461e      	mov	r6, r3
 800322c:	ab70      	add	r3, sp, #448	; 0x1c0
 800322e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003232:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003236:	f04f 0800 	mov.w	r8, #0
 800323a:	e05e      	b.n	80032fa <__kernel_rem_pio2+0x4b2>
 800323c:	f1ca 0000 	rsb	r0, sl, #0
 8003240:	ec49 8b10 	vmov	d0, r8, r9
 8003244:	f000 fb24 	bl	8003890 <scalbn>
 8003248:	ec55 4b10 	vmov	r4, r5, d0
 800324c:	2200      	movs	r2, #0
 800324e:	4ba3      	ldr	r3, [pc, #652]	; (80034dc <__kernel_rem_pio2+0x694>)
 8003250:	ee10 0a10 	vmov	r0, s0
 8003254:	4629      	mov	r1, r5
 8003256:	f7fd fbf5 	bl	8000a44 <__aeabi_dcmpge>
 800325a:	b1f8      	cbz	r0, 800329c <__kernel_rem_pio2+0x454>
 800325c:	2200      	movs	r2, #0
 800325e:	4ba0      	ldr	r3, [pc, #640]	; (80034e0 <__kernel_rem_pio2+0x698>)
 8003260:	4620      	mov	r0, r4
 8003262:	4629      	mov	r1, r5
 8003264:	f7fd f968 	bl	8000538 <__aeabi_dmul>
 8003268:	f7fd fc00 	bl	8000a6c <__aeabi_d2iz>
 800326c:	4606      	mov	r6, r0
 800326e:	f7fd f8fd 	bl	800046c <__aeabi_i2d>
 8003272:	2200      	movs	r2, #0
 8003274:	4b99      	ldr	r3, [pc, #612]	; (80034dc <__kernel_rem_pio2+0x694>)
 8003276:	f7fd f95f 	bl	8000538 <__aeabi_dmul>
 800327a:	460b      	mov	r3, r1
 800327c:	4602      	mov	r2, r0
 800327e:	4629      	mov	r1, r5
 8003280:	4620      	mov	r0, r4
 8003282:	f7fc ffa5 	bl	80001d0 <__aeabi_dsub>
 8003286:	f7fd fbf1 	bl	8000a6c <__aeabi_d2iz>
 800328a:	1c7c      	adds	r4, r7, #1
 800328c:	ab0c      	add	r3, sp, #48	; 0x30
 800328e:	f10a 0a18 	add.w	sl, sl, #24
 8003292:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003296:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800329a:	e7a9      	b.n	80031f0 <__kernel_rem_pio2+0x3a8>
 800329c:	4620      	mov	r0, r4
 800329e:	4629      	mov	r1, r5
 80032a0:	f7fd fbe4 	bl	8000a6c <__aeabi_d2iz>
 80032a4:	ab0c      	add	r3, sp, #48	; 0x30
 80032a6:	463c      	mov	r4, r7
 80032a8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80032ac:	e7a0      	b.n	80031f0 <__kernel_rem_pio2+0x3a8>
 80032ae:	ab0c      	add	r3, sp, #48	; 0x30
 80032b0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80032b4:	f7fd f8da 	bl	800046c <__aeabi_i2d>
 80032b8:	4632      	mov	r2, r6
 80032ba:	463b      	mov	r3, r7
 80032bc:	f7fd f93c 	bl	8000538 <__aeabi_dmul>
 80032c0:	2200      	movs	r2, #0
 80032c2:	e969 0102 	strd	r0, r1, [r9, #-8]!
 80032c6:	4b86      	ldr	r3, [pc, #536]	; (80034e0 <__kernel_rem_pio2+0x698>)
 80032c8:	4630      	mov	r0, r6
 80032ca:	4639      	mov	r1, r7
 80032cc:	f7fd f934 	bl	8000538 <__aeabi_dmul>
 80032d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80032d4:	4606      	mov	r6, r0
 80032d6:	460f      	mov	r7, r1
 80032d8:	e798      	b.n	800320c <__kernel_rem_pio2+0x3c4>
 80032da:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80032de:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80032e2:	f7fd f929 	bl	8000538 <__aeabi_dmul>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032ee:	f7fc ff71 	bl	80001d4 <__adddf3>
 80032f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80032f6:	f108 0801 	add.w	r8, r8, #1
 80032fa:	9b00      	ldr	r3, [sp, #0]
 80032fc:	4598      	cmp	r8, r3
 80032fe:	dc02      	bgt.n	8003306 <__kernel_rem_pio2+0x4be>
 8003300:	9b04      	ldr	r3, [sp, #16]
 8003302:	4598      	cmp	r8, r3
 8003304:	dde9      	ble.n	80032da <__kernel_rem_pio2+0x492>
 8003306:	9b04      	ldr	r3, [sp, #16]
 8003308:	ed9d 7b06 	vldr	d7, [sp, #24]
 800330c:	3301      	adds	r3, #1
 800330e:	ecaa 7b02 	vstmia	sl!, {d7}
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	e784      	b.n	8003220 <__kernel_rem_pio2+0x3d8>
 8003316:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003318:	2b03      	cmp	r3, #3
 800331a:	d85d      	bhi.n	80033d8 <__kernel_rem_pio2+0x590>
 800331c:	e8df f003 	tbb	[pc, r3]
 8003320:	0226264b 	.word	0x0226264b
 8003324:	ab98      	add	r3, sp, #608	; 0x260
 8003326:	441d      	add	r5, r3
 8003328:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800332c:	462e      	mov	r6, r5
 800332e:	46a2      	mov	sl, r4
 8003330:	f1ba 0f00 	cmp.w	sl, #0
 8003334:	dc6e      	bgt.n	8003414 <__kernel_rem_pio2+0x5cc>
 8003336:	462e      	mov	r6, r5
 8003338:	46a2      	mov	sl, r4
 800333a:	f1ba 0f01 	cmp.w	sl, #1
 800333e:	f300 808a 	bgt.w	8003456 <__kernel_rem_pio2+0x60e>
 8003342:	2000      	movs	r0, #0
 8003344:	2100      	movs	r1, #0
 8003346:	2c01      	cmp	r4, #1
 8003348:	f300 80a6 	bgt.w	8003498 <__kernel_rem_pio2+0x650>
 800334c:	f1bb 0f00 	cmp.w	fp, #0
 8003350:	f040 80a8 	bne.w	80034a4 <__kernel_rem_pio2+0x65c>
 8003354:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8003358:	9c02      	ldr	r4, [sp, #8]
 800335a:	e9c4 2300 	strd	r2, r3, [r4]
 800335e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8003362:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8003366:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800336a:	e035      	b.n	80033d8 <__kernel_rem_pio2+0x590>
 800336c:	3508      	adds	r5, #8
 800336e:	ab48      	add	r3, sp, #288	; 0x120
 8003370:	441d      	add	r5, r3
 8003372:	4626      	mov	r6, r4
 8003374:	2000      	movs	r0, #0
 8003376:	2100      	movs	r1, #0
 8003378:	2e00      	cmp	r6, #0
 800337a:	da3c      	bge.n	80033f6 <__kernel_rem_pio2+0x5ae>
 800337c:	f1bb 0f00 	cmp.w	fp, #0
 8003380:	d03f      	beq.n	8003402 <__kernel_rem_pio2+0x5ba>
 8003382:	4602      	mov	r2, r0
 8003384:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003388:	9d02      	ldr	r5, [sp, #8]
 800338a:	e9c5 2300 	strd	r2, r3, [r5]
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003396:	f7fc ff1b 	bl	80001d0 <__aeabi_dsub>
 800339a:	ae4a      	add	r6, sp, #296	; 0x128
 800339c:	2501      	movs	r5, #1
 800339e:	42ac      	cmp	r4, r5
 80033a0:	da32      	bge.n	8003408 <__kernel_rem_pio2+0x5c0>
 80033a2:	f1bb 0f00 	cmp.w	fp, #0
 80033a6:	d002      	beq.n	80033ae <__kernel_rem_pio2+0x566>
 80033a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80033ac:	4619      	mov	r1, r3
 80033ae:	9b02      	ldr	r3, [sp, #8]
 80033b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80033b4:	e010      	b.n	80033d8 <__kernel_rem_pio2+0x590>
 80033b6:	ab98      	add	r3, sp, #608	; 0x260
 80033b8:	441d      	add	r5, r3
 80033ba:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80033be:	2000      	movs	r0, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	2c00      	cmp	r4, #0
 80033c4:	da11      	bge.n	80033ea <__kernel_rem_pio2+0x5a2>
 80033c6:	f1bb 0f00 	cmp.w	fp, #0
 80033ca:	d002      	beq.n	80033d2 <__kernel_rem_pio2+0x58a>
 80033cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80033d0:	4619      	mov	r1, r3
 80033d2:	9b02      	ldr	r3, [sp, #8]
 80033d4:	e9c3 0100 	strd	r0, r1, [r3]
 80033d8:	9b03      	ldr	r3, [sp, #12]
 80033da:	f003 0007 	and.w	r0, r3, #7
 80033de:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80033e2:	ecbd 8b02 	vpop	{d8}
 80033e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ea:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80033ee:	f7fc fef1 	bl	80001d4 <__adddf3>
 80033f2:	3c01      	subs	r4, #1
 80033f4:	e7e5      	b.n	80033c2 <__kernel_rem_pio2+0x57a>
 80033f6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80033fa:	f7fc feeb 	bl	80001d4 <__adddf3>
 80033fe:	3e01      	subs	r6, #1
 8003400:	e7ba      	b.n	8003378 <__kernel_rem_pio2+0x530>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	e7bf      	b.n	8003388 <__kernel_rem_pio2+0x540>
 8003408:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800340c:	f7fc fee2 	bl	80001d4 <__adddf3>
 8003410:	3501      	adds	r5, #1
 8003412:	e7c4      	b.n	800339e <__kernel_rem_pio2+0x556>
 8003414:	ed16 7b02 	vldr	d7, [r6, #-8]
 8003418:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800341c:	ec53 2b17 	vmov	r2, r3, d7
 8003420:	4640      	mov	r0, r8
 8003422:	4649      	mov	r1, r9
 8003424:	ed8d 7b00 	vstr	d7, [sp]
 8003428:	f7fc fed4 	bl	80001d4 <__adddf3>
 800342c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4640      	mov	r0, r8
 8003436:	4649      	mov	r1, r9
 8003438:	f7fc feca 	bl	80001d0 <__aeabi_dsub>
 800343c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003440:	f7fc fec8 	bl	80001d4 <__adddf3>
 8003444:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003448:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800344c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003450:	ed06 7b02 	vstr	d7, [r6, #-8]
 8003454:	e76c      	b.n	8003330 <__kernel_rem_pio2+0x4e8>
 8003456:	ed16 7b02 	vldr	d7, [r6, #-8]
 800345a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800345e:	ec53 2b17 	vmov	r2, r3, d7
 8003462:	4640      	mov	r0, r8
 8003464:	4649      	mov	r1, r9
 8003466:	ed8d 7b00 	vstr	d7, [sp]
 800346a:	f7fc feb3 	bl	80001d4 <__adddf3>
 800346e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4640      	mov	r0, r8
 8003478:	4649      	mov	r1, r9
 800347a:	f7fc fea9 	bl	80001d0 <__aeabi_dsub>
 800347e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003482:	f7fc fea7 	bl	80001d4 <__adddf3>
 8003486:	ed9d 7b04 	vldr	d7, [sp, #16]
 800348a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800348e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003492:	ed06 7b02 	vstr	d7, [r6, #-8]
 8003496:	e750      	b.n	800333a <__kernel_rem_pio2+0x4f2>
 8003498:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800349c:	f7fc fe9a 	bl	80001d4 <__adddf3>
 80034a0:	3c01      	subs	r4, #1
 80034a2:	e750      	b.n	8003346 <__kernel_rem_pio2+0x4fe>
 80034a4:	9a02      	ldr	r2, [sp, #8]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6110      	str	r0, [r2, #16]
 80034ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80034b2:	6053      	str	r3, [r2, #4]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6093      	str	r3, [r2, #8]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80034be:	60d3      	str	r3, [r2, #12]
 80034c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80034c4:	6153      	str	r3, [r2, #20]
 80034c6:	e787      	b.n	80033d8 <__kernel_rem_pio2+0x590>
 80034c8:	00000000 	.word	0x00000000
 80034cc:	3ff00000 	.word	0x3ff00000
	...
 80034d8:	08008cc0 	.word	0x08008cc0
 80034dc:	41700000 	.word	0x41700000
 80034e0:	3e700000 	.word	0x3e700000
 80034e4:	00000000 	.word	0x00000000

080034e8 <__kernel_sin>:
 80034e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ec:	ec55 4b10 	vmov	r4, r5, d0
 80034f0:	b085      	sub	sp, #20
 80034f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80034f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80034fa:	ed8d 1b00 	vstr	d1, [sp]
 80034fe:	9002      	str	r0, [sp, #8]
 8003500:	da06      	bge.n	8003510 <__kernel_sin+0x28>
 8003502:	ee10 0a10 	vmov	r0, s0
 8003506:	4629      	mov	r1, r5
 8003508:	f7fd fab0 	bl	8000a6c <__aeabi_d2iz>
 800350c:	2800      	cmp	r0, #0
 800350e:	d051      	beq.n	80035b4 <__kernel_sin+0xcc>
 8003510:	4622      	mov	r2, r4
 8003512:	462b      	mov	r3, r5
 8003514:	4620      	mov	r0, r4
 8003516:	4629      	mov	r1, r5
 8003518:	f7fd f80e 	bl	8000538 <__aeabi_dmul>
 800351c:	4682      	mov	sl, r0
 800351e:	468b      	mov	fp, r1
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fd f806 	bl	8000538 <__aeabi_dmul>
 800352c:	a341      	add	r3, pc, #260	; (adr r3, 8003634 <__kernel_sin+0x14c>)
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	4680      	mov	r8, r0
 8003534:	4689      	mov	r9, r1
 8003536:	4650      	mov	r0, sl
 8003538:	4659      	mov	r1, fp
 800353a:	f7fc fffd 	bl	8000538 <__aeabi_dmul>
 800353e:	a33f      	add	r3, pc, #252	; (adr r3, 800363c <__kernel_sin+0x154>)
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	f7fc fe44 	bl	80001d0 <__aeabi_dsub>
 8003548:	4652      	mov	r2, sl
 800354a:	465b      	mov	r3, fp
 800354c:	f7fc fff4 	bl	8000538 <__aeabi_dmul>
 8003550:	a33c      	add	r3, pc, #240	; (adr r3, 8003644 <__kernel_sin+0x15c>)
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	f7fc fe3d 	bl	80001d4 <__adddf3>
 800355a:	4652      	mov	r2, sl
 800355c:	465b      	mov	r3, fp
 800355e:	f7fc ffeb 	bl	8000538 <__aeabi_dmul>
 8003562:	a33a      	add	r3, pc, #232	; (adr r3, 800364c <__kernel_sin+0x164>)
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f7fc fe32 	bl	80001d0 <__aeabi_dsub>
 800356c:	4652      	mov	r2, sl
 800356e:	465b      	mov	r3, fp
 8003570:	f7fc ffe2 	bl	8000538 <__aeabi_dmul>
 8003574:	a337      	add	r3, pc, #220	; (adr r3, 8003654 <__kernel_sin+0x16c>)
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	f7fc fe2b 	bl	80001d4 <__adddf3>
 800357e:	9b02      	ldr	r3, [sp, #8]
 8003580:	4606      	mov	r6, r0
 8003582:	460f      	mov	r7, r1
 8003584:	b9db      	cbnz	r3, 80035be <__kernel_sin+0xd6>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4650      	mov	r0, sl
 800358c:	4659      	mov	r1, fp
 800358e:	f7fc ffd3 	bl	8000538 <__aeabi_dmul>
 8003592:	a325      	add	r3, pc, #148	; (adr r3, 8003628 <__kernel_sin+0x140>)
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f7fc fe1a 	bl	80001d0 <__aeabi_dsub>
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	f7fc ffca 	bl	8000538 <__aeabi_dmul>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4620      	mov	r0, r4
 80035aa:	4629      	mov	r1, r5
 80035ac:	f7fc fe12 	bl	80001d4 <__adddf3>
 80035b0:	4604      	mov	r4, r0
 80035b2:	460d      	mov	r5, r1
 80035b4:	ec45 4b10 	vmov	d0, r4, r5
 80035b8:	b005      	add	sp, #20
 80035ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035be:	2200      	movs	r2, #0
 80035c0:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <__kernel_sin+0x148>)
 80035c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035c6:	f7fc ffb7 	bl	8000538 <__aeabi_dmul>
 80035ca:	4632      	mov	r2, r6
 80035cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035d0:	463b      	mov	r3, r7
 80035d2:	4640      	mov	r0, r8
 80035d4:	4649      	mov	r1, r9
 80035d6:	f7fc ffaf 	bl	8000538 <__aeabi_dmul>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035e2:	f7fc fdf5 	bl	80001d0 <__aeabi_dsub>
 80035e6:	4652      	mov	r2, sl
 80035e8:	465b      	mov	r3, fp
 80035ea:	f7fc ffa5 	bl	8000538 <__aeabi_dmul>
 80035ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035f2:	f7fc fded 	bl	80001d0 <__aeabi_dsub>
 80035f6:	a30c      	add	r3, pc, #48	; (adr r3, 8003628 <__kernel_sin+0x140>)
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	4606      	mov	r6, r0
 80035fe:	460f      	mov	r7, r1
 8003600:	4640      	mov	r0, r8
 8003602:	4649      	mov	r1, r9
 8003604:	f7fc ff98 	bl	8000538 <__aeabi_dmul>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4630      	mov	r0, r6
 800360e:	4639      	mov	r1, r7
 8003610:	f7fc fde0 	bl	80001d4 <__adddf3>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4620      	mov	r0, r4
 800361a:	4629      	mov	r1, r5
 800361c:	f7fc fdd8 	bl	80001d0 <__aeabi_dsub>
 8003620:	e7c6      	b.n	80035b0 <__kernel_sin+0xc8>
 8003622:	bf00      	nop
 8003624:	f3af 8000 	nop.w
 8003628:	55555549 	.word	0x55555549
 800362c:	3fc55555 	.word	0x3fc55555
 8003630:	3fe00000 	.word	0x3fe00000
 8003634:	5acfd57c 	.word	0x5acfd57c
 8003638:	3de5d93a 	.word	0x3de5d93a
 800363c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003640:	3e5ae5e6 	.word	0x3e5ae5e6
 8003644:	57b1fe7d 	.word	0x57b1fe7d
 8003648:	3ec71de3 	.word	0x3ec71de3
 800364c:	19c161d5 	.word	0x19c161d5
 8003650:	3f2a01a0 	.word	0x3f2a01a0
 8003654:	1110f8a6 	.word	0x1110f8a6
 8003658:	3f811111 	.word	0x3f811111

0800365c <fabs>:
 800365c:	ec53 2b10 	vmov	r2, r3, d0
 8003660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003664:	ec43 2b10 	vmov	d0, r2, r3
 8003668:	4770      	bx	lr
 800366a:	0000      	movs	r0, r0
 800366c:	0000      	movs	r0, r0
	...

08003670 <floor>:
 8003670:	ec51 0b10 	vmov	r0, r1, d0
 8003674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003678:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800367c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003680:	2e13      	cmp	r6, #19
 8003682:	ee10 8a10 	vmov	r8, s0
 8003686:	460c      	mov	r4, r1
 8003688:	ee10 5a10 	vmov	r5, s0
 800368c:	dc35      	bgt.n	80036fa <floor+0x8a>
 800368e:	2e00      	cmp	r6, #0
 8003690:	da17      	bge.n	80036c2 <floor+0x52>
 8003692:	a335      	add	r3, pc, #212	; (adr r3, 8003768 <floor+0xf8>)
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	f7fc fd9c 	bl	80001d4 <__adddf3>
 800369c:	2200      	movs	r2, #0
 800369e:	2300      	movs	r3, #0
 80036a0:	f7fd f9da 	bl	8000a58 <__aeabi_dcmpgt>
 80036a4:	b150      	cbz	r0, 80036bc <floor+0x4c>
 80036a6:	2c00      	cmp	r4, #0
 80036a8:	da5a      	bge.n	8003760 <floor+0xf0>
 80036aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80036ae:	ea53 0308 	orrs.w	r3, r3, r8
 80036b2:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <floor+0x100>)
 80036b4:	f04f 0500 	mov.w	r5, #0
 80036b8:	bf18      	it	ne
 80036ba:	461c      	movne	r4, r3
 80036bc:	4621      	mov	r1, r4
 80036be:	4628      	mov	r0, r5
 80036c0:	e025      	b.n	800370e <floor+0x9e>
 80036c2:	4f2c      	ldr	r7, [pc, #176]	; (8003774 <floor+0x104>)
 80036c4:	4137      	asrs	r7, r6
 80036c6:	ea01 0307 	and.w	r3, r1, r7
 80036ca:	4303      	orrs	r3, r0
 80036cc:	d01f      	beq.n	800370e <floor+0x9e>
 80036ce:	a326      	add	r3, pc, #152	; (adr r3, 8003768 <floor+0xf8>)
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f7fc fd7e 	bl	80001d4 <__adddf3>
 80036d8:	2200      	movs	r2, #0
 80036da:	2300      	movs	r3, #0
 80036dc:	f7fd f9bc 	bl	8000a58 <__aeabi_dcmpgt>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d0eb      	beq.n	80036bc <floor+0x4c>
 80036e4:	2c00      	cmp	r4, #0
 80036e6:	bfbe      	ittt	lt
 80036e8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80036ec:	fa43 f606 	asrlt.w	r6, r3, r6
 80036f0:	19a4      	addlt	r4, r4, r6
 80036f2:	ea24 0407 	bic.w	r4, r4, r7
 80036f6:	2500      	movs	r5, #0
 80036f8:	e7e0      	b.n	80036bc <floor+0x4c>
 80036fa:	2e33      	cmp	r6, #51	; 0x33
 80036fc:	dd0b      	ble.n	8003716 <floor+0xa6>
 80036fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003702:	d104      	bne.n	800370e <floor+0x9e>
 8003704:	ee10 2a10 	vmov	r2, s0
 8003708:	460b      	mov	r3, r1
 800370a:	f7fc fd63 	bl	80001d4 <__adddf3>
 800370e:	ec41 0b10 	vmov	d0, r0, r1
 8003712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003716:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800371a:	f04f 33ff 	mov.w	r3, #4294967295
 800371e:	fa23 f707 	lsr.w	r7, r3, r7
 8003722:	4238      	tst	r0, r7
 8003724:	d0f3      	beq.n	800370e <floor+0x9e>
 8003726:	a310      	add	r3, pc, #64	; (adr r3, 8003768 <floor+0xf8>)
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f7fc fd52 	bl	80001d4 <__adddf3>
 8003730:	2200      	movs	r2, #0
 8003732:	2300      	movs	r3, #0
 8003734:	f7fd f990 	bl	8000a58 <__aeabi_dcmpgt>
 8003738:	2800      	cmp	r0, #0
 800373a:	d0bf      	beq.n	80036bc <floor+0x4c>
 800373c:	2c00      	cmp	r4, #0
 800373e:	da02      	bge.n	8003746 <floor+0xd6>
 8003740:	2e14      	cmp	r6, #20
 8003742:	d103      	bne.n	800374c <floor+0xdc>
 8003744:	3401      	adds	r4, #1
 8003746:	ea25 0507 	bic.w	r5, r5, r7
 800374a:	e7b7      	b.n	80036bc <floor+0x4c>
 800374c:	2301      	movs	r3, #1
 800374e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003752:	fa03 f606 	lsl.w	r6, r3, r6
 8003756:	4435      	add	r5, r6
 8003758:	45a8      	cmp	r8, r5
 800375a:	bf88      	it	hi
 800375c:	18e4      	addhi	r4, r4, r3
 800375e:	e7f2      	b.n	8003746 <floor+0xd6>
 8003760:	2500      	movs	r5, #0
 8003762:	462c      	mov	r4, r5
 8003764:	e7aa      	b.n	80036bc <floor+0x4c>
 8003766:	bf00      	nop
 8003768:	8800759c 	.word	0x8800759c
 800376c:	7e37e43c 	.word	0x7e37e43c
 8003770:	bff00000 	.word	0xbff00000
 8003774:	000fffff 	.word	0x000fffff

08003778 <matherr>:
 8003778:	2000      	movs	r0, #0
 800377a:	4770      	bx	lr

0800377c <rint>:
 800377c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800377e:	ec51 0b10 	vmov	r0, r1, d0
 8003782:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8003786:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800378a:	2e13      	cmp	r6, #19
 800378c:	ee10 7a10 	vmov	r7, s0
 8003790:	460b      	mov	r3, r1
 8003792:	4602      	mov	r2, r0
 8003794:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8003798:	dc58      	bgt.n	800384c <rint+0xd0>
 800379a:	2e00      	cmp	r6, #0
 800379c:	da2b      	bge.n	80037f6 <rint+0x7a>
 800379e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80037a2:	4302      	orrs	r2, r0
 80037a4:	d023      	beq.n	80037ee <rint+0x72>
 80037a6:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80037aa:	4302      	orrs	r2, r0
 80037ac:	4251      	negs	r1, r2
 80037ae:	4311      	orrs	r1, r2
 80037b0:	0b09      	lsrs	r1, r1, #12
 80037b2:	0c5b      	lsrs	r3, r3, #17
 80037b4:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80037b8:	045b      	lsls	r3, r3, #17
 80037ba:	ea41 0703 	orr.w	r7, r1, r3
 80037be:	4b31      	ldr	r3, [pc, #196]	; (8003884 <rint+0x108>)
 80037c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80037c4:	4639      	mov	r1, r7
 80037c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80037ca:	ee10 0a10 	vmov	r0, s0
 80037ce:	4632      	mov	r2, r6
 80037d0:	463b      	mov	r3, r7
 80037d2:	f7fc fcff 	bl	80001d4 <__adddf3>
 80037d6:	e9cd 0100 	strd	r0, r1, [sp]
 80037da:	463b      	mov	r3, r7
 80037dc:	4632      	mov	r2, r6
 80037de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037e2:	f7fc fcf5 	bl	80001d0 <__aeabi_dsub>
 80037e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80037ea:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 80037ee:	ec41 0b10 	vmov	d0, r0, r1
 80037f2:	b003      	add	sp, #12
 80037f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f6:	4c24      	ldr	r4, [pc, #144]	; (8003888 <rint+0x10c>)
 80037f8:	4134      	asrs	r4, r6
 80037fa:	ea01 0704 	and.w	r7, r1, r4
 80037fe:	4307      	orrs	r7, r0
 8003800:	d0f5      	beq.n	80037ee <rint+0x72>
 8003802:	0861      	lsrs	r1, r4, #1
 8003804:	ea03 0001 	and.w	r0, r3, r1
 8003808:	4302      	orrs	r2, r0
 800380a:	d00b      	beq.n	8003824 <rint+0xa8>
 800380c:	ea23 0101 	bic.w	r1, r3, r1
 8003810:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003814:	2e13      	cmp	r6, #19
 8003816:	fa43 f306 	asr.w	r3, r3, r6
 800381a:	bf0c      	ite	eq
 800381c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8003820:	2200      	movne	r2, #0
 8003822:	430b      	orrs	r3, r1
 8003824:	4619      	mov	r1, r3
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <rint+0x108>)
 8003828:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800382c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003830:	4610      	mov	r0, r2
 8003832:	462b      	mov	r3, r5
 8003834:	4622      	mov	r2, r4
 8003836:	f7fc fccd 	bl	80001d4 <__adddf3>
 800383a:	e9cd 0100 	strd	r0, r1, [sp]
 800383e:	4622      	mov	r2, r4
 8003840:	462b      	mov	r3, r5
 8003842:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003846:	f7fc fcc3 	bl	80001d0 <__aeabi_dsub>
 800384a:	e7d0      	b.n	80037ee <rint+0x72>
 800384c:	2e33      	cmp	r6, #51	; 0x33
 800384e:	dd08      	ble.n	8003862 <rint+0xe6>
 8003850:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003854:	d1cb      	bne.n	80037ee <rint+0x72>
 8003856:	ee10 2a10 	vmov	r2, s0
 800385a:	460b      	mov	r3, r1
 800385c:	f7fc fcba 	bl	80001d4 <__adddf3>
 8003860:	e7c5      	b.n	80037ee <rint+0x72>
 8003862:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8003866:	f04f 34ff 	mov.w	r4, #4294967295
 800386a:	40f4      	lsrs	r4, r6
 800386c:	4220      	tst	r0, r4
 800386e:	d0be      	beq.n	80037ee <rint+0x72>
 8003870:	0861      	lsrs	r1, r4, #1
 8003872:	420f      	tst	r7, r1
 8003874:	bf1f      	itttt	ne
 8003876:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800387a:	ea27 0101 	bicne.w	r1, r7, r1
 800387e:	4132      	asrne	r2, r6
 8003880:	430a      	orrne	r2, r1
 8003882:	e7cf      	b.n	8003824 <rint+0xa8>
 8003884:	08008d10 	.word	0x08008d10
 8003888:	000fffff 	.word	0x000fffff
 800388c:	00000000 	.word	0x00000000

08003890 <scalbn>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	ec55 4b10 	vmov	r4, r5, d0
 8003896:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800389a:	4606      	mov	r6, r0
 800389c:	462b      	mov	r3, r5
 800389e:	b9b2      	cbnz	r2, 80038ce <scalbn+0x3e>
 80038a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80038a4:	4323      	orrs	r3, r4
 80038a6:	d03c      	beq.n	8003922 <scalbn+0x92>
 80038a8:	2200      	movs	r2, #0
 80038aa:	4b33      	ldr	r3, [pc, #204]	; (8003978 <scalbn+0xe8>)
 80038ac:	4629      	mov	r1, r5
 80038ae:	ee10 0a10 	vmov	r0, s0
 80038b2:	f7fc fe41 	bl	8000538 <__aeabi_dmul>
 80038b6:	4a31      	ldr	r2, [pc, #196]	; (800397c <scalbn+0xec>)
 80038b8:	4296      	cmp	r6, r2
 80038ba:	4604      	mov	r4, r0
 80038bc:	460d      	mov	r5, r1
 80038be:	460b      	mov	r3, r1
 80038c0:	da13      	bge.n	80038ea <scalbn+0x5a>
 80038c2:	a329      	add	r3, pc, #164	; (adr r3, 8003968 <scalbn+0xd8>)
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f7fc fe36 	bl	8000538 <__aeabi_dmul>
 80038cc:	e00a      	b.n	80038e4 <scalbn+0x54>
 80038ce:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80038d2:	428a      	cmp	r2, r1
 80038d4:	d10c      	bne.n	80038f0 <scalbn+0x60>
 80038d6:	ee10 2a10 	vmov	r2, s0
 80038da:	462b      	mov	r3, r5
 80038dc:	4620      	mov	r0, r4
 80038de:	4629      	mov	r1, r5
 80038e0:	f7fc fc78 	bl	80001d4 <__adddf3>
 80038e4:	4604      	mov	r4, r0
 80038e6:	460d      	mov	r5, r1
 80038e8:	e01b      	b.n	8003922 <scalbn+0x92>
 80038ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80038ee:	3a36      	subs	r2, #54	; 0x36
 80038f0:	4432      	add	r2, r6
 80038f2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80038f6:	428a      	cmp	r2, r1
 80038f8:	dd0b      	ble.n	8003912 <scalbn+0x82>
 80038fa:	ec45 4b11 	vmov	d1, r4, r5
 80038fe:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003970 <scalbn+0xe0>
 8003902:	f000 f8b7 	bl	8003a74 <copysign>
 8003906:	a31a      	add	r3, pc, #104	; (adr r3, 8003970 <scalbn+0xe0>)
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	ec51 0b10 	vmov	r0, r1, d0
 8003910:	e7da      	b.n	80038c8 <scalbn+0x38>
 8003912:	2a00      	cmp	r2, #0
 8003914:	dd08      	ble.n	8003928 <scalbn+0x98>
 8003916:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800391a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800391e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003922:	ec45 4b10 	vmov	d0, r4, r5
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800392c:	da0d      	bge.n	800394a <scalbn+0xba>
 800392e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003932:	429e      	cmp	r6, r3
 8003934:	ec45 4b11 	vmov	d1, r4, r5
 8003938:	dce1      	bgt.n	80038fe <scalbn+0x6e>
 800393a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8003968 <scalbn+0xd8>
 800393e:	f000 f899 	bl	8003a74 <copysign>
 8003942:	a309      	add	r3, pc, #36	; (adr r3, 8003968 <scalbn+0xd8>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	e7e0      	b.n	800390c <scalbn+0x7c>
 800394a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800394e:	3236      	adds	r2, #54	; 0x36
 8003950:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003954:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003958:	4620      	mov	r0, r4
 800395a:	4629      	mov	r1, r5
 800395c:	2200      	movs	r2, #0
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <scalbn+0xf0>)
 8003960:	e7b2      	b.n	80038c8 <scalbn+0x38>
 8003962:	bf00      	nop
 8003964:	f3af 8000 	nop.w
 8003968:	c2f8f359 	.word	0xc2f8f359
 800396c:	01a56e1f 	.word	0x01a56e1f
 8003970:	8800759c 	.word	0x8800759c
 8003974:	7e37e43c 	.word	0x7e37e43c
 8003978:	43500000 	.word	0x43500000
 800397c:	ffff3cb0 	.word	0xffff3cb0
 8003980:	3c900000 	.word	0x3c900000

08003984 <fabsf>:
 8003984:	ee10 3a10 	vmov	r3, s0
 8003988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800398c:	ee00 3a10 	vmov	s0, r3
 8003990:	4770      	bx	lr

08003992 <finitef>:
 8003992:	ee10 3a10 	vmov	r3, s0
 8003996:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800399a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800399e:	bfac      	ite	ge
 80039a0:	2000      	movge	r0, #0
 80039a2:	2001      	movlt	r0, #1
 80039a4:	4770      	bx	lr
	...

080039a8 <nanf>:
 80039a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80039b0 <nanf+0x8>
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	7fc00000 	.word	0x7fc00000

080039b4 <scalbnf>:
 80039b4:	b508      	push	{r3, lr}
 80039b6:	ee10 2a10 	vmov	r2, s0
 80039ba:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80039be:	ed2d 8b02 	vpush	{d8}
 80039c2:	eef0 0a40 	vmov.f32	s1, s0
 80039c6:	d004      	beq.n	80039d2 <scalbnf+0x1e>
 80039c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80039cc:	d306      	bcc.n	80039dc <scalbnf+0x28>
 80039ce:	ee70 0a00 	vadd.f32	s1, s0, s0
 80039d2:	ecbd 8b02 	vpop	{d8}
 80039d6:	eeb0 0a60 	vmov.f32	s0, s1
 80039da:	bd08      	pop	{r3, pc}
 80039dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039e0:	d21c      	bcs.n	8003a1c <scalbnf+0x68>
 80039e2:	4b1f      	ldr	r3, [pc, #124]	; (8003a60 <scalbnf+0xac>)
 80039e4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003a64 <scalbnf+0xb0>
 80039e8:	4298      	cmp	r0, r3
 80039ea:	ee60 0a27 	vmul.f32	s1, s0, s15
 80039ee:	db10      	blt.n	8003a12 <scalbnf+0x5e>
 80039f0:	ee10 2a90 	vmov	r2, s1
 80039f4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80039f8:	3b19      	subs	r3, #25
 80039fa:	4403      	add	r3, r0
 80039fc:	2bfe      	cmp	r3, #254	; 0xfe
 80039fe:	dd0f      	ble.n	8003a20 <scalbnf+0x6c>
 8003a00:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8003a68 <scalbnf+0xb4>
 8003a04:	eeb0 0a48 	vmov.f32	s0, s16
 8003a08:	f000 f841 	bl	8003a8e <copysignf>
 8003a0c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8003a10:	e7df      	b.n	80039d2 <scalbnf+0x1e>
 8003a12:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003a6c <scalbnf+0xb8>
 8003a16:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003a1a:	e7da      	b.n	80039d2 <scalbnf+0x1e>
 8003a1c:	0ddb      	lsrs	r3, r3, #23
 8003a1e:	e7ec      	b.n	80039fa <scalbnf+0x46>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	dd06      	ble.n	8003a32 <scalbnf+0x7e>
 8003a24:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003a28:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003a2c:	ee00 3a90 	vmov	s1, r3
 8003a30:	e7cf      	b.n	80039d2 <scalbnf+0x1e>
 8003a32:	f113 0f16 	cmn.w	r3, #22
 8003a36:	da06      	bge.n	8003a46 <scalbnf+0x92>
 8003a38:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003a3c:	4298      	cmp	r0, r3
 8003a3e:	dcdf      	bgt.n	8003a00 <scalbnf+0x4c>
 8003a40:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8003a6c <scalbnf+0xb8>
 8003a44:	e7de      	b.n	8003a04 <scalbnf+0x50>
 8003a46:	3319      	adds	r3, #25
 8003a48:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003a4c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003a50:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003a70 <scalbnf+0xbc>
 8003a54:	ee07 3a10 	vmov	s14, r3
 8003a58:	ee67 0a27 	vmul.f32	s1, s14, s15
 8003a5c:	e7b9      	b.n	80039d2 <scalbnf+0x1e>
 8003a5e:	bf00      	nop
 8003a60:	ffff3cb0 	.word	0xffff3cb0
 8003a64:	4c000000 	.word	0x4c000000
 8003a68:	7149f2ca 	.word	0x7149f2ca
 8003a6c:	0da24260 	.word	0x0da24260
 8003a70:	33000000 	.word	0x33000000

08003a74 <copysign>:
 8003a74:	ec53 2b10 	vmov	r2, r3, d0
 8003a78:	ee11 0a90 	vmov	r0, s3
 8003a7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003a80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003a84:	ea41 0300 	orr.w	r3, r1, r0
 8003a88:	ec43 2b10 	vmov	d0, r2, r3
 8003a8c:	4770      	bx	lr

08003a8e <copysignf>:
 8003a8e:	ee10 3a10 	vmov	r3, s0
 8003a92:	ee10 2a90 	vmov	r2, s1
 8003a96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a9a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	ee00 3a10 	vmov	s0, r3
 8003aa4:	4770      	bx	lr
	...

08003aa8 <__errno>:
 8003aa8:	4b01      	ldr	r3, [pc, #4]	; (8003ab0 <__errno+0x8>)
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000038 	.word	0x20000038

08003ab4 <__libc_init_array>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4e0d      	ldr	r6, [pc, #52]	; (8003aec <__libc_init_array+0x38>)
 8003ab8:	4c0d      	ldr	r4, [pc, #52]	; (8003af0 <__libc_init_array+0x3c>)
 8003aba:	1ba4      	subs	r4, r4, r6
 8003abc:	10a4      	asrs	r4, r4, #2
 8003abe:	2500      	movs	r5, #0
 8003ac0:	42a5      	cmp	r5, r4
 8003ac2:	d109      	bne.n	8003ad8 <__libc_init_array+0x24>
 8003ac4:	4e0b      	ldr	r6, [pc, #44]	; (8003af4 <__libc_init_array+0x40>)
 8003ac6:	4c0c      	ldr	r4, [pc, #48]	; (8003af8 <__libc_init_array+0x44>)
 8003ac8:	f000 f818 	bl	8003afc <_init>
 8003acc:	1ba4      	subs	r4, r4, r6
 8003ace:	10a4      	asrs	r4, r4, #2
 8003ad0:	2500      	movs	r5, #0
 8003ad2:	42a5      	cmp	r5, r4
 8003ad4:	d105      	bne.n	8003ae2 <__libc_init_array+0x2e>
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003adc:	4798      	blx	r3
 8003ade:	3501      	adds	r5, #1
 8003ae0:	e7ee      	b.n	8003ac0 <__libc_init_array+0xc>
 8003ae2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ae6:	4798      	blx	r3
 8003ae8:	3501      	adds	r5, #1
 8003aea:	e7f2      	b.n	8003ad2 <__libc_init_array+0x1e>
 8003aec:	08008d20 	.word	0x08008d20
 8003af0:	08008d20 	.word	0x08008d20
 8003af4:	08008d20 	.word	0x08008d20
 8003af8:	08008d24 	.word	0x08008d24

08003afc <_init>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	bf00      	nop
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr

08003b08 <_fini>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr
