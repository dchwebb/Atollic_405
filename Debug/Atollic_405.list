
Atollic_405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005208  08003950  08003950  00013950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008b5c  08008b5c  00018b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000000  08008b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
  7 .bss          0000404c  2000009c  2000009c  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200040e8  200040e8  0002009c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002709  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000563  00000000  00000000  000227d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000e0  00000000  00000000  00022d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00022e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000008f4  00000000  00000000  00022ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000150a  00000000  00000000  000237c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024cce  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000008d0  00000000  00000000  00024d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002561c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003934 	.word	0x08003934

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	08003934 	.word	0x08003934

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000b66:	4909      	ldr	r1, [pc, #36]	; (8000b8c <NVIC_EnableIRQ+0x30>)
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	095b      	lsrs	r3, r3, #5
 8000b6e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b72:	f002 021f 	and.w	r2, r2, #31
 8000b76:	2001      	movs	r0, #1
 8000b78:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da0b      	bge.n	8000bbc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000ba4:	490d      	ldr	r1, [pc, #52]	; (8000bdc <NVIC_SetPriority+0x4c>)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	3b04      	subs	r3, #4
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000bba:	e009      	b.n	8000bd0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000bbc:	4908      	ldr	r1, [pc, #32]	; (8000be0 <NVIC_SetPriority+0x50>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <_Z18SystemClock_Configv>:
1110: system clock divided by 256
1111: system clock divided by 512
*/

void SystemClock_Config(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
	uint32_t temp = 0x00000000;
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]

	/* Enable Power Control clock */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;   // Enable PWREN bit (page - 183 of RM)
 8000bee:	4a3f      	ldr	r2, [pc, #252]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	PWR->CR |= 0x00004000;    //VOS bit = 01 (page - 145 or RM)
 8000bfa:	4a3d      	ldr	r2, [pc, #244]	; (8000cf0 <_Z18SystemClock_Configv+0x10c>)
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <_Z18SystemClock_Configv+0x10c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6013      	str	r3, [r2, #0]
	/**************************************************************************/

#ifdef USE_HSE
	//RCC->CR &= ~0x00000001; // HSI OFF, not guaranteed, but does not matter, may be slight increase in current
	RCC->CR |= 0x00010000;    // HSE ON
 8000c06:	4a39      	ldr	r2, [pc, #228]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c08:	4b38      	ldr	r3, [pc, #224]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
	while((RCC->CR & 0x00020000) == 0);   // Wait till HSE is ready
 8000c12:	4b36      	ldr	r3, [pc, #216]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d000      	beq.n	8000c2a <_Z18SystemClock_Configv+0x46>
 8000c28:	e7f3      	b.n	8000c12 <_Z18SystemClock_Configv+0x2e>

	// Set PLL
	temp = 0x00400000;    // PLL source is HSE (PLLSRC bit is set to one)
 8000c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2e:	607b      	str	r3, [r7, #4]
	//RCC->CR &= ~0x00010000; // HSE OFF, not guaranteed, but does not matter, may be slight increase in current
	while((RCC->CR & 0x00000002) == 0);   // Wait till HSI is ready
#endif

	//	Set the clock multipliers and dividers
	temp |= (uint32_t)PLL_M;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)PLL_N << 6);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000c3e:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)PLL_P << 16);
	temp |= ((uint32_t)PLL_Q << 24);
	RCC->PLLCFGR = temp;
 8000c40:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6053      	str	r3, [r2, #4]

	//	Set AHB, APB1 and APB2 prescalars
	temp = RCC->CFGR;
 8000c46:	4b29      	ldr	r3, [pc, #164]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)AHB_PRESCALAR << 4);
	temp |= ((uint32_t)APB1_PRESCALAR << 10);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c52:	607b      	str	r3, [r7, #4]
	temp |= ((uint32_t)APB2_PRESCALAR << 13);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000c5a:	607b      	str	r3, [r7, #4]
	temp |= RCC_CFGR_SW_1;           // Select PLL as SYSCLK
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
	RCC->CFGR = temp;
 8000c64:	4a21      	ldr	r2, [pc, #132]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6093      	str	r3, [r2, #8]

	// The Flash access control register is used to enable/disable the acceleration features and control the Flash memory access time according to CPU frequency
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS; // FLASH_LATENCY_5
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <_Z18SystemClock_Configv+0x110>)
 8000c6c:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <_Z18SystemClock_Configv+0x110>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f043 0305 	orr.w	r3, r3, #5
 8000c74:	6013      	str	r3, [r2, #0]

	// Switch ON the PLL
	RCC->CR |= RCC_CR_PLLON;    // PLL ON
 8000c76:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c80:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);   // Wait till PLL is ready
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf0c      	ite	eq
 8000c8e:	2301      	moveq	r3, #1
 8000c90:	2300      	movne	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d000      	beq.n	8000c9a <_Z18SystemClock_Configv+0xb6>
 8000c98:	e7f3      	b.n	8000c82 <_Z18SystemClock_Configv+0x9e>

	// wait till PLL is really used as SYSCLK
	while((RCC->CFGR & RCC_CFGR_SWS_PLL) == 0); // System clock switch status SWS = 0b10 = PLL is really selected
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <_Z18SystemClock_Configv+0x108>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf0c      	ite	eq
 8000ca6:	2301      	moveq	r3, #1
 8000ca8:	2300      	movne	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d000      	beq.n	8000cb2 <_Z18SystemClock_Configv+0xce>
 8000cb0:	e7f3      	b.n	8000c9a <_Z18SystemClock_Configv+0xb6>

	// STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported
	volatile uint32_t idNumber = DBGMCU->IDCODE;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_Z18SystemClock_Configv+0x114>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	603b      	str	r3, [r7, #0]
	idNumber = idNumber >> 16;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	0c1b      	lsrs	r3, r3, #16
 8000cbc:	603b      	str	r3, [r7, #0]

	// Enable the Flash prefetch
	if(idNumber == 0x1001)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	f241 0201 	movw	r2, #4097	; 0x1001
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	bf0c      	ite	eq
 8000cc8:	2301      	moveq	r3, #1
 8000cca:	2300      	movne	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <_Z18SystemClock_Configv+0xfa>
	{
	  FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <_Z18SystemClock_Configv+0x110>)
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_Z18SystemClock_Configv+0x110>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6013      	str	r3, [r2, #0]
	}
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000
 8000cf4:	40023c00 	.word	0x40023c00
 8000cf8:	e0042000 	.word	0xe0042000

08000cfc <_Z7InitDACv>:
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;			// Enable SysTick interrupt
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;			// Enable SysTick
}

void InitDAC()
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	// Once the DAC channelx is enabled, the corresponding GPIO pin (PA4 or PA5) is automatically connected to the analog converter output (DAC_OUTx).
	// In order to avoid parasitic consumption, the PA4 or PA5 pin should first be configured to analog (AIN).

	// Enable DAC and GPIO Clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// Enable GPIO Clock
 8000d00:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <_Z7InitDACv+0x88>)
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <_Z7InitDACv+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;		// Enable DAC Clock
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <_Z7InitDACv+0x88>)
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <_Z7InitDACv+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40

	DAC->CR |= DAC_CR_EN1;			// Enable DAC using PA4 (DAC_OUT1)
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_BOFF1;		// Enable DAC channel output buffer to reduce the output impedance
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TEN1;			// DAC 1 enable trigger
 8000d30:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TSEL1;		// Set trigger to software (0b111: Software trigger)
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000d46:	6013      	str	r3, [r2, #0]

	DAC->CR |= DAC_CR_EN2;			// Enable DAC using PA5 (DAC_OUT2)
 8000d48:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_BOFF2;		// Enable DAC channel output buffer
 8000d54:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5e:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TEN2;			// DAC 2 enable trigger
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6a:	6013      	str	r3, [r2, #0]
	DAC->CR |= DAC_CR_TSEL2;		// Set trigger to software (0b111: Software trigger)
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <_Z7InitDACv+0x8c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000d76:	6013      	str	r3, [r2, #0]

}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007400 	.word	0x40007400

08000d8c <_Z6InitIOv>:


void InitIO()
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	// PC6 Button in
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;			// reset and clock control - advanced high performamnce bus - GPIO port C
 8000d90:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <_Z6InitIOv+0x34>)
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <_Z6InitIOv+0x34>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~(GPIO_MODER_MODER6);			// input mode is default
 8000d9c:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <_Z6InitIOv+0x38>)
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <_Z6InitIOv+0x38>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000da6:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR6_0;			// Set pin to pull up
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <_Z6InitIOv+0x38>)
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <_Z6InitIOv+0x38>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db2:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR |= EXTI_RTSR_TR13;					// Enable rising edge trigger for line 13
	EXTI->IMR |= EXTI_IMR_MR13;						// Activate interrupt using mask register 13

	NVIC_SetPriority(EXTI15_10_IRQn, 3);
	NVIC_EnableIRQ(EXTI15_10_IRQn);*/
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <_Z9InitTimerv>:


void InitTimer()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	//	Setup Timer 3 on an interrupt to trigger sample loading
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;		// Enable Timer 3
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <_Z9InitTimerv+0x6c>)
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <_Z9InitTimerv+0x6c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = (SystemCoreClock / SAMPLERATE) / 4;	// Set prescaler to fire at sample rate - this is divided by 4 to match the APB2 prescaler
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <_Z9InitTimerv+0x70>)
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <_Z9InitTimerv+0x74>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4918      	ldr	r1, [pc, #96]	; (8000e40 <_Z9InitTimerv+0x78>)
 8000de0:	fba1 1303 	umull	r1, r3, r1, r3
 8000de4:	0c9b      	lsrs	r3, r3, #18
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	8513      	strh	r3, [r2, #40]	; 0x28
	TIM3->ARR = 1; //SystemCoreClock / 48000 - 1;	// Set maximum count value (auto reload register) - set to system clock / sampling rate
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <_Z9InitTimerv+0x70>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c

	SET_BIT(TIM3->DIER, TIM_DIER_UIE);				//  DMA/interrupt enable register
 8000df0:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <_Z9InitTimerv+0x70>)
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <_Z9InitTimerv+0x70>)
 8000df4:	899b      	ldrh	r3, [r3, #12]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	8193      	strh	r3, [r2, #12]
	NVIC_EnableIRQ(TIM3_IRQn);
 8000e00:	201d      	movs	r0, #29
 8000e02:	f7ff feab 	bl	8000b5c <NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 6);
 8000e06:	2106      	movs	r1, #6
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fec1 	bl	8000b90 <NVIC_SetPriority>

	SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <_Z9InitTimerv+0x70>)
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <_Z9InitTimerv+0x70>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	8013      	strh	r3, [r2, #0]
	SET_BIT(TIM3->EGR, TIM_EGR_UG);
 8000e1e:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <_Z9InitTimerv+0x70>)
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <_Z9InitTimerv+0x70>)
 8000e22:	8a9b      	ldrh	r3, [r3, #20]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	8293      	strh	r3, [r2, #20]
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40000400 	.word	0x40000400
 8000e3c:	20000020 	.word	0x20000020
 8000e40:	e90452d5 	.word	0xe90452d5

08000e44 <_Z7InitADCv>:

void InitADC(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	//	Setup Timer 2 to trigger ADC
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// Enable Timer 2 clock
 8000e48:	4a93      	ldr	r2, [pc, #588]	; (8001098 <_Z7InitADCv+0x254>)
 8000e4a:	4b93      	ldr	r3, [pc, #588]	; (8001098 <_Z7InitADCv+0x254>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->CR2 |= TIM_CR2_MMS_2;						// 100: Compare - OC1REF signal is used as trigger output (TRGO)
 8000e54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5c:	889b      	ldrh	r3, [r3, #4]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	8093      	strh	r3, [r2, #4]
	TIM2->PSC = 20 - 1;								// Prescaler
 8000e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e6c:	2213      	movs	r2, #19
 8000e6e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100 - 1;							// Auto-reload register (ie reset counter) divided by 100
 8000e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e74:	2263      	movs	r2, #99	; 0x63
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 50 - 1;							// Capture and compare - ie when counter hits this number PWM high
 8000e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7c:	2231      	movs	r2, #49	; 0x31
 8000e7e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E;					// Capture/Compare 1 output enable
 8000e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e88:	8c1b      	ldrh	r3, [r3, #32]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	8413      	strh	r3, [r2, #32]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 |TIM_CCMR1_OC1M_2;	// 110 PWM Mode 1
 8000e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9c:	8b1b      	ldrh	r3, [r3, #24]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	8313      	strh	r3, [r2, #24]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	8013      	strh	r3, [r2, #0]

	// Enable ADC2 and GPIO clock sources
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000ebc:	4a76      	ldr	r2, [pc, #472]	; (8001098 <_Z7InitADCv+0x254>)
 8000ebe:	4b76      	ldr	r3, [pc, #472]	; (8001098 <_Z7InitADCv+0x254>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000ec8:	4a73      	ldr	r2, [pc, #460]	; (8001098 <_Z7InitADCv+0x254>)
 8000eca:	4b73      	ldr	r3, [pc, #460]	; (8001098 <_Z7InitADCv+0x254>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8000ed4:	4a70      	ldr	r2, [pc, #448]	; (8001098 <_Z7InitADCv+0x254>)
 8000ed6:	4b70      	ldr	r3, [pc, #448]	; (8001098 <_Z7InitADCv+0x254>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6453      	str	r3, [r2, #68]	; 0x44

	// Enable ADC on PB0 mode: ADC12_IN8; PB1 mode: ADC12_IN9; PA1 mode: ADC123_IN1; PA2 mode: ADC123_IN2, PA3 mode: ADC123_IN3
	GPIOB->MODER |= GPIO_MODER_MODER1;				// Set PB1 to Analog mode (0b11)
 8000ee0:	4a6e      	ldr	r2, [pc, #440]	; (800109c <_Z7InitADCv+0x258>)
 8000ee2:	4b6e      	ldr	r3, [pc, #440]	; (800109c <_Z7InitADCv+0x258>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f043 030c 	orr.w	r3, r3, #12
 8000eea:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER0;				// Set PB0 to Analog mode (0b11)
 8000eec:	4a6b      	ldr	r2, [pc, #428]	; (800109c <_Z7InitADCv+0x258>)
 8000eee:	4b6b      	ldr	r3, [pc, #428]	; (800109c <_Z7InitADCv+0x258>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f043 0303 	orr.w	r3, r3, #3
 8000ef6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER1;				// Set PA1 to Analog mode (0b11)
 8000ef8:	4a69      	ldr	r2, [pc, #420]	; (80010a0 <_Z7InitADCv+0x25c>)
 8000efa:	4b69      	ldr	r3, [pc, #420]	; (80010a0 <_Z7InitADCv+0x25c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f043 030c 	orr.w	r3, r3, #12
 8000f02:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2;				// Set PA2 to Analog mode (0b11)
 8000f04:	4a66      	ldr	r2, [pc, #408]	; (80010a0 <_Z7InitADCv+0x25c>)
 8000f06:	4b66      	ldr	r3, [pc, #408]	; (80010a0 <_Z7InitADCv+0x25c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000f0e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER3;				// Set PA3 to Analog mode (0b11)
 8000f10:	4a63      	ldr	r2, [pc, #396]	; (80010a0 <_Z7InitADCv+0x25c>)
 8000f12:	4b63      	ldr	r3, [pc, #396]	; (80010a0 <_Z7InitADCv+0x25c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f1a:	6013      	str	r3, [r2, #0]
	ADC2->CR1 |= ADC_CR1_SCAN;						// Activate scan mode
 8000f1c:	4a61      	ldr	r2, [pc, #388]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f1e:	4b61      	ldr	r3, [pc, #388]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6053      	str	r3, [r2, #4]
	ADC2->SQR1 = (ADC_BUFFER_LENGTH - 1) << 20;		// 4 conversions in sequence
 8000f28:	4b5e      	ldr	r3, [pc, #376]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f2a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC2->SQR3 |= 8 << 0;							// Set ADC12_IN8 to first conversion in sequence
 8000f30:	4a5c      	ldr	r2, [pc, #368]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f32:	4b5c      	ldr	r3, [pc, #368]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 9 << 5;							// Set ADC12_IN9 to second conversion in sequence
 8000f3c:	4a59      	ldr	r2, [pc, #356]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f3e:	4b59      	ldr	r3, [pc, #356]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f42:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8000f46:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 1 << 10;							// Set ADC123_IN1 to third conversion in sequence
 8000f48:	4a56      	ldr	r2, [pc, #344]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f4a:	4b56      	ldr	r3, [pc, #344]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 2 << 15;							// Set ADC123_IN2 to fourth conversion in sequence
 8000f54:	4a53      	ldr	r2, [pc, #332]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f56:	4b53      	ldr	r3, [pc, #332]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= 3 << 20;							// Set ADC123_IN3 to fifth conversion in sequence
 8000f60:	4a50      	ldr	r2, [pc, #320]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f62:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f66:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000f6a:	6353      	str	r3, [r2, #52]	; 0x34

	//	Set to 56 cycles (0b11) sampling speed (Left shift speed 3 x ADC_INx)
	ADC2->SMPR2 |= 0b11 << 24;						// Set speed of IN8
 8000f6c:	4a4d      	ldr	r2, [pc, #308]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f6e:	4b4d      	ldr	r3, [pc, #308]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000f76:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 27;						// Set speed of IN9
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f7a:	4b4a      	ldr	r3, [pc, #296]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8000f82:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 3;						// Set speed of IN1
 8000f84:	4a47      	ldr	r2, [pc, #284]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f86:	4b47      	ldr	r3, [pc, #284]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	f043 0318 	orr.w	r3, r3, #24
 8000f8e:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 6;						// Set speed of IN2
 8000f90:	4a44      	ldr	r2, [pc, #272]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f92:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f9a:	6113      	str	r3, [r2, #16]
	ADC2->SMPR2 |= 0b11 << 9;						// Set speed of IN3
 8000f9c:	4a41      	ldr	r2, [pc, #260]	; (80010a4 <_Z7InitADCv+0x260>)
 8000f9e:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <_Z7InitADCv+0x260>)
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000fa6:	6113      	str	r3, [r2, #16]

	ADC2->CR2 |= ADC_CR2_EOCS;						// Trigger interrupt on end of each individual conversion
 8000fa8:	4a3e      	ldr	r2, [pc, #248]	; (80010a4 <_Z7InitADCv+0x260>)
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <_Z7InitADCv+0x260>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_EXTEN_0;					// ADC hardware trigger 00: Trigger detection disabled; 01: Trigger detection on the rising edge; 10: Trigger detection on the falling edge; 11: Trigger detection on both the rising and falling edges
 8000fb4:	4a3b      	ldr	r2, [pc, #236]	; (80010a4 <_Z7InitADCv+0x260>)
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <_Z7InitADCv+0x260>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;	// ADC External trigger: 0110 = TIM2_TRGO event
 8000fc0:	4a38      	ldr	r2, [pc, #224]	; (80010a4 <_Z7InitADCv+0x260>)
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <_Z7InitADCv+0x260>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000fca:	6093      	str	r3, [r2, #8]

	// Enable DMA - DMA2, Channel 1, Stream 2  = ADC2 (Manual p207)
	ADC2->CR2 |= ADC_CR2_DMA;						// Enable DMA Mode on ADC2
 8000fcc:	4a35      	ldr	r2, [pc, #212]	; (80010a4 <_Z7InitADCv+0x260>)
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <_Z7InitADCv+0x260>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DDS;						// DMA requests are issued as long as data are converted and DMA=1
 8000fd8:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <_Z7InitADCv+0x260>)
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <_Z7InitADCv+0x260>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe2:	6093      	str	r3, [r2, #8]
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000fe4:	4a2c      	ldr	r2, [pc, #176]	; (8001098 <_Z7InitADCv+0x254>)
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <_Z7InitADCv+0x254>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2_Stream2->CR &= ~DMA_SxCR_DIR;				// 00 = Peripheral-to-memory
 8000ff0:	4a2d      	ldr	r2, [pc, #180]	; (80010a8 <_Z7InitADCv+0x264>)
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <_Z7InitADCv+0x264>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000ffa:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_PL_1;				// Priority: 00 = low; 01 = Medium; 10 = High; 11 = Very High
 8000ffc:	4a2a      	ldr	r2, [pc, #168]	; (80010a8 <_Z7InitADCv+0x264>)
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <_Z7InitADCv+0x264>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001006:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_PSIZE_0;			// Peripheral size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <_Z7InitADCv+0x264>)
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <_Z7InitADCv+0x264>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001012:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_MSIZE_0;			// Memory size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8001014:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <_Z7InitADCv+0x264>)
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <_Z7InitADCv+0x264>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800101e:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR &= ~DMA_SxCR_PINC;				// Peripheral not in increment mode
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <_Z7InitADCv+0x264>)
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <_Z7InitADCv+0x264>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800102a:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_MINC;				// Memory in increment mode
 800102c:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <_Z7InitADCv+0x264>)
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <_Z7InitADCv+0x264>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001036:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR |= DMA_SxCR_CIRC;				// circular mode to keep refilling buffer
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <_Z7InitADCv+0x264>)
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <_Z7InitADCv+0x264>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->CR &= ~DMA_SxCR_DIR;				// data transfer direction: 00: peripheral-to-memory; 01: memory-to-peripheral; 10: memory-to-memory
 8001044:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <_Z7InitADCv+0x264>)
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <_Z7InitADCv+0x264>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800104e:	6013      	str	r3, [r2, #0]

	DMA2_Stream2->NDTR |= ADC_BUFFER_LENGTH;		// Number of data items to transfer (ie size of ADC buffer)
 8001050:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <_Z7InitADCv+0x264>)
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <_Z7InitADCv+0x264>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f043 0305 	orr.w	r3, r3, #5
 800105a:	6053      	str	r3, [r2, #4]
	DMA2_Stream2->PAR = (uint32_t)(&(ADC2->DR));	// Configure the peripheral data register address
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <_Z7InitADCv+0x264>)
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <_Z7InitADCv+0x268>)
 8001060:	609a      	str	r2, [r3, #8]
	DMA2_Stream2->M0AR = (uint32_t)(ADC_array);		// Configure the memory address (note that M1AR is used for double-buffer mode)
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_Z7InitADCv+0x264>)
 8001064:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <_Z7InitADCv+0x26c>)
 8001066:	60da      	str	r2, [r3, #12]
	DMA2_Stream2->CR |= DMA_SxCR_CHSEL_0;			// channel select to 1 for ADC2
 8001068:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <_Z7InitADCv+0x264>)
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <_Z7InitADCv+0x264>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001072:	6013      	str	r3, [r2, #0]

	DMA2_Stream2->CR |= DMA_SxCR_EN;				// Enable DMA2
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <_Z7InitADCv+0x264>)
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <_Z7InitADCv+0x264>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6013      	str	r3, [r2, #0]
	ADC2->CR2 |= ADC_CR2_ADON;						// Activate ADC
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <_Z7InitADCv+0x260>)
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_Z7InitADCv+0x260>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6093      	str	r3, [r2, #8]

	DMA2_Stream0->CR |= DMA_SxCR_EN;				// Enable DMA2
	ADC1->CR2 |= ADC_CR2_ADON;						// Activate ADC*/


}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40012100 	.word	0x40012100
 80010a8:	40026440 	.word	0x40026440
 80010ac:	4001214c 	.word	0x4001214c
 80010b0:	200000b8 	.word	0x200000b8

080010b4 <_ZSt3powff>:
  using ::pow;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80010be:	edc7 0a00 	vstr	s1, [r7]
 80010c2:	edd7 0a00 	vldr	s1, [r7]
 80010c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80010ca:	f000 fe79 	bl	8001dc0 <powf>
 80010ce:	eef0 7a40 	vmov.f32	s15, s0
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <TIM3_IRQHandler>:
uint8_t NoOfLUTs = sizeof(LUTArray) / sizeof(LUTArray[0]);

//	Use extern C to allow linker to find ISR
extern "C"
{
	void TIM3_IRQHandler(void) {
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
		// Send next samples to DAC
		if (TIM3->SR & TIM_SR_UIF) 						// if UIF flag is set
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <TIM3_IRQHandler+0x68>)
 80010e2:	8a1b      	ldrh	r3, [r3, #16]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d01f      	beq.n	8001138 <TIM3_IRQHandler+0x5c>
		{
			TIM3->SR &= ~TIM_SR_UIF;					// clear UIF flag
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <TIM3_IRQHandler+0x68>)
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <TIM3_IRQHandler+0x68>)
 80010fc:	8a1b      	ldrh	r3, [r3, #16]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	b29b      	uxth	r3, r3
 8001106:	8213      	strh	r3, [r2, #16]
			DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;		// Tell the DAC to output the next value
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <TIM3_IRQHandler+0x6c>)
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <TIM3_IRQHandler+0x6c>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6053      	str	r3, [r2, #4]
			DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;		// Tell the DAC to output the next value
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <TIM3_IRQHandler+0x6c>)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <TIM3_IRQHandler+0x6c>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	6053      	str	r3, [r2, #4]

			if (DacRead == 1)							// If the buffer has not been refilled increment overrun warning
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <TIM3_IRQHandler+0x70>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <TIM3_IRQHandler+0x56>
				overrun++;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <TIM3_IRQHandler+0x74>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a08      	ldr	r2, [pc, #32]	; (8001150 <TIM3_IRQHandler+0x74>)
 8001130:	6013      	str	r3, [r2, #0]

			DacRead = 1;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <TIM3_IRQHandler+0x70>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
		}
	}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40000400 	.word	0x40000400
 8001148:	40007400 	.word	0x40007400
 800114c:	200000c2 	.word	0x200000c2
 8001150:	200000dc 	.word	0x200000dc

08001154 <_Z11InterpolatePfRf>:
}


//	Interpolate between two positions (derived from a float and its rounded value) in a LUT
float Interpolate(float* LUT, float& LUTPosition)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	float s1 = LUT[(int) LUTPosition];
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001168:	ee17 3a90 	vmov	r3, s15
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
	float s2 = LUT[((int) LUTPosition + 1) % LUTSIZE];
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001180:	ee17 3a90 	vmov	r3, s15
 8001184:	3301      	adds	r3, #1
 8001186:	425a      	negs	r2, r3
 8001188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800118c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001190:	bf58      	it	pl
 8001192:	4253      	negpl	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60bb      	str	r3, [r7, #8]
	return s1 + ((s2 - s1) * (LUTPosition - (int)LUTPosition));
 800119e:	ed97 7a02 	vldr	s14, [r7, #8]
 80011a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	edd3 6a00 	vldr	s13, [r3]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ca:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80011ce:	eeb0 0a67 	vmov.f32	s0, s15
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_Z12GetPhaseDistPKffff>:

// Generate a phase distorted sine wave - pass LUT containing PD offsets, LUT position as a fraction of the wave cycle and a scaling factor
float GetPhaseDist(const float* PdLUT, const float LUTPosition, float scale = 1, float offset = 0){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80011e8:	edc7 0a01 	vstr	s1, [r7, #4]
 80011ec:	ed87 1a00 	vstr	s2, [r7]
	PhaseDist = PdLUT[(int)(LUTPosition * LUTSIZE)] * LUTSIZE * scale;
 80011f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80012a8 <_Z12GetPhaseDistPKffff+0xcc>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001200:	ee17 3a90 	vmov	r3, s15
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80012a8 <_Z12GetPhaseDistPKffff+0xcc>
 8001212:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001216:	edd7 7a01 	vldr	s15, [r7, #4]
 800121a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <_Z12GetPhaseDistPKffff+0xd0>)
 8001220:	edc3 7a00 	vstr	s15, [r3]

	// Add main wave position to phase distortion position and ensure in bounds
	float Pos = ((LUTPosition + offset) * LUTSIZE) + PhaseDist;
 8001224:	ed97 7a02 	vldr	s14, [r7, #8]
 8001228:	edd7 7a00 	vldr	s15, [r7]
 800122c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001230:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80012a8 <_Z12GetPhaseDistPKffff+0xcc>
 8001234:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <_Z12GetPhaseDistPKffff+0xd0>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001242:	edc7 7a05 	vstr	s15, [r7, #20]
	while (Pos > LUTSIZE)
 8001246:	edd7 7a05 	vldr	s15, [r7, #20]
 800124a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80012a8 <_Z12GetPhaseDistPKffff+0xcc>
 800124e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dc00      	bgt.n	800125a <_Z12GetPhaseDistPKffff+0x7e>
 8001258:	e008      	b.n	800126c <_Z12GetPhaseDistPKffff+0x90>
		Pos -= LUTSIZE;
 800125a:	edd7 7a05 	vldr	s15, [r7, #20]
 800125e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80012a8 <_Z12GetPhaseDistPKffff+0xcc>
 8001262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001266:	edc7 7a05 	vstr	s15, [r7, #20]
	while (Pos > LUTSIZE)
 800126a:	e7ec      	b.n	8001246 <_Z12GetPhaseDistPKffff+0x6a>
	while (Pos < 0)
 800126c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001270:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	d508      	bpl.n	800128c <_Z12GetPhaseDistPKffff+0xb0>
		Pos =  LUTSIZE + Pos;
 800127a:	edd7 7a05 	vldr	s15, [r7, #20]
 800127e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012a8 <_Z12GetPhaseDistPKffff+0xcc>
 8001282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001286:	edc7 7a05 	vstr	s15, [r7, #20]
	while (Pos < 0)
 800128a:	e7ef      	b.n	800126c <_Z12GetPhaseDistPKffff+0x90>

	return Interpolate(SineLUT, Pos); 	//	interpolate samples
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4807      	ldr	r0, [pc, #28]	; (80012b0 <_Z12GetPhaseDistPKffff+0xd4>)
 8001294:	f7ff ff5e 	bl	8001154 <_Z11InterpolatePfRf>
 8001298:	eef0 7a40 	vmov.f32	s15, s0
}
 800129c:	eeb0 0a67 	vmov.f32	s0, s15
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	44800000 	.word	0x44800000
 80012ac:	200000c8 	.word	0x200000c8
 80012b0:	200000e8 	.word	0x200000e8

080012b4 <_Z17GetBlendPhaseDistffff>:

// Generate a phase distorted sine wave - pass LUT containing PD offsets, LUT position as a fraction of the wave cycle and a scaling factor
float GetBlendPhaseDist(float PDBlend, const float LUTPosition, float scale = 1, float offset = 0){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	ed87 0a05 	vstr	s0, [r7, #20]
 80012be:	edc7 0a04 	vstr	s1, [r7, #16]
 80012c2:	ed87 1a03 	vstr	s2, [r7, #12]
 80012c6:	edc7 1a02 	vstr	s3, [r7, #8]
	// get the two PD LUTs that will be blended
	const float* PdLUTBlendA = LUTArray[(uint8_t)PDBlend];
 80012ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80012d6:	793b      	ldrb	r3, [r7, #4]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <_Z17GetBlendPhaseDistffff+0x198>)
 80012de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float* PdLUTBlendB = LUTArray[(uint8_t)(PDBlend + 1) % NoOfLUTs];
 80012e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80012f8:	793b      	ldrb	r3, [r7, #4]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4a54      	ldr	r2, [pc, #336]	; (8001450 <_Z17GetBlendPhaseDistffff+0x19c>)
 80012fe:	7812      	ldrb	r2, [r2, #0]
 8001300:	fbb3 f1f2 	udiv	r1, r3, r2
 8001304:	fb02 f201 	mul.w	r2, r2, r1
 8001308:	1a9b      	subs	r3, r3, r2
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	4b4f      	ldr	r3, [pc, #316]	; (800144c <_Z17GetBlendPhaseDistffff+0x198>)
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28

	// Get the values from each LUT for the sample position
	float PhaseDistA = PdLUTBlendA[(int)(LUTPosition * LUTSIZE)] * LUTSIZE * scale;
 8001316:	edd7 7a04 	vldr	s15, [r7, #16]
 800131a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001454 <_Z17GetBlendPhaseDistffff+0x1a0>
 800131e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001326:	ee17 3a90 	vmov	r3, s15
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132e:	4413      	add	r3, r2
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001454 <_Z17GetBlendPhaseDistffff+0x1a0>
 8001338:	ee27 7a87 	vmul.f32	s14, s15, s14
 800133c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001344:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float PhaseDistB = PdLUTBlendB[(int)(LUTPosition * LUTSIZE)] * LUTSIZE * scale;
 8001348:	edd7 7a04 	vldr	s15, [r7, #16]
 800134c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001454 <_Z17GetBlendPhaseDistffff+0x1a0>
 8001350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001358:	ee17 3a90 	vmov	r3, s15
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001360:	4413      	add	r3, r2
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001454 <_Z17GetBlendPhaseDistffff+0x1a0>
 800136a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800136e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001376:	edc7 7a08 	vstr	s15, [r7, #32]

	// Get the weighted blend of the two PD amounts
	float blend = PDBlend - (uint8_t)PDBlend;
 800137a:	edd7 7a05 	vldr	s15, [r7, #20]
 800137e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001382:	edc7 7a01 	vstr	s15, [r7, #4]
 8001386:	793b      	ldrb	r3, [r7, #4]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001392:	ed97 7a05 	vldr	s14, [r7, #20]
 8001396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139a:	edc7 7a07 	vstr	s15, [r7, #28]
	PhaseDist = ((1 - blend) * PhaseDistA) + (blend * PhaseDistB);
 800139e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80013b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <_Z17GetBlendPhaseDistffff+0x1a4>)
 80013c4:	edc3 7a00 	vstr	s15, [r3]

	// Add main wave position to phase distortion position and ensure in bounds
	float Pos = ((LUTPosition + offset) * LUTSIZE) + PhaseDist;
 80013c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80013cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001454 <_Z17GetBlendPhaseDistffff+0x1a0>
 80013d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <_Z17GetBlendPhaseDistffff+0x1a4>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	edc7 7a06 	vstr	s15, [r7, #24]
	while (Pos > LUTSIZE)
 80013ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001454 <_Z17GetBlendPhaseDistffff+0x1a0>
 80013f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	dc00      	bgt.n	80013fe <_Z17GetBlendPhaseDistffff+0x14a>
 80013fc:	e008      	b.n	8001410 <_Z17GetBlendPhaseDistffff+0x15c>
		Pos -= LUTSIZE;
 80013fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001402:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001454 <_Z17GetBlendPhaseDistffff+0x1a0>
 8001406:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800140a:	edc7 7a06 	vstr	s15, [r7, #24]
	while (Pos > LUTSIZE)
 800140e:	e7ec      	b.n	80013ea <_Z17GetBlendPhaseDistffff+0x136>
	while (Pos < 0)
 8001410:	edd7 7a06 	vldr	s15, [r7, #24]
 8001414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	d508      	bpl.n	8001430 <_Z17GetBlendPhaseDistffff+0x17c>
		Pos =  LUTSIZE + Pos;
 800141e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001422:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001454 <_Z17GetBlendPhaseDistffff+0x1a0>
 8001426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800142a:	edc7 7a06 	vstr	s15, [r7, #24]
	while (Pos < 0)
 800142e:	e7ef      	b.n	8001410 <_Z17GetBlendPhaseDistffff+0x15c>

	return Interpolate(SineLUT, Pos); 	//	interpolate samples
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	4619      	mov	r1, r3
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <_Z17GetBlendPhaseDistffff+0x1a8>)
 8001438:	f7ff fe8c 	bl	8001154 <_Z11InterpolatePfRf>
 800143c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008
 8001450:	2000001c 	.word	0x2000001c
 8001454:	44800000 	.word	0x44800000
 8001458:	200000c8 	.word	0x200000c8
 800145c:	200000e8 	.word	0x200000e8

08001460 <_Z10CreateLUTsv>:

void CreateLUTs(void)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
	// Generate pitch lookup table
	for (int p = 0; p < LUTSIZE; p++){
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001470:	da24      	bge.n	80014bc <_Z10CreateLUTsv+0x5c>
		float power = (float)(p * 4.0f) / -585.0f;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001480:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001484:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80016b8 <_Z10CreateLUTsv+0x258>
 8001488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
		PitchLUT[p] = 2272 * (float)std::pow(2.0f, power);
 8001490:	edd7 0a03 	vldr	s1, [r7, #12]
 8001494:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001498:	f7ff fe0c 	bl	80010b4 <_ZSt3powff>
 800149c:	eeb0 7a40 	vmov.f32	s14, s0
 80014a0:	eddf 7a86 	vldr	s15, [pc, #536]	; 80016bc <_Z10CreateLUTsv+0x25c>
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	4a85      	ldr	r2, [pc, #532]	; (80016c0 <_Z10CreateLUTsv+0x260>)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	for (int p = 0; p < LUTSIZE; p++){
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	3301      	adds	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	e7d6      	b.n	800146a <_Z10CreateLUTsv+0xa>
	}

	// Generate Sine LUT
	for (int s = 0; s < LUTSIZE; s++){
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c6:	da32      	bge.n	800152e <_Z10CreateLUTsv+0xce>
		SineLUT[s] = sin(s * 2.0f * M_PI / LUTSIZE);
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014d6:	ee17 0a90 	vmov	r0, s15
 80014da:	f7fe ffd9 	bl	8000490 <__aeabi_f2d>
 80014de:	a372      	add	r3, pc, #456	; (adr r3, 80016a8 <_Z10CreateLUTsv+0x248>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f828 	bl	8000538 <__aeabi_dmul>
 80014e8:	4603      	mov	r3, r0
 80014ea:	460c      	mov	r4, r1
 80014ec:	4618      	mov	r0, r3
 80014ee:	4621      	mov	r1, r4
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b73      	ldr	r3, [pc, #460]	; (80016c4 <_Z10CreateLUTsv+0x264>)
 80014f6:	f7ff f949 	bl	800078c <__aeabi_ddiv>
 80014fa:	4603      	mov	r3, r0
 80014fc:	460c      	mov	r4, r1
 80014fe:	ec44 3b17 	vmov	d7, r3, r4
 8001502:	eeb0 0a47 	vmov.f32	s0, s14
 8001506:	eef0 0a67 	vmov.f32	s1, s15
 800150a:	f000 fc11 	bl	8001d30 <sin>
 800150e:	ec54 3b10 	vmov	r3, r4, d0
 8001512:	4618      	mov	r0, r3
 8001514:	4621      	mov	r1, r4
 8001516:	f7ff fad1 	bl	8000abc <__aeabi_d2f>
 800151a:	4601      	mov	r1, r0
 800151c:	4a6a      	ldr	r2, [pc, #424]	; (80016c8 <_Z10CreateLUTsv+0x268>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	6019      	str	r1, [r3, #0]
	for (int s = 0; s < LUTSIZE; s++){
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	3301      	adds	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	e7c8      	b.n	80014c0 <_Z10CreateLUTsv+0x60>
	}

	// Generate Triangle LUT
	for (int s = 0; s < LUTSIZE; s++){
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001538:	da3a      	bge.n	80015b0 <_Z10CreateLUTsv+0x150>
		float slope = 4 * (float)s / (float)LUTSIZE;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001544:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001548:	ee27 7a87 	vmul.f32	s14, s15, s14
 800154c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80016cc <_Z10CreateLUTsv+0x26c>
 8001550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001554:	edc7 7a02 	vstr	s15, [r7, #8]

		if 			(s <= LUTSIZE / 4)		{	TriLUT[s] = slope;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800155e:	dc06      	bgt.n	800156e <_Z10CreateLUTsv+0x10e>
 8001560:	4a5b      	ldr	r2, [pc, #364]	; (80016d0 <_Z10CreateLUTsv+0x270>)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e01c      	b.n	80015a8 <_Z10CreateLUTsv+0x148>
		} else if 	(s <= 3 * LUTSIZE / 4)	{	TriLUT[s] = 2.0f - slope;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001574:	dc0c      	bgt.n	8001590 <_Z10CreateLUTsv+0x130>
 8001576:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800157a:	edd7 7a02 	vldr	s15, [r7, #8]
 800157e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001582:	4a53      	ldr	r2, [pc, #332]	; (80016d0 <_Z10CreateLUTsv+0x270>)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	edc3 7a00 	vstr	s15, [r3]
 800158e:	e00b      	b.n	80015a8 <_Z10CreateLUTsv+0x148>
		} else		{			TriLUT[s] = slope - 4;
 8001590:	edd7 7a02 	vldr	s15, [r7, #8]
 8001594:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001598:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800159c:	4a4c      	ldr	r2, [pc, #304]	; (80016d0 <_Z10CreateLUTsv+0x270>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	edc3 7a00 	vstr	s15, [r3]
	for (int s = 0; s < LUTSIZE; s++){
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3301      	adds	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e7c0      	b.n	8001532 <_Z10CreateLUTsv+0xd2>
		}
	}

	// Generate curvy triangle LUT
	for (int s = 0; s < LUTSIZE; s++){
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ba:	da6f      	bge.n	800169c <_Z10CreateLUTsv+0x23c>
		float slope = cos(2.0f * M_PI * (float)s / (float)LUTSIZE);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c6:	ee17 0a90 	vmov	r0, s15
 80015ca:	f7fe ff61 	bl	8000490 <__aeabi_f2d>
 80015ce:	a338      	add	r3, pc, #224	; (adr r3, 80016b0 <_Z10CreateLUTsv+0x250>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7fe ffb0 	bl	8000538 <__aeabi_dmul>
 80015d8:	4603      	mov	r3, r0
 80015da:	460c      	mov	r4, r1
 80015dc:	4618      	mov	r0, r3
 80015de:	4621      	mov	r1, r4
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <_Z10CreateLUTsv+0x264>)
 80015e6:	f7ff f8d1 	bl	800078c <__aeabi_ddiv>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	ec44 3b17 	vmov	d7, r3, r4
 80015f2:	eeb0 0a47 	vmov.f32	s0, s14
 80015f6:	eef0 0a67 	vmov.f32	s1, s15
 80015fa:	f000 fb55 	bl	8001ca8 <cos>
 80015fe:	ec54 3b10 	vmov	r3, r4, d0
 8001602:	4618      	mov	r0, r3
 8001604:	4621      	mov	r1, r4
 8001606:	f7ff fa59 	bl	8000abc <__aeabi_d2f>
 800160a:	4603      	mov	r3, r0
 800160c:	607b      	str	r3, [r7, #4]

		if 			(s <= LUTSIZE / 4)		{	CTriLUT[s] = -1 * (slope - 1);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001614:	dc0e      	bgt.n	8001634 <_Z10CreateLUTsv+0x1d4>
 8001616:	edd7 7a01 	vldr	s15, [r7, #4]
 800161a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800161e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001622:	eef1 7a67 	vneg.f32	s15, s15
 8001626:	4a2b      	ldr	r2, [pc, #172]	; (80016d4 <_Z10CreateLUTsv+0x274>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	edc3 7a00 	vstr	s15, [r3]
 8001632:	e02f      	b.n	8001694 <_Z10CreateLUTsv+0x234>
		} else if 	(s <= LUTSIZE / 2)		{	CTriLUT[s] = slope + 1;
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800163a:	dc0c      	bgt.n	8001656 <_Z10CreateLUTsv+0x1f6>
 800163c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001644:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001648:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <_Z10CreateLUTsv+0x274>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	edc3 7a00 	vstr	s15, [r3]
 8001654:	e01e      	b.n	8001694 <_Z10CreateLUTsv+0x234>
		} else if 	(s <= 3 * LUTSIZE / 4)	{	CTriLUT[s] = -1 * (slope + 1);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800165c:	dc0e      	bgt.n	800167c <_Z10CreateLUTsv+0x21c>
 800165e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001666:	ee77 7a87 	vadd.f32	s15, s15, s14
 800166a:	eef1 7a67 	vneg.f32	s15, s15
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <_Z10CreateLUTsv+0x274>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	edc3 7a00 	vstr	s15, [r3]
 800167a:	e00b      	b.n	8001694 <_Z10CreateLUTsv+0x234>
		} else {								CTriLUT[s] = slope - 1;
 800167c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001684:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001688:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_Z10CreateLUTsv+0x274>)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	edc3 7a00 	vstr	s15, [r3]
	for (int s = 0; s < LUTSIZE; s++){
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	3301      	adds	r3, #1
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	e78b      	b.n	80015b4 <_Z10CreateLUTsv+0x154>
		}
	}
}
 800169c:	bf00      	nop
 800169e:	3724      	adds	r7, #36	; 0x24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	54442d18 	.word	0x54442d18
 80016ac:	400921fb 	.word	0x400921fb
 80016b0:	54442d18 	.word	0x54442d18
 80016b4:	401921fb 	.word	0x401921fb
 80016b8:	c4124000 	.word	0xc4124000
 80016bc:	450e0000 	.word	0x450e0000
 80016c0:	200030e8 	.word	0x200030e8
 80016c4:	40900000 	.word	0x40900000
 80016c8:	200000e8 	.word	0x200000e8
 80016cc:	44800000 	.word	0x44800000
 80016d0:	200010e8 	.word	0x200010e8
 80016d4:	200020e8 	.word	0x200020e8

080016d8 <main>:


int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
	SystemInit();				// Activates floating point coprocessor and resets clock
 80016de:	f000 fa31 	bl	8001b44 <SystemInit>
	SystemClock_Config();		// Configure the clock and PLL
 80016e2:	f7ff fa7f 	bl	8000be4 <_Z18SystemClock_Configv>
	SystemCoreClockUpdate();	// Update SystemCoreClock, which is the system clock frequency supplied to the SysTick timer and the processor core clock. This variable can be used by debuggers to query the frequency of the debug timer or to configure the trace clock speed.
 80016e6:	f000 fa63 	bl	8001bb0 <SystemCoreClockUpdate>

	CreateLUTs();				// Create pitch and sine wave look up tables
 80016ea:	f7ff feb9 	bl	8001460 <_Z10CreateLUTsv>
	InitIO();					// PC6 Button in (Ring mod)
 80016ee:	f7ff fb4d 	bl	8000d8c <_Z6InitIOv>
	InitDAC();					// DAC1 Output on PA4 (A2); DAC2 Output on PA5 (D13)
 80016f2:	f7ff fb03 	bl	8000cfc <_Z7InitDACv>
	InitTimer();				// Sample output timer 3 - fires interrupt to trigger sample output from DAC
 80016f6:	f7ff fb67 	bl	8000dc8 <_Z9InitTimerv>
	InitADC();					// ADC for reading pitch on PB0 (A3); PD CV on PB1 (A1); DAC1 Type Pot on PA1;  DAC2 Type Pot on PA2; CV1 on PA3
 80016fa:	f7ff fba3 	bl	8000e44 <_Z7InitADCv>

	float oldOutput1 =  0;
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
	float oldOutput2 = 0;
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]



	RelativePitch RelPitch = NONE;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]


	while (1)
	{
		// Get Pitch from ADC and smooth
		Pitch = (0.5f * Pitch) + (0.5f * ADC_PITCH);
 800170e:	4bb5      	ldr	r3, [pc, #724]	; (80019e4 <main+0x30c>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001720:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <main+0x310>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001732:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001736:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800173a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001742:	edc7 7a01 	vstr	s15, [r7, #4]
 8001746:	88bb      	ldrh	r3, [r7, #4]
 8001748:	b29a      	uxth	r2, r3
 800174a:	4ba6      	ldr	r3, [pc, #664]	; (80019e4 <main+0x30c>)
 800174c:	801a      	strh	r2, [r3, #0]

		// Analog selection of PD LUT table allows a smooth transition between LUTs for DAC1 and a stepped transition for DAC2
		SelPDLut1 = (float)ADC_OSC1TYPE * (NoOfLUTs - 1) / 4096;
 800174e:	4ba7      	ldr	r3, [pc, #668]	; (80019ec <main+0x314>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800175c:	4ba4      	ldr	r3, [pc, #656]	; (80019f0 <main+0x318>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3b01      	subs	r3, #1
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800176e:	eddf 6aa1 	vldr	s13, [pc, #644]	; 80019f4 <main+0x31c>
 8001772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001776:	4ba0      	ldr	r3, [pc, #640]	; (80019f8 <main+0x320>)
 8001778:	edc3 7a00 	vstr	s15, [r3]
		PDLut2 = ADC_OSC2TYPE * NoOfLUTs / 4096;
 800177c:	4b9f      	ldr	r3, [pc, #636]	; (80019fc <main+0x324>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	4b9a      	ldr	r3, [pc, #616]	; (80019f0 <main+0x318>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	fb03 f302 	mul.w	r3, r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	da01      	bge.n	8001794 <main+0xbc>
 8001790:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001794:	131b      	asrs	r3, r3, #12
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b99      	ldr	r3, [pc, #612]	; (8001a00 <main+0x328>)
 800179a:	701a      	strb	r2, [r3, #0]

		// Ready for next sample
		if (DacRead)
 800179c:	4b99      	ldr	r3, [pc, #612]	; (8001a04 <main+0x32c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 8176 	beq.w	8001a92 <main+0x3ba>
		{
			// Get modulation from ADC; Currently seeing 0v as ~3000 and 5V as ~960
			PD1Scale = (float)(3800 - ADC_PD1AMT) / 800;		// Convert PD amount for OSC1
 80017a6:	4b98      	ldr	r3, [pc, #608]	; (8001a08 <main+0x330>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80017b0:	3308      	adds	r3, #8
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ba:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001a0c <main+0x334>
 80017be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c2:	4b93      	ldr	r3, [pc, #588]	; (8001a10 <main+0x338>)
 80017c4:	edc3 7a00 	vstr	s15, [r3]
			PD2Scale = (float)(4096 - ADC_CV1) / 800;		// Convert PD amount for OSC2
 80017c8:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <main+0x33c>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017da:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8001a0c <main+0x334>
 80017de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e2:	4b8d      	ldr	r3, [pc, #564]	; (8001a18 <main+0x340>)
 80017e4:	edc3 7a00 	vstr	s15, [r3]


			// Calculate output as a float from -1 to +1 checking phase distortion and phase offset as required
			float SampleOut1 = GetBlendPhaseDist(SelPDLut1, SamplePos1 / SAMPLERATE, PD1Scale, 0);
 80017e8:	4b83      	ldr	r3, [pc, #524]	; (80019f8 <main+0x320>)
 80017ea:	edd3 6a00 	vldr	s13, [r3]
 80017ee:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <main+0x344>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001a20 <main+0x348>
 80017f8:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80017fc:	4b84      	ldr	r3, [pc, #528]	; (8001a10 <main+0x338>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eddf 1a88 	vldr	s3, [pc, #544]	; 8001a24 <main+0x34c>
 8001806:	eeb0 1a67 	vmov.f32	s2, s15
 800180a:	eef0 0a46 	vmov.f32	s1, s12
 800180e:	eeb0 0a66 	vmov.f32	s0, s13
 8001812:	f7ff fd4f 	bl	80012b4 <_Z17GetBlendPhaseDistffff>
 8001816:	ed87 0a04 	vstr	s0, [r7, #16]
			float SampleOut2 = GetPhaseDist(LUTArray[PDLut2], SamplePos2 / SAMPLERATE, PD2Scale, 0);
 800181a:	4b79      	ldr	r3, [pc, #484]	; (8001a00 <main+0x328>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <main+0x350>)
 8001824:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001828:	4b80      	ldr	r3, [pc, #512]	; (8001a2c <main+0x354>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001a20 <main+0x348>
 8001832:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001836:	4b78      	ldr	r3, [pc, #480]	; (8001a18 <main+0x340>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8001a24 <main+0x34c>
 8001840:	eef0 0a67 	vmov.f32	s1, s15
 8001844:	eeb0 0a66 	vmov.f32	s0, s13
 8001848:	4610      	mov	r0, r2
 800184a:	f7ff fcc7 	bl	80011dc <_Z12GetPhaseDistPKffff>
 800184e:	ed87 0a03 	vstr	s0, [r7, #12]

			// Set DAC output values for when sample interrupt next fires
			if (RingModOn) {
 8001852:	4b77      	ldr	r3, [pc, #476]	; (8001a30 <main+0x358>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d02c      	beq.n	80018b4 <main+0x1dc>
				DAC->DHR12R1 = (int)((1 + (SampleOut1 * SampleOut2)) * 2047);		// Ring mod of 1 * 2
 800185a:	4b76      	ldr	r3, [pc, #472]	; (8001a34 <main+0x35c>)
 800185c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001860:	edd7 7a03 	vldr	s15, [r7, #12]
 8001864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800186c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001870:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001a38 <main+0x360>
 8001874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800187c:	ee17 2a90 	vmov	r2, s15
 8001880:	609a      	str	r2, [r3, #8]
				DAC->DHR12R1 = (int)(((2 + SampleOut1 + SampleOut2) / 2) * 2047);		// Mix of 1 + 2
 8001882:	4b6c      	ldr	r3, [pc, #432]	; (8001a34 <main+0x35c>)
 8001884:	edd7 7a04 	vldr	s15, [r7, #16]
 8001888:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800188c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001890:	edd7 7a03 	vldr	s15, [r7, #12]
 8001894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001898:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800189c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001a38 <main+0x360>
 80018a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ac:	ee17 2a90 	vmov	r2, s15
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	e00f      	b.n	80018d4 <main+0x1fc>
			} else {
				DAC->DHR12R1 = (int)((1 + SampleOut1) * 2047);		// load the next sample into the DAC 1 buffer
 80018b4:	4b5f      	ldr	r3, [pc, #380]	; (8001a34 <main+0x35c>)
 80018b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018c2:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001a38 <main+0x360>
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ce:	ee17 2a90 	vmov	r2, s15
 80018d2:	609a      	str	r2, [r3, #8]
			}
			DAC->DHR12R2 = (int)((1 + SampleOut2) * 2047);		// load the next sample into the DAC 2 buffer
 80018d4:	4b57      	ldr	r3, [pc, #348]	; (8001a34 <main+0x35c>)
 80018d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018e2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001a38 <main+0x360>
 80018e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ee:	ee17 2a90 	vmov	r2, s15
 80018f2:	615a      	str	r2, [r3, #20]

//			DAC->DHR12R1 = (int)((1 + (SampleOut1 * (-1 * SampleOut2))) * 2047);	// Ring mod of 1 * 2'
//			DAC->DHR12R1 = (int)(((2 + SampleOut1 + SampleOut2) / 2) * 2047);		// Mix of 1 + 2
//			DAC->DHR12R2 = (int)((1 + (-1 * SampleOut2)) * 2047);					// DAC 2 - inverted
			DacRead = 0;
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <main+0x32c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]

			oldOutput1 = SampleOut1;
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	61fb      	str	r3, [r7, #28]
			oldOutput2 = SampleOut2;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	61bb      	str	r3, [r7, #24]

			if (RelPitch == SPREAD){
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	2b05      	cmp	r3, #5
 8001906:	d11c      	bne.n	8001942 <main+0x26a>
				freq1 = PitchLUT[(Pitch + 2) / 4];		// spread adjusts the tuning of each oscillator slightly up and down
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <main+0x30c>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	3302      	adds	r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	da00      	bge.n	8001916 <main+0x23e>
 8001914:	3303      	adds	r3, #3
 8001916:	109b      	asrs	r3, r3, #2
 8001918:	4a48      	ldr	r2, [pc, #288]	; (8001a3c <main+0x364>)
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a47      	ldr	r2, [pc, #284]	; (8001a40 <main+0x368>)
 8001922:	6013      	str	r3, [r2, #0]
				freq2 = PitchLUT[(Pitch - 2) / 4];
 8001924:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <main+0x30c>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b02      	subs	r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	da00      	bge.n	8001932 <main+0x25a>
 8001930:	3303      	adds	r3, #3
 8001932:	109b      	asrs	r3, r3, #2
 8001934:	4a41      	ldr	r2, [pc, #260]	; (8001a3c <main+0x364>)
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a41      	ldr	r2, [pc, #260]	; (8001a44 <main+0x36c>)
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e00a      	b.n	8001958 <main+0x280>
			} else {
				freq1 = PitchLUT[Pitch / 4];		// divide by four as there are 1024 items in DAC CV Voltage to Pitch Freq LUT and 4096 possible DAC voltage values
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <main+0x30c>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	b29b      	uxth	r3, r3
 800194c:	4a3b      	ldr	r2, [pc, #236]	; (8001a3c <main+0x364>)
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <main+0x368>)
 8001956:	6013      	str	r3, [r2, #0]
			}


			// octave down
			switch(RelPitch) {
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d008      	beq.n	8001970 <main+0x298>
 800195e:	2b02      	cmp	r3, #2
 8001960:	d011      	beq.n	8001986 <main+0x2ae>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <main+0x2c0>
				case NONE: 			freq2 = freq1; 		break;
 8001966:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <main+0x368>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a36      	ldr	r2, [pc, #216]	; (8001a44 <main+0x36c>)
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e013      	b.n	8001998 <main+0x2c0>
				case OCTAVEDOWN:	freq2 = freq1 / 2;	break;
 8001970:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <main+0x368>)
 8001972:	ed93 7a00 	vldr	s14, [r3]
 8001976:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800197a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <main+0x36c>)
 8001980:	edc3 7a00 	vstr	s15, [r3]
 8001984:	e008      	b.n	8001998 <main+0x2c0>
				case OCTAVEUP: 		freq2 = freq1 * 2;	break;
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <main+0x368>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <main+0x36c>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
 8001996:	bf00      	nop
			}

			// jump forward to the next sample position
			SamplePos1 += freq1;
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <main+0x368>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <main+0x344>)
 80019a0:	ed93 7a00 	vldr	s14, [r3]
 80019a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <main+0x344>)
 80019aa:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos1 >= SAMPLERATE)
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <main+0x344>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001a20 <main+0x348>
 80019b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	bfac      	ite	ge
 80019c2:	2301      	movge	r3, #1
 80019c4:	2300      	movlt	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d03d      	beq.n	8001a48 <main+0x370>
				SamplePos1-= SAMPLERATE;
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <main+0x344>)
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001a20 <main+0x348>
 80019d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <main+0x344>)
 80019dc:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos1 >= SAMPLERATE)
 80019e0:	e7e5      	b.n	80019ae <main+0x2d6>
 80019e2:	bf00      	nop
 80019e4:	200000c6 	.word	0x200000c6
 80019e8:	200000b8 	.word	0x200000b8
 80019ec:	200000bc 	.word	0x200000bc
 80019f0:	2000001c 	.word	0x2000001c
 80019f4:	45800000 	.word	0x45800000
 80019f8:	200000e0 	.word	0x200000e0
 80019fc:	200000be 	.word	0x200000be
 8001a00:	200000e4 	.word	0x200000e4
 8001a04:	200000c2 	.word	0x200000c2
 8001a08:	200000ba 	.word	0x200000ba
 8001a0c:	44480000 	.word	0x44480000
 8001a10:	200000d4 	.word	0x200000d4
 8001a14:	200000c0 	.word	0x200000c0
 8001a18:	200000d8 	.word	0x200000d8
 8001a1c:	200000cc 	.word	0x200000cc
 8001a20:	478ca000 	.word	0x478ca000
 8001a24:	00000000 	.word	0x00000000
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	200000d0 	.word	0x200000d0
 8001a30:	200000c3 	.word	0x200000c3
 8001a34:	40007400 	.word	0x40007400
 8001a38:	44ffe000 	.word	0x44ffe000
 8001a3c:	200030e8 	.word	0x200030e8
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

			SamplePos2 += freq2;
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <main+0x400>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <main+0x404>)
 8001a50:	ed93 7a00 	vldr	s14, [r3]
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <main+0x404>)
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos2 >= SAMPLERATE)
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <main+0x404>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001ae0 <main+0x408>
 8001a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	bfac      	ite	ge
 8001a72:	2301      	movge	r3, #1
 8001a74:	2300      	movlt	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <main+0x3ba>
				SamplePos2-= SAMPLERATE;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <main+0x404>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001ae0 <main+0x408>
 8001a86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <main+0x404>)
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
			while (SamplePos2 >= SAMPLERATE)
 8001a90:	e7e5      	b.n	8001a5e <main+0x386>
		}

		// Toggle Ring mod when button pressed
		if (!READ_BIT(GPIOC->IDR, GPIO_IDR_IDR_6)) {
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <main+0x40c>)
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf0c      	ite	eq
 8001a9e:	2301      	moveq	r3, #1
 8001aa0:	2300      	movne	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d012      	beq.n	8001ace <main+0x3f6>
			if (!ButtonDown) {
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <main+0x410>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	f083 0301 	eor.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f43f ae2b 	beq.w	800170e <main+0x36>
				RingModOn = !RingModOn;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <main+0x414>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	f083 0301 	eor.w	r3, r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <main+0x414>)
 8001ac4:	701a      	strb	r2, [r3, #0]
				ButtonDown = true;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <main+0x410>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e61f      	b.n	800170e <main+0x36>
			}
		} else {
			ButtonDown = false;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <main+0x410>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
		}
	}
 8001ad4:	e61b      	b.n	800170e <main+0x36>
 8001ad6:	bf00      	nop
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	200000d0 	.word	0x200000d0
 8001ae0:	478ca000 	.word	0x478ca000
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	200000c4 	.word	0x200000c4
 8001aec:	200000c3 	.word	0x200000c3

08001af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001af4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001af6:	e003      	b.n	8001b00 <LoopCopyDataInit>

08001af8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001afa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001afc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001afe:	3104      	adds	r1, #4

08001b00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b08:	d3f6      	bcc.n	8001af8 <CopyDataInit>
  ldr  r2, =_sbss
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b0c:	e002      	b.n	8001b14 <LoopFillZerobss>

08001b0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b10:	f842 3b04 	str.w	r3, [r2], #4

08001b14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b18:	d3f9      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b1a:	f000 f813 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f001 fee5 	bl	80038ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b22:	f7ff fdd9 	bl	80016d8 <main>
  bx  lr    
 8001b26:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b2c:	08008b60 	.word	0x08008b60
  ldr  r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b34:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8001b38:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8001b3c:	200040e8 	.word	0x200040e8

08001b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC_IRQHandler>
	...

08001b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <SystemInit+0x60>)
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <SystemInit+0x60>)
 8001b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b58:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <SystemInit+0x64>)
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <SystemInit+0x64>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <SystemInit+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <SystemInit+0x64>)
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <SystemInit+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <SystemInit+0x64>)
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <SystemInit+0x68>)
 8001b7e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b80:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <SystemInit+0x64>)
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <SystemInit+0x64>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <SystemInit+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SystemInit+0x60>)
 8001b94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b98:	609a      	str	r2, [r3, #8]
#endif
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	24003010 	.word	0x24003010

08001bb0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <SystemCoreClockUpdate+0xe4>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d007      	beq.n	8001bea <SystemCoreClockUpdate+0x3a>
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d009      	beq.n	8001bf2 <SystemCoreClockUpdate+0x42>
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d13d      	bne.n	8001c5e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001be2:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <SystemCoreClockUpdate+0xe8>)
 8001be4:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <SystemCoreClockUpdate+0xec>)
 8001be6:	601a      	str	r2, [r3, #0]
      break;
 8001be8:	e03d      	b.n	8001c66 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001bea:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <SystemCoreClockUpdate+0xe8>)
 8001bec:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <SystemCoreClockUpdate+0xf0>)
 8001bee:	601a      	str	r2, [r3, #0]
      break;
 8001bf0:	e039      	b.n	8001c66 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001bf2:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <SystemCoreClockUpdate+0xe4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	0d9b      	lsrs	r3, r3, #22
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <SystemCoreClockUpdate+0xe4>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c06:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00c      	beq.n	8001c28 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c0e:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <SystemCoreClockUpdate+0xf0>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <SystemCoreClockUpdate+0xe4>)
 8001c18:	6852      	ldr	r2, [r2, #4]
 8001c1a:	0992      	lsrs	r2, r2, #6
 8001c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e00b      	b.n	8001c40 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c28:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <SystemCoreClockUpdate+0xec>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <SystemCoreClockUpdate+0xe4>)
 8001c32:	6852      	ldr	r2, [r2, #4]
 8001c34:	0992      	lsrs	r2, r2, #6
 8001c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <SystemCoreClockUpdate+0xe4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <SystemCoreClockUpdate+0xe8>)
 8001c5a:	6013      	str	r3, [r2, #0]
      break;
 8001c5c:	e003      	b.n	8001c66 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <SystemCoreClockUpdate+0xe8>)
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <SystemCoreClockUpdate+0xec>)
 8001c62:	601a      	str	r2, [r3, #0]
      break;
 8001c64:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <SystemCoreClockUpdate+0xe4>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <SystemCoreClockUpdate+0xf4>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <SystemCoreClockUpdate+0xe8>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemCoreClockUpdate+0xe8>)
 8001c84:	6013      	str	r3, [r2, #0]
}
 8001c86:	bf00      	nop
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	20000020 	.word	0x20000020
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	007a1200 	.word	0x007a1200
 8001ca4:	20000024 	.word	0x20000024

08001ca8 <cos>:
 8001ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001caa:	ec51 0b10 	vmov	r0, r1, d0
 8001cae:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <cos+0x80>)
 8001cb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	dc06      	bgt.n	8001cc6 <cos+0x1e>
 8001cb8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001d20 <cos+0x78>
 8001cbc:	f000 fef8 	bl	8002ab0 <__kernel_cos>
 8001cc0:	ec51 0b10 	vmov	r0, r1, d0
 8001cc4:	e007      	b.n	8001cd6 <cos+0x2e>
 8001cc6:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <cos+0x84>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	dd09      	ble.n	8001ce0 <cos+0x38>
 8001ccc:	ee10 2a10 	vmov	r2, s0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	f7fe fa7d 	bl	80001d0 <__aeabi_dsub>
 8001cd6:	ec41 0b10 	vmov	d0, r0, r1
 8001cda:	b005      	add	sp, #20
 8001cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ce0:	4668      	mov	r0, sp
 8001ce2:	f000 f9e9 	bl	80020b8 <__ieee754_rem_pio2>
 8001ce6:	f000 0003 	and.w	r0, r0, #3
 8001cea:	2801      	cmp	r0, #1
 8001cec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001cf0:	ed9d 0b00 	vldr	d0, [sp]
 8001cf4:	d007      	beq.n	8001d06 <cos+0x5e>
 8001cf6:	2802      	cmp	r0, #2
 8001cf8:	d00e      	beq.n	8001d18 <cos+0x70>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d0de      	beq.n	8001cbc <cos+0x14>
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f001 fb0e 	bl	8003320 <__kernel_sin>
 8001d04:	e7dc      	b.n	8001cc0 <cos+0x18>
 8001d06:	f001 fb0b 	bl	8003320 <__kernel_sin>
 8001d0a:	ec53 2b10 	vmov	r2, r3, d0
 8001d0e:	ee10 0a10 	vmov	r0, s0
 8001d12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8001d16:	e7de      	b.n	8001cd6 <cos+0x2e>
 8001d18:	f000 feca 	bl	8002ab0 <__kernel_cos>
 8001d1c:	e7f5      	b.n	8001d0a <cos+0x62>
 8001d1e:	bf00      	nop
	...
 8001d28:	3fe921fb 	.word	0x3fe921fb
 8001d2c:	7fefffff 	.word	0x7fefffff

08001d30 <sin>:
 8001d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d32:	ec51 0b10 	vmov	r0, r1, d0
 8001d36:	4a20      	ldr	r2, [pc, #128]	; (8001db8 <sin+0x88>)
 8001d38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	dc07      	bgt.n	8001d50 <sin+0x20>
 8001d40:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8001db0 <sin+0x80>
 8001d44:	2000      	movs	r0, #0
 8001d46:	f001 faeb 	bl	8003320 <__kernel_sin>
 8001d4a:	ec51 0b10 	vmov	r0, r1, d0
 8001d4e:	e007      	b.n	8001d60 <sin+0x30>
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <sin+0x8c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	dd09      	ble.n	8001d6a <sin+0x3a>
 8001d56:	ee10 2a10 	vmov	r2, s0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	f7fe fa38 	bl	80001d0 <__aeabi_dsub>
 8001d60:	ec41 0b10 	vmov	d0, r0, r1
 8001d64:	b005      	add	sp, #20
 8001d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d6a:	4668      	mov	r0, sp
 8001d6c:	f000 f9a4 	bl	80020b8 <__ieee754_rem_pio2>
 8001d70:	f000 0003 	and.w	r0, r0, #3
 8001d74:	2801      	cmp	r0, #1
 8001d76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001d7a:	ed9d 0b00 	vldr	d0, [sp]
 8001d7e:	d004      	beq.n	8001d8a <sin+0x5a>
 8001d80:	2802      	cmp	r0, #2
 8001d82:	d005      	beq.n	8001d90 <sin+0x60>
 8001d84:	b970      	cbnz	r0, 8001da4 <sin+0x74>
 8001d86:	2001      	movs	r0, #1
 8001d88:	e7dd      	b.n	8001d46 <sin+0x16>
 8001d8a:	f000 fe91 	bl	8002ab0 <__kernel_cos>
 8001d8e:	e7dc      	b.n	8001d4a <sin+0x1a>
 8001d90:	2001      	movs	r0, #1
 8001d92:	f001 fac5 	bl	8003320 <__kernel_sin>
 8001d96:	ec53 2b10 	vmov	r2, r3, d0
 8001d9a:	ee10 0a10 	vmov	r0, s0
 8001d9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8001da2:	e7dd      	b.n	8001d60 <sin+0x30>
 8001da4:	f000 fe84 	bl	8002ab0 <__kernel_cos>
 8001da8:	e7f5      	b.n	8001d96 <sin+0x66>
 8001daa:	bf00      	nop
 8001dac:	f3af 8000 	nop.w
	...
 8001db8:	3fe921fb 	.word	0x3fe921fb
 8001dbc:	7fefffff 	.word	0x7fefffff

08001dc0 <powf>:
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	ed2d 8b04 	vpush	{d8-d9}
 8001dc6:	4cb5      	ldr	r4, [pc, #724]	; (800209c <powf+0x2dc>)
 8001dc8:	b08a      	sub	sp, #40	; 0x28
 8001dca:	eef0 8a40 	vmov.f32	s17, s0
 8001dce:	eeb0 8a60 	vmov.f32	s16, s1
 8001dd2:	f000 fb63 	bl	800249c <__ieee754_powf>
 8001dd6:	f994 5000 	ldrsb.w	r5, [r4]
 8001dda:	1c6b      	adds	r3, r5, #1
 8001ddc:	eeb0 9a40 	vmov.f32	s18, s0
 8001de0:	4626      	mov	r6, r4
 8001de2:	d05d      	beq.n	8001ea0 <powf+0xe0>
 8001de4:	eeb4 8a48 	vcmp.f32	s16, s16
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	d658      	bvs.n	8001ea0 <powf+0xe0>
 8001dee:	eef4 8a68 	vcmp.f32	s17, s17
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	d721      	bvc.n	8001e3c <powf+0x7c>
 8001df8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d14e      	bne.n	8001ea0 <powf+0xe0>
 8001e02:	2301      	movs	r3, #1
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	4ba6      	ldr	r3, [pc, #664]	; (80020a0 <powf+0x2e0>)
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	ee18 0a90 	vmov	r0, s17
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9308      	str	r3, [sp, #32]
 8001e12:	f7fe fb3d 	bl	8000490 <__aeabi_f2d>
 8001e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e1a:	ee18 0a10 	vmov	r0, s16
 8001e1e:	f7fe fb37 	bl	8000490 <__aeabi_f2d>
 8001e22:	4ba0      	ldr	r3, [pc, #640]	; (80020a4 <powf+0x2e4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	2d02      	cmp	r5, #2
 8001e28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001e2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e30:	d030      	beq.n	8001e94 <powf+0xd4>
 8001e32:	4668      	mov	r0, sp
 8001e34:	f001 fbbc 	bl	80035b0 <matherr>
 8001e38:	bb30      	cbnz	r0, 8001e88 <powf+0xc8>
 8001e3a:	e062      	b.n	8001f02 <powf+0x142>
 8001e3c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e44:	d162      	bne.n	8001f0c <powf+0x14c>
 8001e46:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4e:	d12d      	bne.n	8001eac <powf+0xec>
 8001e50:	2301      	movs	r3, #1
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	4b92      	ldr	r3, [pc, #584]	; (80020a0 <powf+0x2e0>)
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	ee18 0a90 	vmov	r0, s17
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9308      	str	r3, [sp, #32]
 8001e60:	f7fe fb16 	bl	8000490 <__aeabi_f2d>
 8001e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e68:	ee18 0a10 	vmov	r0, s16
 8001e6c:	f7fe fb10 	bl	8000490 <__aeabi_f2d>
 8001e70:	2200      	movs	r2, #0
 8001e72:	2300      	movs	r3, #0
 8001e74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001e78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e7c:	2d00      	cmp	r5, #0
 8001e7e:	d0d8      	beq.n	8001e32 <powf+0x72>
 8001e80:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <powf+0x2e4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e88:	9b08      	ldr	r3, [sp, #32]
 8001e8a:	b11b      	cbz	r3, 8001e94 <powf+0xd4>
 8001e8c:	f001 fd28 	bl	80038e0 <__errno>
 8001e90:	9b08      	ldr	r3, [sp, #32]
 8001e92:	6003      	str	r3, [r0, #0]
 8001e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001e98:	f7fe fe10 	bl	8000abc <__aeabi_d2f>
 8001e9c:	ee09 0a10 	vmov	s18, r0
 8001ea0:	eeb0 0a49 	vmov.f32	s0, s18
 8001ea4:	b00a      	add	sp, #40	; 0x28
 8001ea6:	ecbd 8b04 	vpop	{d8-d9}
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	eeb0 0a48 	vmov.f32	s0, s16
 8001eb0:	f001 fc8b 	bl	80037ca <finitef>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d0f3      	beq.n	8001ea0 <powf+0xe0>
 8001eb8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	d5ee      	bpl.n	8001ea0 <powf+0xe0>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <powf+0x2e0>)
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	ee18 0a90 	vmov	r0, s17
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9308      	str	r3, [sp, #32]
 8001ed2:	f7fe fadd 	bl	8000490 <__aeabi_f2d>
 8001ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001eda:	ee18 0a10 	vmov	r0, s16
 8001ede:	f7fe fad7 	bl	8000490 <__aeabi_f2d>
 8001ee2:	f994 3000 	ldrsb.w	r3, [r4]
 8001ee6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001eea:	b923      	cbnz	r3, 8001ef6 <powf+0x136>
 8001eec:	2200      	movs	r2, #0
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001ef4:	e79d      	b.n	8001e32 <powf+0x72>
 8001ef6:	496c      	ldr	r1, [pc, #432]	; (80020a8 <powf+0x2e8>)
 8001ef8:	2000      	movs	r0, #0
 8001efa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d197      	bne.n	8001e32 <powf+0x72>
 8001f02:	f001 fced 	bl	80038e0 <__errno>
 8001f06:	2321      	movs	r3, #33	; 0x21
 8001f08:	6003      	str	r3, [r0, #0]
 8001f0a:	e7bd      	b.n	8001e88 <powf+0xc8>
 8001f0c:	f001 fc5d 	bl	80037ca <finitef>
 8001f10:	4605      	mov	r5, r0
 8001f12:	2800      	cmp	r0, #0
 8001f14:	f040 8091 	bne.w	800203a <powf+0x27a>
 8001f18:	eeb0 0a68 	vmov.f32	s0, s17
 8001f1c:	f001 fc55 	bl	80037ca <finitef>
 8001f20:	2800      	cmp	r0, #0
 8001f22:	f000 808a 	beq.w	800203a <powf+0x27a>
 8001f26:	eeb0 0a48 	vmov.f32	s0, s16
 8001f2a:	f001 fc4e 	bl	80037ca <finitef>
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	f000 8083 	beq.w	800203a <powf+0x27a>
 8001f34:	eeb4 9a49 	vcmp.f32	s18, s18
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	f994 4000 	ldrsb.w	r4, [r4]
 8001f40:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <powf+0x2e0>)
 8001f42:	d71b      	bvc.n	8001f7c <powf+0x1bc>
 8001f44:	2201      	movs	r2, #1
 8001f46:	ee18 0a90 	vmov	r0, s17
 8001f4a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001f4e:	9508      	str	r5, [sp, #32]
 8001f50:	f7fe fa9e 	bl	8000490 <__aeabi_f2d>
 8001f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f58:	ee18 0a10 	vmov	r0, s16
 8001f5c:	f7fe fa98 	bl	8000490 <__aeabi_f2d>
 8001f60:	2200      	movs	r2, #0
 8001f62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f66:	2300      	movs	r3, #0
 8001f68:	2c00      	cmp	r4, #0
 8001f6a:	d0c1      	beq.n	8001ef0 <powf+0x130>
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f7fe fc0c 	bl	800078c <__aeabi_ddiv>
 8001f74:	2c02      	cmp	r4, #2
 8001f76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001f7a:	e7c1      	b.n	8001f00 <powf+0x140>
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	ee18 0a90 	vmov	r0, s17
 8001f82:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001f86:	9508      	str	r5, [sp, #32]
 8001f88:	f7fe fa82 	bl	8000490 <__aeabi_f2d>
 8001f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f90:	ee18 0a10 	vmov	r0, s16
 8001f94:	f7fe fa7c 	bl	8000490 <__aeabi_f2d>
 8001f98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f9c:	bb5c      	cbnz	r4, 8001ff6 <powf+0x236>
 8001f9e:	4b43      	ldr	r3, [pc, #268]	; (80020ac <powf+0x2ec>)
 8001fa0:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8001fa4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001fb0:	d56c      	bpl.n	800208c <powf+0x2cc>
 8001fb2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001fb6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001fba:	ee17 0a90 	vmov	r0, s15
 8001fbe:	f7fe fa67 	bl	8000490 <__aeabi_f2d>
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	460d      	mov	r5, r1
 8001fc6:	ec45 4b10 	vmov	d0, r4, r5
 8001fca:	f001 faf3 	bl	80035b4 <rint>
 8001fce:	4620      	mov	r0, r4
 8001fd0:	ec53 2b10 	vmov	r2, r3, d0
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	f7fe fd17 	bl	8000a08 <__aeabi_dcmpeq>
 8001fda:	b920      	cbnz	r0, 8001fe6 <powf+0x226>
 8001fdc:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <powf+0x2f0>)
 8001fde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001fe2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001fe6:	f996 3000 	ldrsb.w	r3, [r6]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d14e      	bne.n	800208c <powf+0x2cc>
 8001fee:	f001 fc77 	bl	80038e0 <__errno>
 8001ff2:	2322      	movs	r3, #34	; 0x22
 8001ff4:	e788      	b.n	8001f08 <powf+0x148>
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <powf+0x2f4>)
 8001ff8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002006:	d5ee      	bpl.n	8001fe6 <powf+0x226>
 8002008:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800200c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002010:	ee17 0a90 	vmov	r0, s15
 8002014:	f7fe fa3c 	bl	8000490 <__aeabi_f2d>
 8002018:	4604      	mov	r4, r0
 800201a:	460d      	mov	r5, r1
 800201c:	ec45 4b10 	vmov	d0, r4, r5
 8002020:	f001 fac8 	bl	80035b4 <rint>
 8002024:	4620      	mov	r0, r4
 8002026:	ec53 2b10 	vmov	r2, r3, d0
 800202a:	4629      	mov	r1, r5
 800202c:	f7fe fcec 	bl	8000a08 <__aeabi_dcmpeq>
 8002030:	2800      	cmp	r0, #0
 8002032:	d1d8      	bne.n	8001fe6 <powf+0x226>
 8002034:	2200      	movs	r2, #0
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <powf+0x2e8>)
 8002038:	e7d3      	b.n	8001fe2 <powf+0x222>
 800203a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	f47f af2d 	bne.w	8001ea0 <powf+0xe0>
 8002046:	eeb0 0a68 	vmov.f32	s0, s17
 800204a:	f001 fbbe 	bl	80037ca <finitef>
 800204e:	2800      	cmp	r0, #0
 8002050:	f43f af26 	beq.w	8001ea0 <powf+0xe0>
 8002054:	eeb0 0a48 	vmov.f32	s0, s16
 8002058:	f001 fbb7 	bl	80037ca <finitef>
 800205c:	2800      	cmp	r0, #0
 800205e:	f43f af1f 	beq.w	8001ea0 <powf+0xe0>
 8002062:	2304      	movs	r3, #4
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <powf+0x2e0>)
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	ee18 0a90 	vmov	r0, s17
 800206e:	2300      	movs	r3, #0
 8002070:	9308      	str	r3, [sp, #32]
 8002072:	f7fe fa0d 	bl	8000490 <__aeabi_f2d>
 8002076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800207a:	ee18 0a10 	vmov	r0, s16
 800207e:	f7fe fa07 	bl	8000490 <__aeabi_f2d>
 8002082:	2200      	movs	r2, #0
 8002084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002088:	2300      	movs	r3, #0
 800208a:	e7aa      	b.n	8001fe2 <powf+0x222>
 800208c:	4668      	mov	r0, sp
 800208e:	f001 fa8f 	bl	80035b0 <matherr>
 8002092:	2800      	cmp	r0, #0
 8002094:	f47f aef8 	bne.w	8001e88 <powf+0xc8>
 8002098:	e7a9      	b.n	8001fee <powf+0x22e>
 800209a:	bf00      	nop
 800209c:	20000034 	.word	0x20000034
 80020a0:	08008950 	.word	0x08008950
 80020a4:	3ff00000 	.word	0x3ff00000
 80020a8:	fff00000 	.word	0xfff00000
 80020ac:	47efffff 	.word	0x47efffff
 80020b0:	c7efffff 	.word	0xc7efffff
 80020b4:	7ff00000 	.word	0x7ff00000

080020b8 <__ieee754_rem_pio2>:
 80020b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020bc:	ec57 6b10 	vmov	r6, r7, d0
 80020c0:	4bc3      	ldr	r3, [pc, #780]	; (80023d0 <__ieee754_rem_pio2+0x318>)
 80020c2:	b08d      	sub	sp, #52	; 0x34
 80020c4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80020c8:	4598      	cmp	r8, r3
 80020ca:	4604      	mov	r4, r0
 80020cc:	9704      	str	r7, [sp, #16]
 80020ce:	dc07      	bgt.n	80020e0 <__ieee754_rem_pio2+0x28>
 80020d0:	2200      	movs	r2, #0
 80020d2:	2300      	movs	r3, #0
 80020d4:	ed84 0b00 	vstr	d0, [r4]
 80020d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80020dc:	2500      	movs	r5, #0
 80020de:	e027      	b.n	8002130 <__ieee754_rem_pio2+0x78>
 80020e0:	4bbc      	ldr	r3, [pc, #752]	; (80023d4 <__ieee754_rem_pio2+0x31c>)
 80020e2:	4598      	cmp	r8, r3
 80020e4:	dc75      	bgt.n	80021d2 <__ieee754_rem_pio2+0x11a>
 80020e6:	9b04      	ldr	r3, [sp, #16]
 80020e8:	4dbb      	ldr	r5, [pc, #748]	; (80023d8 <__ieee754_rem_pio2+0x320>)
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	ee10 0a10 	vmov	r0, s0
 80020f0:	a3a9      	add	r3, pc, #676	; (adr r3, 8002398 <__ieee754_rem_pio2+0x2e0>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	4639      	mov	r1, r7
 80020f8:	dd36      	ble.n	8002168 <__ieee754_rem_pio2+0xb0>
 80020fa:	f7fe f869 	bl	80001d0 <__aeabi_dsub>
 80020fe:	45a8      	cmp	r8, r5
 8002100:	4606      	mov	r6, r0
 8002102:	460f      	mov	r7, r1
 8002104:	d018      	beq.n	8002138 <__ieee754_rem_pio2+0x80>
 8002106:	a3a6      	add	r3, pc, #664	; (adr r3, 80023a0 <__ieee754_rem_pio2+0x2e8>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7fe f860 	bl	80001d0 <__aeabi_dsub>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	e9c4 2300 	strd	r2, r3, [r4]
 8002118:	4630      	mov	r0, r6
 800211a:	4639      	mov	r1, r7
 800211c:	f7fe f858 	bl	80001d0 <__aeabi_dsub>
 8002120:	a39f      	add	r3, pc, #636	; (adr r3, 80023a0 <__ieee754_rem_pio2+0x2e8>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe f853 	bl	80001d0 <__aeabi_dsub>
 800212a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800212e:	2501      	movs	r5, #1
 8002130:	4628      	mov	r0, r5
 8002132:	b00d      	add	sp, #52	; 0x34
 8002134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002138:	a39b      	add	r3, pc, #620	; (adr r3, 80023a8 <__ieee754_rem_pio2+0x2f0>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe f847 	bl	80001d0 <__aeabi_dsub>
 8002142:	a39b      	add	r3, pc, #620	; (adr r3, 80023b0 <__ieee754_rem_pio2+0x2f8>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	4606      	mov	r6, r0
 800214a:	460f      	mov	r7, r1
 800214c:	f7fe f840 	bl	80001d0 <__aeabi_dsub>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	e9c4 2300 	strd	r2, r3, [r4]
 8002158:	4630      	mov	r0, r6
 800215a:	4639      	mov	r1, r7
 800215c:	f7fe f838 	bl	80001d0 <__aeabi_dsub>
 8002160:	a393      	add	r3, pc, #588	; (adr r3, 80023b0 <__ieee754_rem_pio2+0x2f8>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	e7de      	b.n	8002126 <__ieee754_rem_pio2+0x6e>
 8002168:	f7fe f834 	bl	80001d4 <__adddf3>
 800216c:	45a8      	cmp	r8, r5
 800216e:	4606      	mov	r6, r0
 8002170:	460f      	mov	r7, r1
 8002172:	d016      	beq.n	80021a2 <__ieee754_rem_pio2+0xea>
 8002174:	a38a      	add	r3, pc, #552	; (adr r3, 80023a0 <__ieee754_rem_pio2+0x2e8>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe f82b 	bl	80001d4 <__adddf3>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	e9c4 2300 	strd	r2, r3, [r4]
 8002186:	4630      	mov	r0, r6
 8002188:	4639      	mov	r1, r7
 800218a:	f7fe f821 	bl	80001d0 <__aeabi_dsub>
 800218e:	a384      	add	r3, pc, #528	; (adr r3, 80023a0 <__ieee754_rem_pio2+0x2e8>)
 8002190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002194:	f7fe f81e 	bl	80001d4 <__adddf3>
 8002198:	f04f 35ff 	mov.w	r5, #4294967295
 800219c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80021a0:	e7c6      	b.n	8002130 <__ieee754_rem_pio2+0x78>
 80021a2:	a381      	add	r3, pc, #516	; (adr r3, 80023a8 <__ieee754_rem_pio2+0x2f0>)
 80021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a8:	f7fe f814 	bl	80001d4 <__adddf3>
 80021ac:	a380      	add	r3, pc, #512	; (adr r3, 80023b0 <__ieee754_rem_pio2+0x2f8>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	4606      	mov	r6, r0
 80021b4:	460f      	mov	r7, r1
 80021b6:	f7fe f80d 	bl	80001d4 <__adddf3>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	e9c4 2300 	strd	r2, r3, [r4]
 80021c2:	4630      	mov	r0, r6
 80021c4:	4639      	mov	r1, r7
 80021c6:	f7fe f803 	bl	80001d0 <__aeabi_dsub>
 80021ca:	a379      	add	r3, pc, #484	; (adr r3, 80023b0 <__ieee754_rem_pio2+0x2f8>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	e7e0      	b.n	8002194 <__ieee754_rem_pio2+0xdc>
 80021d2:	4b82      	ldr	r3, [pc, #520]	; (80023dc <__ieee754_rem_pio2+0x324>)
 80021d4:	4598      	cmp	r8, r3
 80021d6:	f300 80d0 	bgt.w	800237a <__ieee754_rem_pio2+0x2c2>
 80021da:	f001 f95b 	bl	8003494 <fabs>
 80021de:	ec57 6b10 	vmov	r6, r7, d0
 80021e2:	ee10 0a10 	vmov	r0, s0
 80021e6:	a374      	add	r3, pc, #464	; (adr r3, 80023b8 <__ieee754_rem_pio2+0x300>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	4639      	mov	r1, r7
 80021ee:	f7fe f9a3 	bl	8000538 <__aeabi_dmul>
 80021f2:	2200      	movs	r2, #0
 80021f4:	4b7a      	ldr	r3, [pc, #488]	; (80023e0 <__ieee754_rem_pio2+0x328>)
 80021f6:	f7fd ffed 	bl	80001d4 <__adddf3>
 80021fa:	f7fe fc37 	bl	8000a6c <__aeabi_d2iz>
 80021fe:	4605      	mov	r5, r0
 8002200:	f7fe f934 	bl	800046c <__aeabi_i2d>
 8002204:	a364      	add	r3, pc, #400	; (adr r3, 8002398 <__ieee754_rem_pio2+0x2e0>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800220e:	f7fe f993 	bl	8000538 <__aeabi_dmul>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4630      	mov	r0, r6
 8002218:	4639      	mov	r1, r7
 800221a:	f7fd ffd9 	bl	80001d0 <__aeabi_dsub>
 800221e:	a360      	add	r3, pc, #384	; (adr r3, 80023a0 <__ieee754_rem_pio2+0x2e8>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	4682      	mov	sl, r0
 8002226:	468b      	mov	fp, r1
 8002228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800222c:	f7fe f984 	bl	8000538 <__aeabi_dmul>
 8002230:	2d1f      	cmp	r5, #31
 8002232:	4606      	mov	r6, r0
 8002234:	460f      	mov	r7, r1
 8002236:	dc2a      	bgt.n	800228e <__ieee754_rem_pio2+0x1d6>
 8002238:	1e6a      	subs	r2, r5, #1
 800223a:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <__ieee754_rem_pio2+0x32c>)
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	4598      	cmp	r8, r3
 8002242:	d024      	beq.n	800228e <__ieee754_rem_pio2+0x1d6>
 8002244:	4632      	mov	r2, r6
 8002246:	463b      	mov	r3, r7
 8002248:	4650      	mov	r0, sl
 800224a:	4659      	mov	r1, fp
 800224c:	f7fd ffc0 	bl	80001d0 <__aeabi_dsub>
 8002250:	e9c4 0100 	strd	r0, r1, [r4]
 8002254:	e9d4 8900 	ldrd	r8, r9, [r4]
 8002258:	4650      	mov	r0, sl
 800225a:	4642      	mov	r2, r8
 800225c:	464b      	mov	r3, r9
 800225e:	4659      	mov	r1, fp
 8002260:	f7fd ffb6 	bl	80001d0 <__aeabi_dsub>
 8002264:	463b      	mov	r3, r7
 8002266:	4632      	mov	r2, r6
 8002268:	f7fd ffb2 	bl	80001d0 <__aeabi_dsub>
 800226c:	9b04      	ldr	r3, [sp, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002274:	f6bf af5c 	bge.w	8002130 <__ieee754_rem_pio2+0x78>
 8002278:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800227c:	6063      	str	r3, [r4, #4]
 800227e:	f8c4 8000 	str.w	r8, [r4]
 8002282:	60a0      	str	r0, [r4, #8]
 8002284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002288:	60e3      	str	r3, [r4, #12]
 800228a:	426d      	negs	r5, r5
 800228c:	e750      	b.n	8002130 <__ieee754_rem_pio2+0x78>
 800228e:	4632      	mov	r2, r6
 8002290:	463b      	mov	r3, r7
 8002292:	4650      	mov	r0, sl
 8002294:	4659      	mov	r1, fp
 8002296:	f7fd ff9b 	bl	80001d0 <__aeabi_dsub>
 800229a:	ea4f 5228 	mov.w	r2, r8, asr #20
 800229e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	e9c4 0100 	strd	r0, r1, [r4]
 80022aa:	9205      	str	r2, [sp, #20]
 80022ac:	ddd2      	ble.n	8002254 <__ieee754_rem_pio2+0x19c>
 80022ae:	a33e      	add	r3, pc, #248	; (adr r3, 80023a8 <__ieee754_rem_pio2+0x2f0>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022b8:	f7fe f93e 	bl	8000538 <__aeabi_dmul>
 80022bc:	4606      	mov	r6, r0
 80022be:	460f      	mov	r7, r1
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4650      	mov	r0, sl
 80022c6:	4659      	mov	r1, fp
 80022c8:	f7fd ff82 	bl	80001d0 <__aeabi_dsub>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4680      	mov	r8, r0
 80022d2:	4689      	mov	r9, r1
 80022d4:	4650      	mov	r0, sl
 80022d6:	4659      	mov	r1, fp
 80022d8:	f7fd ff7a 	bl	80001d0 <__aeabi_dsub>
 80022dc:	4632      	mov	r2, r6
 80022de:	463b      	mov	r3, r7
 80022e0:	f7fd ff76 	bl	80001d0 <__aeabi_dsub>
 80022e4:	a332      	add	r3, pc, #200	; (adr r3, 80023b0 <__ieee754_rem_pio2+0x2f8>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	4606      	mov	r6, r0
 80022ec:	460f      	mov	r7, r1
 80022ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022f2:	f7fe f921 	bl	8000538 <__aeabi_dmul>
 80022f6:	4632      	mov	r2, r6
 80022f8:	463b      	mov	r3, r7
 80022fa:	f7fd ff69 	bl	80001d0 <__aeabi_dsub>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4606      	mov	r6, r0
 8002304:	460f      	mov	r7, r1
 8002306:	4640      	mov	r0, r8
 8002308:	4649      	mov	r1, r9
 800230a:	f7fd ff61 	bl	80001d0 <__aeabi_dsub>
 800230e:	9a05      	ldr	r2, [sp, #20]
 8002310:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b31      	cmp	r3, #49	; 0x31
 8002318:	e9c4 0100 	strd	r0, r1, [r4]
 800231c:	dd2a      	ble.n	8002374 <__ieee754_rem_pio2+0x2bc>
 800231e:	a328      	add	r3, pc, #160	; (adr r3, 80023c0 <__ieee754_rem_pio2+0x308>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002328:	f7fe f906 	bl	8000538 <__aeabi_dmul>
 800232c:	4606      	mov	r6, r0
 800232e:	460f      	mov	r7, r1
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4640      	mov	r0, r8
 8002336:	4649      	mov	r1, r9
 8002338:	f7fd ff4a 	bl	80001d0 <__aeabi_dsub>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4682      	mov	sl, r0
 8002342:	468b      	mov	fp, r1
 8002344:	4640      	mov	r0, r8
 8002346:	4649      	mov	r1, r9
 8002348:	f7fd ff42 	bl	80001d0 <__aeabi_dsub>
 800234c:	4632      	mov	r2, r6
 800234e:	463b      	mov	r3, r7
 8002350:	f7fd ff3e 	bl	80001d0 <__aeabi_dsub>
 8002354:	a31c      	add	r3, pc, #112	; (adr r3, 80023c8 <__ieee754_rem_pio2+0x310>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	4606      	mov	r6, r0
 800235c:	460f      	mov	r7, r1
 800235e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002362:	f7fe f8e9 	bl	8000538 <__aeabi_dmul>
 8002366:	4632      	mov	r2, r6
 8002368:	463b      	mov	r3, r7
 800236a:	f7fd ff31 	bl	80001d0 <__aeabi_dsub>
 800236e:	4606      	mov	r6, r0
 8002370:	460f      	mov	r7, r1
 8002372:	e767      	b.n	8002244 <__ieee754_rem_pio2+0x18c>
 8002374:	46c2      	mov	sl, r8
 8002376:	46cb      	mov	fp, r9
 8002378:	e76c      	b.n	8002254 <__ieee754_rem_pio2+0x19c>
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <__ieee754_rem_pio2+0x330>)
 800237c:	4598      	cmp	r8, r3
 800237e:	dd35      	ble.n	80023ec <__ieee754_rem_pio2+0x334>
 8002380:	ee10 2a10 	vmov	r2, s0
 8002384:	463b      	mov	r3, r7
 8002386:	4630      	mov	r0, r6
 8002388:	4639      	mov	r1, r7
 800238a:	f7fd ff21 	bl	80001d0 <__aeabi_dsub>
 800238e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002392:	e9c4 0100 	strd	r0, r1, [r4]
 8002396:	e6a1      	b.n	80020dc <__ieee754_rem_pio2+0x24>
 8002398:	54400000 	.word	0x54400000
 800239c:	3ff921fb 	.word	0x3ff921fb
 80023a0:	1a626331 	.word	0x1a626331
 80023a4:	3dd0b461 	.word	0x3dd0b461
 80023a8:	1a600000 	.word	0x1a600000
 80023ac:	3dd0b461 	.word	0x3dd0b461
 80023b0:	2e037073 	.word	0x2e037073
 80023b4:	3ba3198a 	.word	0x3ba3198a
 80023b8:	6dc9c883 	.word	0x6dc9c883
 80023bc:	3fe45f30 	.word	0x3fe45f30
 80023c0:	2e000000 	.word	0x2e000000
 80023c4:	3ba3198a 	.word	0x3ba3198a
 80023c8:	252049c1 	.word	0x252049c1
 80023cc:	397b839a 	.word	0x397b839a
 80023d0:	3fe921fb 	.word	0x3fe921fb
 80023d4:	4002d97b 	.word	0x4002d97b
 80023d8:	3ff921fb 	.word	0x3ff921fb
 80023dc:	413921fb 	.word	0x413921fb
 80023e0:	3fe00000 	.word	0x3fe00000
 80023e4:	08008958 	.word	0x08008958
 80023e8:	7fefffff 	.word	0x7fefffff
 80023ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 80023f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80023f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80023f8:	4630      	mov	r0, r6
 80023fa:	460f      	mov	r7, r1
 80023fc:	f7fe fb36 	bl	8000a6c <__aeabi_d2iz>
 8002400:	f7fe f834 	bl	800046c <__aeabi_i2d>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4630      	mov	r0, r6
 800240a:	4639      	mov	r1, r7
 800240c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002410:	f7fd fede 	bl	80001d0 <__aeabi_dsub>
 8002414:	2200      	movs	r2, #0
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <__ieee754_rem_pio2+0x3dc>)
 8002418:	f7fe f88e 	bl	8000538 <__aeabi_dmul>
 800241c:	460f      	mov	r7, r1
 800241e:	4606      	mov	r6, r0
 8002420:	f7fe fb24 	bl	8000a6c <__aeabi_d2iz>
 8002424:	f7fe f822 	bl	800046c <__aeabi_i2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4630      	mov	r0, r6
 800242e:	4639      	mov	r1, r7
 8002430:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002434:	f7fd fecc 	bl	80001d0 <__aeabi_dsub>
 8002438:	2200      	movs	r2, #0
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <__ieee754_rem_pio2+0x3dc>)
 800243c:	f7fe f87c 	bl	8000538 <__aeabi_dmul>
 8002440:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002444:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002448:	f04f 0803 	mov.w	r8, #3
 800244c:	2600      	movs	r6, #0
 800244e:	2700      	movs	r7, #0
 8002450:	4632      	mov	r2, r6
 8002452:	463b      	mov	r3, r7
 8002454:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8002458:	f108 3aff 	add.w	sl, r8, #4294967295
 800245c:	f7fe fad4 	bl	8000a08 <__aeabi_dcmpeq>
 8002460:	b9b0      	cbnz	r0, 8002490 <__ieee754_rem_pio2+0x3d8>
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <__ieee754_rem_pio2+0x3e0>)
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	2302      	movs	r3, #2
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	462a      	mov	r2, r5
 800246c:	4643      	mov	r3, r8
 800246e:	4621      	mov	r1, r4
 8002470:	a806      	add	r0, sp, #24
 8002472:	f000 fc05 	bl	8002c80 <__kernel_rem_pio2>
 8002476:	9b04      	ldr	r3, [sp, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	4605      	mov	r5, r0
 800247c:	f6bf ae58 	bge.w	8002130 <__ieee754_rem_pio2+0x78>
 8002480:	6863      	ldr	r3, [r4, #4]
 8002482:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002486:	6063      	str	r3, [r4, #4]
 8002488:	68e3      	ldr	r3, [r4, #12]
 800248a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800248e:	e6fb      	b.n	8002288 <__ieee754_rem_pio2+0x1d0>
 8002490:	46d0      	mov	r8, sl
 8002492:	e7dd      	b.n	8002450 <__ieee754_rem_pio2+0x398>
 8002494:	41700000 	.word	0x41700000
 8002498:	080089d8 	.word	0x080089d8

0800249c <__ieee754_powf>:
 800249c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024a0:	ee10 5a90 	vmov	r5, s1
 80024a4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80024a8:	ed2d 8b02 	vpush	{d8}
 80024ac:	eeb0 8a40 	vmov.f32	s16, s0
 80024b0:	eef0 8a60 	vmov.f32	s17, s1
 80024b4:	f000 8295 	beq.w	80029e2 <__ieee754_powf+0x546>
 80024b8:	ee10 8a10 	vmov	r8, s0
 80024bc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80024c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80024c4:	dc06      	bgt.n	80024d4 <__ieee754_powf+0x38>
 80024c6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80024ca:	dd0a      	ble.n	80024e2 <__ieee754_powf+0x46>
 80024cc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80024d0:	f000 8287 	beq.w	80029e2 <__ieee754_powf+0x546>
 80024d4:	ecbd 8b02 	vpop	{d8}
 80024d8:	48d9      	ldr	r0, [pc, #868]	; (8002840 <__ieee754_powf+0x3a4>)
 80024da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024de:	f001 b97f 	b.w	80037e0 <nanf>
 80024e2:	f1b8 0f00 	cmp.w	r8, #0
 80024e6:	da1d      	bge.n	8002524 <__ieee754_powf+0x88>
 80024e8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80024ec:	da2c      	bge.n	8002548 <__ieee754_powf+0xac>
 80024ee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80024f2:	db30      	blt.n	8002556 <__ieee754_powf+0xba>
 80024f4:	15fb      	asrs	r3, r7, #23
 80024f6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80024fa:	fa47 f603 	asr.w	r6, r7, r3
 80024fe:	fa06 f303 	lsl.w	r3, r6, r3
 8002502:	429f      	cmp	r7, r3
 8002504:	d127      	bne.n	8002556 <__ieee754_powf+0xba>
 8002506:	f006 0601 	and.w	r6, r6, #1
 800250a:	f1c6 0602 	rsb	r6, r6, #2
 800250e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8002512:	d122      	bne.n	800255a <__ieee754_powf+0xbe>
 8002514:	2d00      	cmp	r5, #0
 8002516:	f280 826a 	bge.w	80029ee <__ieee754_powf+0x552>
 800251a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800251e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8002522:	e00d      	b.n	8002540 <__ieee754_powf+0xa4>
 8002524:	2600      	movs	r6, #0
 8002526:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800252a:	d1f0      	bne.n	800250e <__ieee754_powf+0x72>
 800252c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8002530:	f000 8257 	beq.w	80029e2 <__ieee754_powf+0x546>
 8002534:	dd0a      	ble.n	800254c <__ieee754_powf+0xb0>
 8002536:	2d00      	cmp	r5, #0
 8002538:	f280 8256 	bge.w	80029e8 <__ieee754_powf+0x54c>
 800253c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8002844 <__ieee754_powf+0x3a8>
 8002540:	ecbd 8b02 	vpop	{d8}
 8002544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002548:	2602      	movs	r6, #2
 800254a:	e7ec      	b.n	8002526 <__ieee754_powf+0x8a>
 800254c:	2d00      	cmp	r5, #0
 800254e:	daf5      	bge.n	800253c <__ieee754_powf+0xa0>
 8002550:	eeb1 0a68 	vneg.f32	s0, s17
 8002554:	e7f4      	b.n	8002540 <__ieee754_powf+0xa4>
 8002556:	2600      	movs	r6, #0
 8002558:	e7d9      	b.n	800250e <__ieee754_powf+0x72>
 800255a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800255e:	d102      	bne.n	8002566 <__ieee754_powf+0xca>
 8002560:	ee28 0a08 	vmul.f32	s0, s16, s16
 8002564:	e7ec      	b.n	8002540 <__ieee754_powf+0xa4>
 8002566:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800256a:	eeb0 0a48 	vmov.f32	s0, s16
 800256e:	d108      	bne.n	8002582 <__ieee754_powf+0xe6>
 8002570:	f1b8 0f00 	cmp.w	r8, #0
 8002574:	db05      	blt.n	8002582 <__ieee754_powf+0xe6>
 8002576:	ecbd 8b02 	vpop	{d8}
 800257a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800257e:	f000 ba4f 	b.w	8002a20 <__ieee754_sqrtf>
 8002582:	f001 f91b 	bl	80037bc <fabsf>
 8002586:	b124      	cbz	r4, 8002592 <__ieee754_powf+0xf6>
 8002588:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800258c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8002590:	d117      	bne.n	80025c2 <__ieee754_powf+0x126>
 8002592:	2d00      	cmp	r5, #0
 8002594:	bfbc      	itt	lt
 8002596:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800259a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800259e:	f1b8 0f00 	cmp.w	r8, #0
 80025a2:	dacd      	bge.n	8002540 <__ieee754_powf+0xa4>
 80025a4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80025a8:	ea54 0306 	orrs.w	r3, r4, r6
 80025ac:	d104      	bne.n	80025b8 <__ieee754_powf+0x11c>
 80025ae:	ee70 7a40 	vsub.f32	s15, s0, s0
 80025b2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80025b6:	e7c3      	b.n	8002540 <__ieee754_powf+0xa4>
 80025b8:	2e01      	cmp	r6, #1
 80025ba:	d1c1      	bne.n	8002540 <__ieee754_powf+0xa4>
 80025bc:	eeb1 0a40 	vneg.f32	s0, s0
 80025c0:	e7be      	b.n	8002540 <__ieee754_powf+0xa4>
 80025c2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80025c6:	3801      	subs	r0, #1
 80025c8:	ea56 0300 	orrs.w	r3, r6, r0
 80025cc:	d104      	bne.n	80025d8 <__ieee754_powf+0x13c>
 80025ce:	ee38 8a48 	vsub.f32	s16, s16, s16
 80025d2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80025d6:	e7b3      	b.n	8002540 <__ieee754_powf+0xa4>
 80025d8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80025dc:	dd6d      	ble.n	80026ba <__ieee754_powf+0x21e>
 80025de:	4b9a      	ldr	r3, [pc, #616]	; (8002848 <__ieee754_powf+0x3ac>)
 80025e0:	429c      	cmp	r4, r3
 80025e2:	dc06      	bgt.n	80025f2 <__ieee754_powf+0x156>
 80025e4:	2d00      	cmp	r5, #0
 80025e6:	daa9      	bge.n	800253c <__ieee754_powf+0xa0>
 80025e8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800284c <__ieee754_powf+0x3b0>
 80025ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 80025f0:	e7a6      	b.n	8002540 <__ieee754_powf+0xa4>
 80025f2:	4b97      	ldr	r3, [pc, #604]	; (8002850 <__ieee754_powf+0x3b4>)
 80025f4:	429c      	cmp	r4, r3
 80025f6:	dd02      	ble.n	80025fe <__ieee754_powf+0x162>
 80025f8:	2d00      	cmp	r5, #0
 80025fa:	dcf5      	bgt.n	80025e8 <__ieee754_powf+0x14c>
 80025fc:	e79e      	b.n	800253c <__ieee754_powf+0xa0>
 80025fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002602:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002606:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002854 <__ieee754_powf+0x3b8>
 800260a:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8002858 <__ieee754_powf+0x3bc>
 800260e:	eef1 6a40 	vneg.f32	s13, s0
 8002612:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8002616:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800261a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800261e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002622:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002626:	ee27 7a87 	vmul.f32	s14, s15, s14
 800262a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800285c <__ieee754_powf+0x3c0>
 800262e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8002632:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002860 <__ieee754_powf+0x3c4>
 8002636:	eee0 7a07 	vfma.f32	s15, s0, s14
 800263a:	eeb0 7a67 	vmov.f32	s14, s15
 800263e:	eea0 7a06 	vfma.f32	s14, s0, s12
 8002642:	ee17 3a10 	vmov	r3, s14
 8002646:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800264a:	f023 030f 	bic.w	r3, r3, #15
 800264e:	ee07 3a10 	vmov	s14, r3
 8002652:	eea6 7a86 	vfma.f32	s14, s13, s12
 8002656:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800265a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800265e:	f025 050f 	bic.w	r5, r5, #15
 8002662:	ee07 5a10 	vmov	s14, r5
 8002666:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800266a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 800266e:	ee07 3a10 	vmov	s14, r3
 8002672:	ee06 5a90 	vmov	s13, r5
 8002676:	eee7 7a28 	vfma.f32	s15, s14, s17
 800267a:	3e01      	subs	r6, #1
 800267c:	ea56 0200 	orrs.w	r2, r6, r0
 8002680:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002684:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002688:	ee77 6a87 	vadd.f32	s13, s15, s14
 800268c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8002690:	ee16 4a90 	vmov	r4, s13
 8002694:	bf08      	it	eq
 8002696:	eeb0 8a40 	vmoveq.f32	s16, s0
 800269a:	2c00      	cmp	r4, #0
 800269c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80026a0:	f340 8186 	ble.w	80029b0 <__ieee754_powf+0x514>
 80026a4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80026a8:	f340 80fc 	ble.w	80028a4 <__ieee754_powf+0x408>
 80026ac:	eddf 7a67 	vldr	s15, [pc, #412]	; 800284c <__ieee754_powf+0x3b0>
 80026b0:	ee28 0a27 	vmul.f32	s0, s16, s15
 80026b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80026b8:	e742      	b.n	8002540 <__ieee754_powf+0xa4>
 80026ba:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80026be:	bfbf      	itttt	lt
 80026c0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8002864 <__ieee754_powf+0x3c8>
 80026c4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80026c8:	f06f 0217 	mvnlt.w	r2, #23
 80026cc:	ee17 4a90 	vmovlt	r4, s15
 80026d0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80026d4:	bfa8      	it	ge
 80026d6:	2200      	movge	r2, #0
 80026d8:	3b7f      	subs	r3, #127	; 0x7f
 80026da:	4413      	add	r3, r2
 80026dc:	4a62      	ldr	r2, [pc, #392]	; (8002868 <__ieee754_powf+0x3cc>)
 80026de:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80026e2:	4294      	cmp	r4, r2
 80026e4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80026e8:	dd06      	ble.n	80026f8 <__ieee754_powf+0x25c>
 80026ea:	4a60      	ldr	r2, [pc, #384]	; (800286c <__ieee754_powf+0x3d0>)
 80026ec:	4294      	cmp	r4, r2
 80026ee:	f340 80a5 	ble.w	800283c <__ieee754_powf+0x3a0>
 80026f2:	3301      	adds	r3, #1
 80026f4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80026f8:	2400      	movs	r4, #0
 80026fa:	4a5d      	ldr	r2, [pc, #372]	; (8002870 <__ieee754_powf+0x3d4>)
 80026fc:	00a7      	lsls	r7, r4, #2
 80026fe:	443a      	add	r2, r7
 8002700:	ee07 1a90 	vmov	s15, r1
 8002704:	ed92 7a00 	vldr	s14, [r2]
 8002708:	4a5a      	ldr	r2, [pc, #360]	; (8002874 <__ieee754_powf+0x3d8>)
 800270a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800270e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002712:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 8002716:	1049      	asrs	r1, r1, #1
 8002718:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800271c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8002720:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8002724:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8002728:	ee06 1a90 	vmov	s13, r1
 800272c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8002730:	ee14 ea90 	vmov	lr, s9
 8002734:	ea02 0e0e 	and.w	lr, r2, lr
 8002738:	ee05 ea90 	vmov	s11, lr
 800273c:	eeb1 4a65 	vneg.f32	s8, s11
 8002740:	eea4 6a26 	vfma.f32	s12, s8, s13
 8002744:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8002748:	ee35 7aa4 	vadd.f32	s14, s11, s9
 800274c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002750:	eddf 7a49 	vldr	s15, [pc, #292]	; 8002878 <__ieee754_powf+0x3dc>
 8002754:	eea4 6a26 	vfma.f32	s12, s8, s13
 8002758:	ee66 6a05 	vmul.f32	s13, s12, s10
 800275c:	ee24 6aa4 	vmul.f32	s12, s9, s9
 8002760:	ed9f 5a46 	vldr	s10, [pc, #280]	; 800287c <__ieee754_powf+0x3e0>
 8002764:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002768:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8002880 <__ieee754_powf+0x3e4>
 800276c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8002770:	eddf 7a38 	vldr	s15, [pc, #224]	; 8002854 <__ieee754_powf+0x3b8>
 8002774:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002778:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8002884 <__ieee754_powf+0x3e8>
 800277c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8002780:	eddf 7a41 	vldr	s15, [pc, #260]	; 8002888 <__ieee754_powf+0x3ec>
 8002784:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002788:	ee66 3a06 	vmul.f32	s7, s12, s12
 800278c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8002790:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002794:	eeb0 6a45 	vmov.f32	s12, s10
 8002798:	eea3 7aa7 	vfma.f32	s14, s7, s15
 800279c:	eea5 6aa5 	vfma.f32	s12, s11, s11
 80027a0:	ee36 6a07 	vadd.f32	s12, s12, s14
 80027a4:	ee16 1a10 	vmov	r1, s12
 80027a8:	4011      	ands	r1, r2
 80027aa:	ee06 1a10 	vmov	s12, r1
 80027ae:	ee76 7a45 	vsub.f32	s15, s12, s10
 80027b2:	ed9f 5a36 	vldr	s10, [pc, #216]	; 800288c <__ieee754_powf+0x3f0>
 80027b6:	eee4 7a25 	vfma.f32	s15, s8, s11
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80027c2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80027c6:	eeb0 7a67 	vmov.f32	s14, s15
 80027ca:	eea5 7a86 	vfma.f32	s14, s11, s12
 80027ce:	ee17 1a10 	vmov	r1, s14
 80027d2:	4011      	ands	r1, r2
 80027d4:	ee07 1a10 	vmov	s14, r1
 80027d8:	eea4 7a06 	vfma.f32	s14, s8, s12
 80027dc:	ee05 1a90 	vmov	s11, r1
 80027e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027e4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002890 <__ieee754_powf+0x3f4>
 80027e8:	492a      	ldr	r1, [pc, #168]	; (8002894 <__ieee754_powf+0x3f8>)
 80027ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ee:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002898 <__ieee754_powf+0x3fc>
 80027f2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80027f6:	4439      	add	r1, r7
 80027f8:	ed91 7a00 	vldr	s14, [r1]
 80027fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eeb0 6a47 	vmov.f32	s12, s14
 8002808:	4b24      	ldr	r3, [pc, #144]	; (800289c <__ieee754_powf+0x400>)
 800280a:	eea5 6a85 	vfma.f32	s12, s11, s10
 800280e:	443b      	add	r3, r7
 8002810:	edd3 4a00 	vldr	s9, [r3]
 8002814:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002818:	ee36 6a24 	vadd.f32	s12, s12, s9
 800281c:	ee76 7a26 	vadd.f32	s15, s12, s13
 8002820:	ee17 3a90 	vmov	r3, s15
 8002824:	4013      	ands	r3, r2
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800282e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8002832:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8002836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283a:	e70e      	b.n	800265a <__ieee754_powf+0x1be>
 800283c:	2401      	movs	r4, #1
 800283e:	e75c      	b.n	80026fa <__ieee754_powf+0x25e>
 8002840:	08008954 	.word	0x08008954
 8002844:	00000000 	.word	0x00000000
 8002848:	3f7ffff7 	.word	0x3f7ffff7
 800284c:	7149f2ca 	.word	0x7149f2ca
 8002850:	3f800007 	.word	0x3f800007
 8002854:	3eaaaaab 	.word	0x3eaaaaab
 8002858:	3fb8aa00 	.word	0x3fb8aa00
 800285c:	3fb8aa3b 	.word	0x3fb8aa3b
 8002860:	36eca570 	.word	0x36eca570
 8002864:	4b800000 	.word	0x4b800000
 8002868:	001cc471 	.word	0x001cc471
 800286c:	005db3d6 	.word	0x005db3d6
 8002870:	08008ae0 	.word	0x08008ae0
 8002874:	fffff000 	.word	0xfffff000
 8002878:	3e6c3255 	.word	0x3e6c3255
 800287c:	3e53f142 	.word	0x3e53f142
 8002880:	3e8ba305 	.word	0x3e8ba305
 8002884:	3edb6db7 	.word	0x3edb6db7
 8002888:	3f19999a 	.word	0x3f19999a
 800288c:	3f763800 	.word	0x3f763800
 8002890:	3f76384f 	.word	0x3f76384f
 8002894:	08008af0 	.word	0x08008af0
 8002898:	369dc3a0 	.word	0x369dc3a0
 800289c:	08008ae8 	.word	0x08008ae8
 80028a0:	3338aa3c 	.word	0x3338aa3c
 80028a4:	f040 8094 	bne.w	80029d0 <__ieee754_powf+0x534>
 80028a8:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 80028a0 <__ieee754_powf+0x404>
 80028ac:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80028b0:	ee37 6a86 	vadd.f32	s12, s15, s12
 80028b4:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	f73f aef6 	bgt.w	80026ac <__ieee754_powf+0x210>
 80028c0:	15db      	asrs	r3, r3, #23
 80028c2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80028c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80028ca:	4103      	asrs	r3, r0
 80028cc:	4423      	add	r3, r4
 80028ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80028d2:	4948      	ldr	r1, [pc, #288]	; (80029f4 <__ieee754_powf+0x558>)
 80028d4:	3a7f      	subs	r2, #127	; 0x7f
 80028d6:	4111      	asrs	r1, r2
 80028d8:	ea23 0101 	bic.w	r1, r3, r1
 80028dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80028e0:	ee06 1a90 	vmov	s13, r1
 80028e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80028e8:	f1c2 0217 	rsb	r2, r2, #23
 80028ec:	4110      	asrs	r0, r2
 80028ee:	2c00      	cmp	r4, #0
 80028f0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80028f4:	bfb8      	it	lt
 80028f6:	4240      	neglt	r0, r0
 80028f8:	ee77 6a27 	vadd.f32	s13, s14, s15
 80028fc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80029f8 <__ieee754_powf+0x55c>
 8002900:	ee16 3a90 	vmov	r3, s13
 8002904:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002908:	f023 030f 	bic.w	r3, r3, #15
 800290c:	ee06 3a90 	vmov	s13, r3
 8002910:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002918:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80029fc <__ieee754_powf+0x560>
 800291c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002920:	eea7 7a86 	vfma.f32	s14, s15, s12
 8002924:	eef0 7a47 	vmov.f32	s15, s14
 8002928:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002a00 <__ieee754_powf+0x564>
 800292c:	eeb0 0a67 	vmov.f32	s0, s15
 8002930:	eea6 0a87 	vfma.f32	s0, s13, s14
 8002934:	eeb0 6a40 	vmov.f32	s12, s0
 8002938:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800293c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002940:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002944:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002a04 <__ieee754_powf+0x568>
 8002948:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8002a08 <__ieee754_powf+0x56c>
 800294c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8002950:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002a0c <__ieee754_powf+0x570>
 8002954:	eee7 6a06 	vfma.f32	s13, s14, s12
 8002958:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8002a10 <__ieee754_powf+0x574>
 800295c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8002960:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002a14 <__ieee754_powf+0x578>
 8002964:	eee7 6a06 	vfma.f32	s13, s14, s12
 8002968:	eeb0 6a40 	vmov.f32	s12, s0
 800296c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8002970:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002974:	eeb0 7a46 	vmov.f32	s14, s12
 8002978:	ee77 6a66 	vsub.f32	s13, s14, s13
 800297c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8002980:	eee0 7a27 	vfma.f32	s15, s0, s15
 8002984:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002990:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002994:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002998:	ee10 3a10 	vmov	r3, s0
 800299c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80029a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029a4:	da1a      	bge.n	80029dc <__ieee754_powf+0x540>
 80029a6:	f000 ff21 	bl	80037ec <scalbnf>
 80029aa:	ee20 0a08 	vmul.f32	s0, s0, s16
 80029ae:	e5c7      	b.n	8002540 <__ieee754_powf+0xa4>
 80029b0:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <__ieee754_powf+0x57c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	dd02      	ble.n	80029bc <__ieee754_powf+0x520>
 80029b6:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002a1c <__ieee754_powf+0x580>
 80029ba:	e679      	b.n	80026b0 <__ieee754_powf+0x214>
 80029bc:	d108      	bne.n	80029d0 <__ieee754_powf+0x534>
 80029be:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80029c2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	f63f af79 	bhi.w	80028c0 <__ieee754_powf+0x424>
 80029ce:	e7f2      	b.n	80029b6 <__ieee754_powf+0x51a>
 80029d0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80029d4:	f73f af74 	bgt.w	80028c0 <__ieee754_powf+0x424>
 80029d8:	2000      	movs	r0, #0
 80029da:	e78d      	b.n	80028f8 <__ieee754_powf+0x45c>
 80029dc:	ee00 3a10 	vmov	s0, r3
 80029e0:	e7e3      	b.n	80029aa <__ieee754_powf+0x50e>
 80029e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80029e6:	e5ab      	b.n	8002540 <__ieee754_powf+0xa4>
 80029e8:	eeb0 0a68 	vmov.f32	s0, s17
 80029ec:	e5a8      	b.n	8002540 <__ieee754_powf+0xa4>
 80029ee:	eeb0 0a48 	vmov.f32	s0, s16
 80029f2:	e5a5      	b.n	8002540 <__ieee754_powf+0xa4>
 80029f4:	007fffff 	.word	0x007fffff
 80029f8:	3f317218 	.word	0x3f317218
 80029fc:	35bfbe8c 	.word	0x35bfbe8c
 8002a00:	3f317200 	.word	0x3f317200
 8002a04:	3331bb4c 	.word	0x3331bb4c
 8002a08:	b5ddea0e 	.word	0xb5ddea0e
 8002a0c:	388ab355 	.word	0x388ab355
 8002a10:	bb360b61 	.word	0xbb360b61
 8002a14:	3e2aaaab 	.word	0x3e2aaaab
 8002a18:	43160000 	.word	0x43160000
 8002a1c:	0da24260 	.word	0x0da24260

08002a20 <__ieee754_sqrtf>:
 8002a20:	ee10 2a10 	vmov	r2, s0
 8002a24:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8002a28:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	d302      	bcc.n	8002a36 <__ieee754_sqrtf+0x16>
 8002a30:	eea0 0a00 	vfma.f32	s0, s0, s0
 8002a34:	bd70      	pop	{r4, r5, r6, pc}
 8002a36:	b3b1      	cbz	r1, 8002aa6 <__ieee754_sqrtf+0x86>
 8002a38:	2a00      	cmp	r2, #0
 8002a3a:	da04      	bge.n	8002a46 <__ieee754_sqrtf+0x26>
 8002a3c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002a40:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002a44:	bd70      	pop	{r4, r5, r6, pc}
 8002a46:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002a4a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8002a4e:	d204      	bcs.n	8002a5a <__ieee754_sqrtf+0x3a>
 8002a50:	2100      	movs	r1, #0
 8002a52:	0210      	lsls	r0, r2, #8
 8002a54:	d528      	bpl.n	8002aa8 <__ieee754_sqrtf+0x88>
 8002a56:	3901      	subs	r1, #1
 8002a58:	1a5b      	subs	r3, r3, r1
 8002a5a:	3b7f      	subs	r3, #127	; 0x7f
 8002a5c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8002a60:	07d9      	lsls	r1, r3, #31
 8002a62:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a66:	bf48      	it	mi
 8002a68:	0052      	lslmi	r2, r2, #1
 8002a6a:	1059      	asrs	r1, r3, #1
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	0052      	lsls	r2, r2, #1
 8002a70:	2419      	movs	r4, #25
 8002a72:	461e      	mov	r6, r3
 8002a74:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002a78:	1835      	adds	r5, r6, r0
 8002a7a:	4295      	cmp	r5, r2
 8002a7c:	bfde      	ittt	le
 8002a7e:	182e      	addle	r6, r5, r0
 8002a80:	1b52      	suble	r2, r2, r5
 8002a82:	181b      	addle	r3, r3, r0
 8002a84:	3c01      	subs	r4, #1
 8002a86:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002a8a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8002a8e:	d1f3      	bne.n	8002a78 <__ieee754_sqrtf+0x58>
 8002a90:	b112      	cbz	r2, 8002a98 <__ieee754_sqrtf+0x78>
 8002a92:	3301      	adds	r3, #1
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	105b      	asrs	r3, r3, #1
 8002a9a:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8002a9e:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8002aa2:	ee00 3a10 	vmov	s0, r3
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
 8002aa8:	0052      	lsls	r2, r2, #1
 8002aaa:	3101      	adds	r1, #1
 8002aac:	e7d1      	b.n	8002a52 <__ieee754_sqrtf+0x32>
	...

08002ab0 <__kernel_cos>:
 8002ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab4:	ec59 8b10 	vmov	r8, r9, d0
 8002ab8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8002abc:	b085      	sub	sp, #20
 8002abe:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8002ac2:	ed8d 1b00 	vstr	d1, [sp]
 8002ac6:	da07      	bge.n	8002ad8 <__kernel_cos+0x28>
 8002ac8:	ee10 0a10 	vmov	r0, s0
 8002acc:	4649      	mov	r1, r9
 8002ace:	f7fd ffcd 	bl	8000a6c <__aeabi_d2iz>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	f000 80aa 	beq.w	8002c2c <__kernel_cos+0x17c>
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	4640      	mov	r0, r8
 8002ade:	4649      	mov	r1, r9
 8002ae0:	f7fd fd2a 	bl	8000538 <__aeabi_dmul>
 8002ae4:	a359      	add	r3, pc, #356	; (adr r3, 8002c4c <__kernel_cos+0x19c>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	4604      	mov	r4, r0
 8002aec:	460d      	mov	r5, r1
 8002aee:	f7fd fd23 	bl	8000538 <__aeabi_dmul>
 8002af2:	a358      	add	r3, pc, #352	; (adr r3, 8002c54 <__kernel_cos+0x1a4>)
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	f7fd fb6c 	bl	80001d4 <__adddf3>
 8002afc:	4622      	mov	r2, r4
 8002afe:	462b      	mov	r3, r5
 8002b00:	f7fd fd1a 	bl	8000538 <__aeabi_dmul>
 8002b04:	a355      	add	r3, pc, #340	; (adr r3, 8002c5c <__kernel_cos+0x1ac>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	f7fd fb61 	bl	80001d0 <__aeabi_dsub>
 8002b0e:	4622      	mov	r2, r4
 8002b10:	462b      	mov	r3, r5
 8002b12:	f7fd fd11 	bl	8000538 <__aeabi_dmul>
 8002b16:	a353      	add	r3, pc, #332	; (adr r3, 8002c64 <__kernel_cos+0x1b4>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f7fd fb5a 	bl	80001d4 <__adddf3>
 8002b20:	4622      	mov	r2, r4
 8002b22:	462b      	mov	r3, r5
 8002b24:	f7fd fd08 	bl	8000538 <__aeabi_dmul>
 8002b28:	a350      	add	r3, pc, #320	; (adr r3, 8002c6c <__kernel_cos+0x1bc>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fb4f 	bl	80001d0 <__aeabi_dsub>
 8002b32:	4622      	mov	r2, r4
 8002b34:	462b      	mov	r3, r5
 8002b36:	f7fd fcff 	bl	8000538 <__aeabi_dmul>
 8002b3a:	a34e      	add	r3, pc, #312	; (adr r3, 8002c74 <__kernel_cos+0x1c4>)
 8002b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b40:	f7fd fb48 	bl	80001d4 <__adddf3>
 8002b44:	462b      	mov	r3, r5
 8002b46:	4622      	mov	r2, r4
 8002b48:	f7fd fcf6 	bl	8000538 <__aeabi_dmul>
 8002b4c:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <__kernel_cos+0x188>)
 8002b4e:	429f      	cmp	r7, r3
 8002b50:	4682      	mov	sl, r0
 8002b52:	468b      	mov	fp, r1
 8002b54:	dc2c      	bgt.n	8002bb0 <__kernel_cos+0x100>
 8002b56:	2200      	movs	r2, #0
 8002b58:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <__kernel_cos+0x18c>)
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f7fd fceb 	bl	8000538 <__aeabi_dmul>
 8002b62:	4652      	mov	r2, sl
 8002b64:	4606      	mov	r6, r0
 8002b66:	460f      	mov	r7, r1
 8002b68:	465b      	mov	r3, fp
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	f7fd fce3 	bl	8000538 <__aeabi_dmul>
 8002b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b76:	4604      	mov	r4, r0
 8002b78:	460d      	mov	r5, r1
 8002b7a:	4640      	mov	r0, r8
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	f7fd fcdb 	bl	8000538 <__aeabi_dmul>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4620      	mov	r0, r4
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f7fd fb21 	bl	80001d0 <__aeabi_dsub>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4630      	mov	r0, r6
 8002b94:	4639      	mov	r1, r7
 8002b96:	f7fd fb1b 	bl	80001d0 <__aeabi_dsub>
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4928      	ldr	r1, [pc, #160]	; (8002c40 <__kernel_cos+0x190>)
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fd fb15 	bl	80001d0 <__aeabi_dsub>
 8002ba6:	ec41 0b10 	vmov	d0, r0, r1
 8002baa:	b005      	add	sp, #20
 8002bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb0:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <__kernel_cos+0x194>)
 8002bb2:	4923      	ldr	r1, [pc, #140]	; (8002c40 <__kernel_cos+0x190>)
 8002bb4:	429f      	cmp	r7, r3
 8002bb6:	bfd7      	itett	le
 8002bb8:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8002bbc:	4f22      	ldrgt	r7, [pc, #136]	; (8002c48 <__kernel_cos+0x198>)
 8002bbe:	2200      	movle	r2, #0
 8002bc0:	4616      	movle	r6, r2
 8002bc2:	bfd4      	ite	le
 8002bc4:	461f      	movle	r7, r3
 8002bc6:	2600      	movgt	r6, #0
 8002bc8:	4632      	mov	r2, r6
 8002bca:	463b      	mov	r3, r7
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fd faff 	bl	80001d0 <__aeabi_dsub>
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <__kernel_cos+0x18c>)
 8002bda:	4620      	mov	r0, r4
 8002bdc:	4629      	mov	r1, r5
 8002bde:	f7fd fcab 	bl	8000538 <__aeabi_dmul>
 8002be2:	4632      	mov	r2, r6
 8002be4:	463b      	mov	r3, r7
 8002be6:	f7fd faf3 	bl	80001d0 <__aeabi_dsub>
 8002bea:	4652      	mov	r2, sl
 8002bec:	4606      	mov	r6, r0
 8002bee:	460f      	mov	r7, r1
 8002bf0:	465b      	mov	r3, fp
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	f7fd fc9f 	bl	8000538 <__aeabi_dmul>
 8002bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002bfe:	4604      	mov	r4, r0
 8002c00:	460d      	mov	r5, r1
 8002c02:	4640      	mov	r0, r8
 8002c04:	4649      	mov	r1, r9
 8002c06:	f7fd fc97 	bl	8000538 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4629      	mov	r1, r5
 8002c12:	f7fd fadd 	bl	80001d0 <__aeabi_dsub>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	4639      	mov	r1, r7
 8002c1e:	f7fd fad7 	bl	80001d0 <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c2a:	e7ba      	b.n	8002ba2 <__kernel_cos+0xf2>
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	4904      	ldr	r1, [pc, #16]	; (8002c40 <__kernel_cos+0x190>)
 8002c30:	e7b9      	b.n	8002ba6 <__kernel_cos+0xf6>
 8002c32:	bf00      	nop
 8002c34:	f3af 8000 	nop.w
 8002c38:	3fd33332 	.word	0x3fd33332
 8002c3c:	3fe00000 	.word	0x3fe00000
 8002c40:	3ff00000 	.word	0x3ff00000
 8002c44:	3fe90000 	.word	0x3fe90000
 8002c48:	3fd20000 	.word	0x3fd20000
 8002c4c:	be8838d4 	.word	0xbe8838d4
 8002c50:	bda8fae9 	.word	0xbda8fae9
 8002c54:	bdb4b1c4 	.word	0xbdb4b1c4
 8002c58:	3e21ee9e 	.word	0x3e21ee9e
 8002c5c:	809c52ad 	.word	0x809c52ad
 8002c60:	3e927e4f 	.word	0x3e927e4f
 8002c64:	19cb1590 	.word	0x19cb1590
 8002c68:	3efa01a0 	.word	0x3efa01a0
 8002c6c:	16c15177 	.word	0x16c15177
 8002c70:	3f56c16c 	.word	0x3f56c16c
 8002c74:	5555554c 	.word	0x5555554c
 8002c78:	3fa55555 	.word	0x3fa55555
 8002c7c:	00000000 	.word	0x00000000

08002c80 <__kernel_rem_pio2>:
 8002c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c84:	ed2d 8b02 	vpush	{d8}
 8002c88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8002c8c:	1ed4      	subs	r4, r2, #3
 8002c8e:	9306      	str	r3, [sp, #24]
 8002c90:	9102      	str	r1, [sp, #8]
 8002c92:	4bc3      	ldr	r3, [pc, #780]	; (8002fa0 <__kernel_rem_pio2+0x320>)
 8002c94:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8002c96:	9009      	str	r0, [sp, #36]	; 0x24
 8002c98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	9b06      	ldr	r3, [sp, #24]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	9304      	str	r3, [sp, #16]
 8002ca4:	2318      	movs	r3, #24
 8002ca6:	fb94 f4f3 	sdiv	r4, r4, r3
 8002caa:	f06f 0317 	mvn.w	r3, #23
 8002cae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8002cb2:	fb04 3303 	mla	r3, r4, r3, r3
 8002cb6:	eb03 0a02 	add.w	sl, r3, r2
 8002cba:	9b00      	ldr	r3, [sp, #0]
 8002cbc:	9a04      	ldr	r2, [sp, #16]
 8002cbe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8002f90 <__kernel_rem_pio2+0x310>
 8002cc2:	eb03 0802 	add.w	r8, r3, r2
 8002cc6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002cc8:	1aa7      	subs	r7, r4, r2
 8002cca:	ae20      	add	r6, sp, #128	; 0x80
 8002ccc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002cd0:	2500      	movs	r5, #0
 8002cd2:	4545      	cmp	r5, r8
 8002cd4:	dd13      	ble.n	8002cfe <__kernel_rem_pio2+0x7e>
 8002cd6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8002f90 <__kernel_rem_pio2+0x310>
 8002cda:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8002cde:	2600      	movs	r6, #0
 8002ce0:	9b00      	ldr	r3, [sp, #0]
 8002ce2:	429e      	cmp	r6, r3
 8002ce4:	dc32      	bgt.n	8002d4c <__kernel_rem_pio2+0xcc>
 8002ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ce8:	9303      	str	r3, [sp, #12]
 8002cea:	9b06      	ldr	r3, [sp, #24]
 8002cec:	199d      	adds	r5, r3, r6
 8002cee:	ab20      	add	r3, sp, #128	; 0x80
 8002cf0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002cf4:	9308      	str	r3, [sp, #32]
 8002cf6:	ec59 8b18 	vmov	r8, r9, d8
 8002cfa:	2700      	movs	r7, #0
 8002cfc:	e01f      	b.n	8002d3e <__kernel_rem_pio2+0xbe>
 8002cfe:	42ef      	cmn	r7, r5
 8002d00:	d407      	bmi.n	8002d12 <__kernel_rem_pio2+0x92>
 8002d02:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002d06:	f7fd fbb1 	bl	800046c <__aeabi_i2d>
 8002d0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002d0e:	3501      	adds	r5, #1
 8002d10:	e7df      	b.n	8002cd2 <__kernel_rem_pio2+0x52>
 8002d12:	ec51 0b18 	vmov	r0, r1, d8
 8002d16:	e7f8      	b.n	8002d0a <__kernel_rem_pio2+0x8a>
 8002d18:	9908      	ldr	r1, [sp, #32]
 8002d1a:	9d03      	ldr	r5, [sp, #12]
 8002d1c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002d20:	9108      	str	r1, [sp, #32]
 8002d22:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002d26:	9503      	str	r5, [sp, #12]
 8002d28:	f7fd fc06 	bl	8000538 <__aeabi_dmul>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4640      	mov	r0, r8
 8002d32:	4649      	mov	r1, r9
 8002d34:	f7fd fa4e 	bl	80001d4 <__adddf3>
 8002d38:	3701      	adds	r7, #1
 8002d3a:	4680      	mov	r8, r0
 8002d3c:	4689      	mov	r9, r1
 8002d3e:	9b04      	ldr	r3, [sp, #16]
 8002d40:	429f      	cmp	r7, r3
 8002d42:	dde9      	ble.n	8002d18 <__kernel_rem_pio2+0x98>
 8002d44:	e8eb 8902 	strd	r8, r9, [fp], #8
 8002d48:	3601      	adds	r6, #1
 8002d4a:	e7c9      	b.n	8002ce0 <__kernel_rem_pio2+0x60>
 8002d4c:	9b00      	ldr	r3, [sp, #0]
 8002d4e:	9f00      	ldr	r7, [sp, #0]
 8002d50:	aa0c      	add	r2, sp, #48	; 0x30
 8002d52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d58:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002d5a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8002d60:	ab98      	add	r3, sp, #608	; 0x260
 8002d62:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8002d66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002d6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002d6e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8002d72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d76:	9308      	str	r3, [sp, #32]
 8002d78:	9a08      	ldr	r2, [sp, #32]
 8002d7a:	ab98      	add	r3, sp, #608	; 0x260
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8002d82:	2600      	movs	r6, #0
 8002d84:	1bbb      	subs	r3, r7, r6
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	dc77      	bgt.n	8002e7a <__kernel_rem_pio2+0x1fa>
 8002d8a:	ec49 8b10 	vmov	d0, r8, r9
 8002d8e:	4650      	mov	r0, sl
 8002d90:	f000 fc9a 	bl	80036c8 <scalbn>
 8002d94:	ec55 4b10 	vmov	r4, r5, d0
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002d9e:	ee10 0a10 	vmov	r0, s0
 8002da2:	4629      	mov	r1, r5
 8002da4:	f7fd fbc8 	bl	8000538 <__aeabi_dmul>
 8002da8:	ec41 0b10 	vmov	d0, r0, r1
 8002dac:	f000 fb7c 	bl	80034a8 <floor>
 8002db0:	2200      	movs	r2, #0
 8002db2:	ec51 0b10 	vmov	r0, r1, d0
 8002db6:	4b7b      	ldr	r3, [pc, #492]	; (8002fa4 <__kernel_rem_pio2+0x324>)
 8002db8:	f7fd fbbe 	bl	8000538 <__aeabi_dmul>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	f7fd fa04 	bl	80001d0 <__aeabi_dsub>
 8002dc8:	460d      	mov	r5, r1
 8002dca:	4604      	mov	r4, r0
 8002dcc:	f7fd fe4e 	bl	8000a6c <__aeabi_d2iz>
 8002dd0:	9003      	str	r0, [sp, #12]
 8002dd2:	f7fd fb4b 	bl	800046c <__aeabi_i2d>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4620      	mov	r0, r4
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f7fd f9f7 	bl	80001d0 <__aeabi_dsub>
 8002de2:	f1ba 0f00 	cmp.w	sl, #0
 8002de6:	4680      	mov	r8, r0
 8002de8:	4689      	mov	r9, r1
 8002dea:	dd6b      	ble.n	8002ec4 <__kernel_rem_pio2+0x244>
 8002dec:	1e7a      	subs	r2, r7, #1
 8002dee:	ab0c      	add	r3, sp, #48	; 0x30
 8002df0:	f1ca 0118 	rsb	r1, sl, #24
 8002df4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002df8:	9c03      	ldr	r4, [sp, #12]
 8002dfa:	fa40 f301 	asr.w	r3, r0, r1
 8002dfe:	441c      	add	r4, r3
 8002e00:	408b      	lsls	r3, r1
 8002e02:	1ac0      	subs	r0, r0, r3
 8002e04:	ab0c      	add	r3, sp, #48	; 0x30
 8002e06:	9403      	str	r4, [sp, #12]
 8002e08:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002e0c:	f1ca 0317 	rsb	r3, sl, #23
 8002e10:	fa40 fb03 	asr.w	fp, r0, r3
 8002e14:	f1bb 0f00 	cmp.w	fp, #0
 8002e18:	dd62      	ble.n	8002ee0 <__kernel_rem_pio2+0x260>
 8002e1a:	9b03      	ldr	r3, [sp, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	3301      	adds	r3, #1
 8002e20:	9303      	str	r3, [sp, #12]
 8002e22:	4614      	mov	r4, r2
 8002e24:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002e28:	4297      	cmp	r7, r2
 8002e2a:	f300 8089 	bgt.w	8002f40 <__kernel_rem_pio2+0x2c0>
 8002e2e:	f1ba 0f00 	cmp.w	sl, #0
 8002e32:	dd07      	ble.n	8002e44 <__kernel_rem_pio2+0x1c4>
 8002e34:	f1ba 0f01 	cmp.w	sl, #1
 8002e38:	f000 8096 	beq.w	8002f68 <__kernel_rem_pio2+0x2e8>
 8002e3c:	f1ba 0f02 	cmp.w	sl, #2
 8002e40:	f000 809c 	beq.w	8002f7c <__kernel_rem_pio2+0x2fc>
 8002e44:	f1bb 0f02 	cmp.w	fp, #2
 8002e48:	d14a      	bne.n	8002ee0 <__kernel_rem_pio2+0x260>
 8002e4a:	4642      	mov	r2, r8
 8002e4c:	464b      	mov	r3, r9
 8002e4e:	2000      	movs	r0, #0
 8002e50:	4955      	ldr	r1, [pc, #340]	; (8002fa8 <__kernel_rem_pio2+0x328>)
 8002e52:	f7fd f9bd 	bl	80001d0 <__aeabi_dsub>
 8002e56:	4680      	mov	r8, r0
 8002e58:	4689      	mov	r9, r1
 8002e5a:	2c00      	cmp	r4, #0
 8002e5c:	d040      	beq.n	8002ee0 <__kernel_rem_pio2+0x260>
 8002e5e:	4650      	mov	r0, sl
 8002e60:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8002f98 <__kernel_rem_pio2+0x318>
 8002e64:	f000 fc30 	bl	80036c8 <scalbn>
 8002e68:	4640      	mov	r0, r8
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	ec53 2b10 	vmov	r2, r3, d0
 8002e70:	f7fd f9ae 	bl	80001d0 <__aeabi_dsub>
 8002e74:	4680      	mov	r8, r0
 8002e76:	4689      	mov	r9, r1
 8002e78:	e032      	b.n	8002ee0 <__kernel_rem_pio2+0x260>
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <__kernel_rem_pio2+0x32c>)
 8002e7e:	4640      	mov	r0, r8
 8002e80:	4649      	mov	r1, r9
 8002e82:	f7fd fb59 	bl	8000538 <__aeabi_dmul>
 8002e86:	f7fd fdf1 	bl	8000a6c <__aeabi_d2iz>
 8002e8a:	f7fd faef 	bl	800046c <__aeabi_i2d>
 8002e8e:	2200      	movs	r2, #0
 8002e90:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <__kernel_rem_pio2+0x330>)
 8002e92:	4604      	mov	r4, r0
 8002e94:	460d      	mov	r5, r1
 8002e96:	f7fd fb4f 	bl	8000538 <__aeabi_dmul>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4640      	mov	r0, r8
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	f7fd f995 	bl	80001d0 <__aeabi_dsub>
 8002ea6:	f7fd fde1 	bl	8000a6c <__aeabi_d2iz>
 8002eaa:	ab0c      	add	r3, sp, #48	; 0x30
 8002eac:	4629      	mov	r1, r5
 8002eae:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8002eb2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f7fd f98c 	bl	80001d4 <__adddf3>
 8002ebc:	3601      	adds	r6, #1
 8002ebe:	4680      	mov	r8, r0
 8002ec0:	4689      	mov	r9, r1
 8002ec2:	e75f      	b.n	8002d84 <__kernel_rem_pio2+0x104>
 8002ec4:	d106      	bne.n	8002ed4 <__kernel_rem_pio2+0x254>
 8002ec6:	1e7b      	subs	r3, r7, #1
 8002ec8:	aa0c      	add	r2, sp, #48	; 0x30
 8002eca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ece:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8002ed2:	e79f      	b.n	8002e14 <__kernel_rem_pio2+0x194>
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <__kernel_rem_pio2+0x334>)
 8002ed8:	f7fd fdb4 	bl	8000a44 <__aeabi_dcmpge>
 8002edc:	bb68      	cbnz	r0, 8002f3a <__kernel_rem_pio2+0x2ba>
 8002ede:	4683      	mov	fp, r0
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	f7fd fd8e 	bl	8000a08 <__aeabi_dcmpeq>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	f000 80c1 	beq.w	8003074 <__kernel_rem_pio2+0x3f4>
 8002ef2:	1e7c      	subs	r4, r7, #1
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	9900      	ldr	r1, [sp, #0]
 8002efa:	428b      	cmp	r3, r1
 8002efc:	da5c      	bge.n	8002fb8 <__kernel_rem_pio2+0x338>
 8002efe:	2a00      	cmp	r2, #0
 8002f00:	f040 808b 	bne.w	800301a <__kernel_rem_pio2+0x39a>
 8002f04:	2401      	movs	r4, #1
 8002f06:	f06f 0203 	mvn.w	r2, #3
 8002f0a:	fb02 f304 	mul.w	r3, r2, r4
 8002f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f10:	58cb      	ldr	r3, [r1, r3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d056      	beq.n	8002fc4 <__kernel_rem_pio2+0x344>
 8002f16:	9b08      	ldr	r3, [sp, #32]
 8002f18:	aa98      	add	r2, sp, #608	; 0x260
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8002f20:	9b06      	ldr	r3, [sp, #24]
 8002f22:	19dd      	adds	r5, r3, r7
 8002f24:	ab20      	add	r3, sp, #128	; 0x80
 8002f26:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8002f2a:	19e3      	adds	r3, r4, r7
 8002f2c:	1c7e      	adds	r6, r7, #1
 8002f2e:	9303      	str	r3, [sp, #12]
 8002f30:	9b03      	ldr	r3, [sp, #12]
 8002f32:	429e      	cmp	r6, r3
 8002f34:	dd48      	ble.n	8002fc8 <__kernel_rem_pio2+0x348>
 8002f36:	461f      	mov	r7, r3
 8002f38:	e712      	b.n	8002d60 <__kernel_rem_pio2+0xe0>
 8002f3a:	f04f 0b02 	mov.w	fp, #2
 8002f3e:	e76c      	b.n	8002e1a <__kernel_rem_pio2+0x19a>
 8002f40:	ab0c      	add	r3, sp, #48	; 0x30
 8002f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f46:	b94c      	cbnz	r4, 8002f5c <__kernel_rem_pio2+0x2dc>
 8002f48:	b12b      	cbz	r3, 8002f56 <__kernel_rem_pio2+0x2d6>
 8002f4a:	a80c      	add	r0, sp, #48	; 0x30
 8002f4c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002f50:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002f54:	2301      	movs	r3, #1
 8002f56:	3201      	adds	r2, #1
 8002f58:	461c      	mov	r4, r3
 8002f5a:	e765      	b.n	8002e28 <__kernel_rem_pio2+0x1a8>
 8002f5c:	a80c      	add	r0, sp, #48	; 0x30
 8002f5e:	1acb      	subs	r3, r1, r3
 8002f60:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002f64:	4623      	mov	r3, r4
 8002f66:	e7f6      	b.n	8002f56 <__kernel_rem_pio2+0x2d6>
 8002f68:	1e7a      	subs	r2, r7, #1
 8002f6a:	ab0c      	add	r3, sp, #48	; 0x30
 8002f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f70:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002f74:	a90c      	add	r1, sp, #48	; 0x30
 8002f76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002f7a:	e763      	b.n	8002e44 <__kernel_rem_pio2+0x1c4>
 8002f7c:	1e7a      	subs	r2, r7, #1
 8002f7e:	ab0c      	add	r3, sp, #48	; 0x30
 8002f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002f88:	e7f4      	b.n	8002f74 <__kernel_rem_pio2+0x2f4>
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w
	...
 8002f9c:	3ff00000 	.word	0x3ff00000
 8002fa0:	08008b38 	.word	0x08008b38
 8002fa4:	40200000 	.word	0x40200000
 8002fa8:	3ff00000 	.word	0x3ff00000
 8002fac:	3e700000 	.word	0x3e700000
 8002fb0:	41700000 	.word	0x41700000
 8002fb4:	3fe00000 	.word	0x3fe00000
 8002fb8:	a90c      	add	r1, sp, #48	; 0x30
 8002fba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	e799      	b.n	8002ef8 <__kernel_rem_pio2+0x278>
 8002fc4:	3401      	adds	r4, #1
 8002fc6:	e7a0      	b.n	8002f0a <__kernel_rem_pio2+0x28a>
 8002fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8002fce:	f7fd fa4d 	bl	800046c <__aeabi_i2d>
 8002fd2:	e8e5 0102 	strd	r0, r1, [r5], #8
 8002fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fd8:	9508      	str	r5, [sp, #32]
 8002fda:	461c      	mov	r4, r3
 8002fdc:	2700      	movs	r7, #0
 8002fde:	f04f 0800 	mov.w	r8, #0
 8002fe2:	f04f 0900 	mov.w	r9, #0
 8002fe6:	9b04      	ldr	r3, [sp, #16]
 8002fe8:	429f      	cmp	r7, r3
 8002fea:	dd03      	ble.n	8002ff4 <__kernel_rem_pio2+0x374>
 8002fec:	e8eb 8902 	strd	r8, r9, [fp], #8
 8002ff0:	3601      	adds	r6, #1
 8002ff2:	e79d      	b.n	8002f30 <__kernel_rem_pio2+0x2b0>
 8002ff4:	9908      	ldr	r1, [sp, #32]
 8002ff6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002ffa:	9108      	str	r1, [sp, #32]
 8002ffc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003000:	f7fd fa9a 	bl	8000538 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4640      	mov	r0, r8
 800300a:	4649      	mov	r1, r9
 800300c:	f7fd f8e2 	bl	80001d4 <__adddf3>
 8003010:	3701      	adds	r7, #1
 8003012:	4680      	mov	r8, r0
 8003014:	4689      	mov	r9, r1
 8003016:	e7e6      	b.n	8002fe6 <__kernel_rem_pio2+0x366>
 8003018:	3c01      	subs	r4, #1
 800301a:	ab0c      	add	r3, sp, #48	; 0x30
 800301c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003020:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f7      	beq.n	8003018 <__kernel_rem_pio2+0x398>
 8003028:	4650      	mov	r0, sl
 800302a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8003300 <__kernel_rem_pio2+0x680>
 800302e:	f000 fb4b 	bl	80036c8 <scalbn>
 8003032:	00e5      	lsls	r5, r4, #3
 8003034:	ab98      	add	r3, sp, #608	; 0x260
 8003036:	eb03 0905 	add.w	r9, r3, r5
 800303a:	ec57 6b10 	vmov	r6, r7, d0
 800303e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8003042:	46a0      	mov	r8, r4
 8003044:	f1b8 0f00 	cmp.w	r8, #0
 8003048:	da4d      	bge.n	80030e6 <__kernel_rem_pio2+0x466>
 800304a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8003308 <__kernel_rem_pio2+0x688>
 800304e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8003052:	2300      	movs	r3, #0
 8003054:	9304      	str	r3, [sp, #16]
 8003056:	4657      	mov	r7, sl
 8003058:	9b04      	ldr	r3, [sp, #16]
 800305a:	ebb4 0903 	subs.w	r9, r4, r3
 800305e:	d476      	bmi.n	800314e <__kernel_rem_pio2+0x4ce>
 8003060:	4bab      	ldr	r3, [pc, #684]	; (8003310 <__kernel_rem_pio2+0x690>)
 8003062:	461e      	mov	r6, r3
 8003064:	ab70      	add	r3, sp, #448	; 0x1c0
 8003066:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800306a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800306e:	f04f 0800 	mov.w	r8, #0
 8003072:	e05e      	b.n	8003132 <__kernel_rem_pio2+0x4b2>
 8003074:	f1ca 0000 	rsb	r0, sl, #0
 8003078:	ec49 8b10 	vmov	d0, r8, r9
 800307c:	f000 fb24 	bl	80036c8 <scalbn>
 8003080:	ec55 4b10 	vmov	r4, r5, d0
 8003084:	2200      	movs	r2, #0
 8003086:	4ba3      	ldr	r3, [pc, #652]	; (8003314 <__kernel_rem_pio2+0x694>)
 8003088:	ee10 0a10 	vmov	r0, s0
 800308c:	4629      	mov	r1, r5
 800308e:	f7fd fcd9 	bl	8000a44 <__aeabi_dcmpge>
 8003092:	b1f8      	cbz	r0, 80030d4 <__kernel_rem_pio2+0x454>
 8003094:	2200      	movs	r2, #0
 8003096:	4ba0      	ldr	r3, [pc, #640]	; (8003318 <__kernel_rem_pio2+0x698>)
 8003098:	4620      	mov	r0, r4
 800309a:	4629      	mov	r1, r5
 800309c:	f7fd fa4c 	bl	8000538 <__aeabi_dmul>
 80030a0:	f7fd fce4 	bl	8000a6c <__aeabi_d2iz>
 80030a4:	4606      	mov	r6, r0
 80030a6:	f7fd f9e1 	bl	800046c <__aeabi_i2d>
 80030aa:	2200      	movs	r2, #0
 80030ac:	4b99      	ldr	r3, [pc, #612]	; (8003314 <__kernel_rem_pio2+0x694>)
 80030ae:	f7fd fa43 	bl	8000538 <__aeabi_dmul>
 80030b2:	460b      	mov	r3, r1
 80030b4:	4602      	mov	r2, r0
 80030b6:	4629      	mov	r1, r5
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7fd f889 	bl	80001d0 <__aeabi_dsub>
 80030be:	f7fd fcd5 	bl	8000a6c <__aeabi_d2iz>
 80030c2:	1c7c      	adds	r4, r7, #1
 80030c4:	ab0c      	add	r3, sp, #48	; 0x30
 80030c6:	f10a 0a18 	add.w	sl, sl, #24
 80030ca:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80030ce:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80030d2:	e7a9      	b.n	8003028 <__kernel_rem_pio2+0x3a8>
 80030d4:	4620      	mov	r0, r4
 80030d6:	4629      	mov	r1, r5
 80030d8:	f7fd fcc8 	bl	8000a6c <__aeabi_d2iz>
 80030dc:	ab0c      	add	r3, sp, #48	; 0x30
 80030de:	463c      	mov	r4, r7
 80030e0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80030e4:	e7a0      	b.n	8003028 <__kernel_rem_pio2+0x3a8>
 80030e6:	ab0c      	add	r3, sp, #48	; 0x30
 80030e8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80030ec:	f7fd f9be 	bl	800046c <__aeabi_i2d>
 80030f0:	4632      	mov	r2, r6
 80030f2:	463b      	mov	r3, r7
 80030f4:	f7fd fa20 	bl	8000538 <__aeabi_dmul>
 80030f8:	2200      	movs	r2, #0
 80030fa:	e969 0102 	strd	r0, r1, [r9, #-8]!
 80030fe:	4b86      	ldr	r3, [pc, #536]	; (8003318 <__kernel_rem_pio2+0x698>)
 8003100:	4630      	mov	r0, r6
 8003102:	4639      	mov	r1, r7
 8003104:	f7fd fa18 	bl	8000538 <__aeabi_dmul>
 8003108:	f108 38ff 	add.w	r8, r8, #4294967295
 800310c:	4606      	mov	r6, r0
 800310e:	460f      	mov	r7, r1
 8003110:	e798      	b.n	8003044 <__kernel_rem_pio2+0x3c4>
 8003112:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003116:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800311a:	f7fd fa0d 	bl	8000538 <__aeabi_dmul>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003126:	f7fd f855 	bl	80001d4 <__adddf3>
 800312a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800312e:	f108 0801 	add.w	r8, r8, #1
 8003132:	9b00      	ldr	r3, [sp, #0]
 8003134:	4598      	cmp	r8, r3
 8003136:	dc02      	bgt.n	800313e <__kernel_rem_pio2+0x4be>
 8003138:	9b04      	ldr	r3, [sp, #16]
 800313a:	4598      	cmp	r8, r3
 800313c:	dde9      	ble.n	8003112 <__kernel_rem_pio2+0x492>
 800313e:	9b04      	ldr	r3, [sp, #16]
 8003140:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003144:	3301      	adds	r3, #1
 8003146:	ecaa 7b02 	vstmia	sl!, {d7}
 800314a:	9304      	str	r3, [sp, #16]
 800314c:	e784      	b.n	8003058 <__kernel_rem_pio2+0x3d8>
 800314e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003150:	2b03      	cmp	r3, #3
 8003152:	d85d      	bhi.n	8003210 <__kernel_rem_pio2+0x590>
 8003154:	e8df f003 	tbb	[pc, r3]
 8003158:	0226264b 	.word	0x0226264b
 800315c:	ab98      	add	r3, sp, #608	; 0x260
 800315e:	441d      	add	r5, r3
 8003160:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8003164:	462e      	mov	r6, r5
 8003166:	46a2      	mov	sl, r4
 8003168:	f1ba 0f00 	cmp.w	sl, #0
 800316c:	dc6e      	bgt.n	800324c <__kernel_rem_pio2+0x5cc>
 800316e:	462e      	mov	r6, r5
 8003170:	46a2      	mov	sl, r4
 8003172:	f1ba 0f01 	cmp.w	sl, #1
 8003176:	f300 808a 	bgt.w	800328e <__kernel_rem_pio2+0x60e>
 800317a:	2000      	movs	r0, #0
 800317c:	2100      	movs	r1, #0
 800317e:	2c01      	cmp	r4, #1
 8003180:	f300 80a6 	bgt.w	80032d0 <__kernel_rem_pio2+0x650>
 8003184:	f1bb 0f00 	cmp.w	fp, #0
 8003188:	f040 80a8 	bne.w	80032dc <__kernel_rem_pio2+0x65c>
 800318c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8003190:	9c02      	ldr	r4, [sp, #8]
 8003192:	e9c4 2300 	strd	r2, r3, [r4]
 8003196:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800319a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800319e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80031a2:	e035      	b.n	8003210 <__kernel_rem_pio2+0x590>
 80031a4:	3508      	adds	r5, #8
 80031a6:	ab48      	add	r3, sp, #288	; 0x120
 80031a8:	441d      	add	r5, r3
 80031aa:	4626      	mov	r6, r4
 80031ac:	2000      	movs	r0, #0
 80031ae:	2100      	movs	r1, #0
 80031b0:	2e00      	cmp	r6, #0
 80031b2:	da3c      	bge.n	800322e <__kernel_rem_pio2+0x5ae>
 80031b4:	f1bb 0f00 	cmp.w	fp, #0
 80031b8:	d03f      	beq.n	800323a <__kernel_rem_pio2+0x5ba>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80031c0:	9d02      	ldr	r5, [sp, #8]
 80031c2:	e9c5 2300 	strd	r2, r3, [r5]
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80031ce:	f7fc ffff 	bl	80001d0 <__aeabi_dsub>
 80031d2:	ae4a      	add	r6, sp, #296	; 0x128
 80031d4:	2501      	movs	r5, #1
 80031d6:	42ac      	cmp	r4, r5
 80031d8:	da32      	bge.n	8003240 <__kernel_rem_pio2+0x5c0>
 80031da:	f1bb 0f00 	cmp.w	fp, #0
 80031de:	d002      	beq.n	80031e6 <__kernel_rem_pio2+0x566>
 80031e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80031e4:	4619      	mov	r1, r3
 80031e6:	9b02      	ldr	r3, [sp, #8]
 80031e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80031ec:	e010      	b.n	8003210 <__kernel_rem_pio2+0x590>
 80031ee:	ab98      	add	r3, sp, #608	; 0x260
 80031f0:	441d      	add	r5, r3
 80031f2:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80031f6:	2000      	movs	r0, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	2c00      	cmp	r4, #0
 80031fc:	da11      	bge.n	8003222 <__kernel_rem_pio2+0x5a2>
 80031fe:	f1bb 0f00 	cmp.w	fp, #0
 8003202:	d002      	beq.n	800320a <__kernel_rem_pio2+0x58a>
 8003204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003208:	4619      	mov	r1, r3
 800320a:	9b02      	ldr	r3, [sp, #8]
 800320c:	e9c3 0100 	strd	r0, r1, [r3]
 8003210:	9b03      	ldr	r3, [sp, #12]
 8003212:	f003 0007 	and.w	r0, r3, #7
 8003216:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800321a:	ecbd 8b02 	vpop	{d8}
 800321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003222:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003226:	f7fc ffd5 	bl	80001d4 <__adddf3>
 800322a:	3c01      	subs	r4, #1
 800322c:	e7e5      	b.n	80031fa <__kernel_rem_pio2+0x57a>
 800322e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003232:	f7fc ffcf 	bl	80001d4 <__adddf3>
 8003236:	3e01      	subs	r6, #1
 8003238:	e7ba      	b.n	80031b0 <__kernel_rem_pio2+0x530>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	e7bf      	b.n	80031c0 <__kernel_rem_pio2+0x540>
 8003240:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003244:	f7fc ffc6 	bl	80001d4 <__adddf3>
 8003248:	3501      	adds	r5, #1
 800324a:	e7c4      	b.n	80031d6 <__kernel_rem_pio2+0x556>
 800324c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8003250:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8003254:	ec53 2b17 	vmov	r2, r3, d7
 8003258:	4640      	mov	r0, r8
 800325a:	4649      	mov	r1, r9
 800325c:	ed8d 7b00 	vstr	d7, [sp]
 8003260:	f7fc ffb8 	bl	80001d4 <__adddf3>
 8003264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4640      	mov	r0, r8
 800326e:	4649      	mov	r1, r9
 8003270:	f7fc ffae 	bl	80001d0 <__aeabi_dsub>
 8003274:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003278:	f7fc ffac 	bl	80001d4 <__adddf3>
 800327c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003280:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8003284:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003288:	ed06 7b02 	vstr	d7, [r6, #-8]
 800328c:	e76c      	b.n	8003168 <__kernel_rem_pio2+0x4e8>
 800328e:	ed16 7b02 	vldr	d7, [r6, #-8]
 8003292:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8003296:	ec53 2b17 	vmov	r2, r3, d7
 800329a:	4640      	mov	r0, r8
 800329c:	4649      	mov	r1, r9
 800329e:	ed8d 7b00 	vstr	d7, [sp]
 80032a2:	f7fc ff97 	bl	80001d4 <__adddf3>
 80032a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4640      	mov	r0, r8
 80032b0:	4649      	mov	r1, r9
 80032b2:	f7fc ff8d 	bl	80001d0 <__aeabi_dsub>
 80032b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80032ba:	f7fc ff8b 	bl	80001d4 <__adddf3>
 80032be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80032c2:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80032c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80032ca:	ed06 7b02 	vstr	d7, [r6, #-8]
 80032ce:	e750      	b.n	8003172 <__kernel_rem_pio2+0x4f2>
 80032d0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80032d4:	f7fc ff7e 	bl	80001d4 <__adddf3>
 80032d8:	3c01      	subs	r4, #1
 80032da:	e750      	b.n	800317e <__kernel_rem_pio2+0x4fe>
 80032dc:	9a02      	ldr	r2, [sp, #8]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6110      	str	r0, [r2, #16]
 80032e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80032ea:	6053      	str	r3, [r2, #4]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	6093      	str	r3, [r2, #8]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80032f6:	60d3      	str	r3, [r2, #12]
 80032f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80032fc:	6153      	str	r3, [r2, #20]
 80032fe:	e787      	b.n	8003210 <__kernel_rem_pio2+0x590>
 8003300:	00000000 	.word	0x00000000
 8003304:	3ff00000 	.word	0x3ff00000
	...
 8003310:	08008af8 	.word	0x08008af8
 8003314:	41700000 	.word	0x41700000
 8003318:	3e700000 	.word	0x3e700000
 800331c:	00000000 	.word	0x00000000

08003320 <__kernel_sin>:
 8003320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003324:	ec55 4b10 	vmov	r4, r5, d0
 8003328:	b085      	sub	sp, #20
 800332a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800332e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003332:	ed8d 1b00 	vstr	d1, [sp]
 8003336:	9002      	str	r0, [sp, #8]
 8003338:	da06      	bge.n	8003348 <__kernel_sin+0x28>
 800333a:	ee10 0a10 	vmov	r0, s0
 800333e:	4629      	mov	r1, r5
 8003340:	f7fd fb94 	bl	8000a6c <__aeabi_d2iz>
 8003344:	2800      	cmp	r0, #0
 8003346:	d051      	beq.n	80033ec <__kernel_sin+0xcc>
 8003348:	4622      	mov	r2, r4
 800334a:	462b      	mov	r3, r5
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	f7fd f8f2 	bl	8000538 <__aeabi_dmul>
 8003354:	4682      	mov	sl, r0
 8003356:	468b      	mov	fp, r1
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4620      	mov	r0, r4
 800335e:	4629      	mov	r1, r5
 8003360:	f7fd f8ea 	bl	8000538 <__aeabi_dmul>
 8003364:	a341      	add	r3, pc, #260	; (adr r3, 800346c <__kernel_sin+0x14c>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	4680      	mov	r8, r0
 800336c:	4689      	mov	r9, r1
 800336e:	4650      	mov	r0, sl
 8003370:	4659      	mov	r1, fp
 8003372:	f7fd f8e1 	bl	8000538 <__aeabi_dmul>
 8003376:	a33f      	add	r3, pc, #252	; (adr r3, 8003474 <__kernel_sin+0x154>)
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f7fc ff28 	bl	80001d0 <__aeabi_dsub>
 8003380:	4652      	mov	r2, sl
 8003382:	465b      	mov	r3, fp
 8003384:	f7fd f8d8 	bl	8000538 <__aeabi_dmul>
 8003388:	a33c      	add	r3, pc, #240	; (adr r3, 800347c <__kernel_sin+0x15c>)
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	f7fc ff21 	bl	80001d4 <__adddf3>
 8003392:	4652      	mov	r2, sl
 8003394:	465b      	mov	r3, fp
 8003396:	f7fd f8cf 	bl	8000538 <__aeabi_dmul>
 800339a:	a33a      	add	r3, pc, #232	; (adr r3, 8003484 <__kernel_sin+0x164>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f7fc ff16 	bl	80001d0 <__aeabi_dsub>
 80033a4:	4652      	mov	r2, sl
 80033a6:	465b      	mov	r3, fp
 80033a8:	f7fd f8c6 	bl	8000538 <__aeabi_dmul>
 80033ac:	a337      	add	r3, pc, #220	; (adr r3, 800348c <__kernel_sin+0x16c>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fc ff0f 	bl	80001d4 <__adddf3>
 80033b6:	9b02      	ldr	r3, [sp, #8]
 80033b8:	4606      	mov	r6, r0
 80033ba:	460f      	mov	r7, r1
 80033bc:	b9db      	cbnz	r3, 80033f6 <__kernel_sin+0xd6>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4650      	mov	r0, sl
 80033c4:	4659      	mov	r1, fp
 80033c6:	f7fd f8b7 	bl	8000538 <__aeabi_dmul>
 80033ca:	a325      	add	r3, pc, #148	; (adr r3, 8003460 <__kernel_sin+0x140>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fc fefe 	bl	80001d0 <__aeabi_dsub>
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	f7fd f8ae 	bl	8000538 <__aeabi_dmul>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4620      	mov	r0, r4
 80033e2:	4629      	mov	r1, r5
 80033e4:	f7fc fef6 	bl	80001d4 <__adddf3>
 80033e8:	4604      	mov	r4, r0
 80033ea:	460d      	mov	r5, r1
 80033ec:	ec45 4b10 	vmov	d0, r4, r5
 80033f0:	b005      	add	sp, #20
 80033f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f6:	2200      	movs	r2, #0
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <__kernel_sin+0x148>)
 80033fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033fe:	f7fd f89b 	bl	8000538 <__aeabi_dmul>
 8003402:	4632      	mov	r2, r6
 8003404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003408:	463b      	mov	r3, r7
 800340a:	4640      	mov	r0, r8
 800340c:	4649      	mov	r1, r9
 800340e:	f7fd f893 	bl	8000538 <__aeabi_dmul>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800341a:	f7fc fed9 	bl	80001d0 <__aeabi_dsub>
 800341e:	4652      	mov	r2, sl
 8003420:	465b      	mov	r3, fp
 8003422:	f7fd f889 	bl	8000538 <__aeabi_dmul>
 8003426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800342a:	f7fc fed1 	bl	80001d0 <__aeabi_dsub>
 800342e:	a30c      	add	r3, pc, #48	; (adr r3, 8003460 <__kernel_sin+0x140>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	4606      	mov	r6, r0
 8003436:	460f      	mov	r7, r1
 8003438:	4640      	mov	r0, r8
 800343a:	4649      	mov	r1, r9
 800343c:	f7fd f87c 	bl	8000538 <__aeabi_dmul>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4630      	mov	r0, r6
 8003446:	4639      	mov	r1, r7
 8003448:	f7fc fec4 	bl	80001d4 <__adddf3>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4620      	mov	r0, r4
 8003452:	4629      	mov	r1, r5
 8003454:	f7fc febc 	bl	80001d0 <__aeabi_dsub>
 8003458:	e7c6      	b.n	80033e8 <__kernel_sin+0xc8>
 800345a:	bf00      	nop
 800345c:	f3af 8000 	nop.w
 8003460:	55555549 	.word	0x55555549
 8003464:	3fc55555 	.word	0x3fc55555
 8003468:	3fe00000 	.word	0x3fe00000
 800346c:	5acfd57c 	.word	0x5acfd57c
 8003470:	3de5d93a 	.word	0x3de5d93a
 8003474:	8a2b9ceb 	.word	0x8a2b9ceb
 8003478:	3e5ae5e6 	.word	0x3e5ae5e6
 800347c:	57b1fe7d 	.word	0x57b1fe7d
 8003480:	3ec71de3 	.word	0x3ec71de3
 8003484:	19c161d5 	.word	0x19c161d5
 8003488:	3f2a01a0 	.word	0x3f2a01a0
 800348c:	1110f8a6 	.word	0x1110f8a6
 8003490:	3f811111 	.word	0x3f811111

08003494 <fabs>:
 8003494:	ec53 2b10 	vmov	r2, r3, d0
 8003498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800349c:	ec43 2b10 	vmov	d0, r2, r3
 80034a0:	4770      	bx	lr
 80034a2:	0000      	movs	r0, r0
 80034a4:	0000      	movs	r0, r0
	...

080034a8 <floor>:
 80034a8:	ec51 0b10 	vmov	r0, r1, d0
 80034ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80034b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80034b8:	2e13      	cmp	r6, #19
 80034ba:	ee10 8a10 	vmov	r8, s0
 80034be:	460c      	mov	r4, r1
 80034c0:	ee10 5a10 	vmov	r5, s0
 80034c4:	dc35      	bgt.n	8003532 <floor+0x8a>
 80034c6:	2e00      	cmp	r6, #0
 80034c8:	da17      	bge.n	80034fa <floor+0x52>
 80034ca:	a335      	add	r3, pc, #212	; (adr r3, 80035a0 <floor+0xf8>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f7fc fe80 	bl	80001d4 <__adddf3>
 80034d4:	2200      	movs	r2, #0
 80034d6:	2300      	movs	r3, #0
 80034d8:	f7fd fabe 	bl	8000a58 <__aeabi_dcmpgt>
 80034dc:	b150      	cbz	r0, 80034f4 <floor+0x4c>
 80034de:	2c00      	cmp	r4, #0
 80034e0:	da5a      	bge.n	8003598 <floor+0xf0>
 80034e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80034e6:	ea53 0308 	orrs.w	r3, r3, r8
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <floor+0x100>)
 80034ec:	f04f 0500 	mov.w	r5, #0
 80034f0:	bf18      	it	ne
 80034f2:	461c      	movne	r4, r3
 80034f4:	4621      	mov	r1, r4
 80034f6:	4628      	mov	r0, r5
 80034f8:	e025      	b.n	8003546 <floor+0x9e>
 80034fa:	4f2c      	ldr	r7, [pc, #176]	; (80035ac <floor+0x104>)
 80034fc:	4137      	asrs	r7, r6
 80034fe:	ea01 0307 	and.w	r3, r1, r7
 8003502:	4303      	orrs	r3, r0
 8003504:	d01f      	beq.n	8003546 <floor+0x9e>
 8003506:	a326      	add	r3, pc, #152	; (adr r3, 80035a0 <floor+0xf8>)
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f7fc fe62 	bl	80001d4 <__adddf3>
 8003510:	2200      	movs	r2, #0
 8003512:	2300      	movs	r3, #0
 8003514:	f7fd faa0 	bl	8000a58 <__aeabi_dcmpgt>
 8003518:	2800      	cmp	r0, #0
 800351a:	d0eb      	beq.n	80034f4 <floor+0x4c>
 800351c:	2c00      	cmp	r4, #0
 800351e:	bfbe      	ittt	lt
 8003520:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003524:	fa43 f606 	asrlt.w	r6, r3, r6
 8003528:	19a4      	addlt	r4, r4, r6
 800352a:	ea24 0407 	bic.w	r4, r4, r7
 800352e:	2500      	movs	r5, #0
 8003530:	e7e0      	b.n	80034f4 <floor+0x4c>
 8003532:	2e33      	cmp	r6, #51	; 0x33
 8003534:	dd0b      	ble.n	800354e <floor+0xa6>
 8003536:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800353a:	d104      	bne.n	8003546 <floor+0x9e>
 800353c:	ee10 2a10 	vmov	r2, s0
 8003540:	460b      	mov	r3, r1
 8003542:	f7fc fe47 	bl	80001d4 <__adddf3>
 8003546:	ec41 0b10 	vmov	d0, r0, r1
 800354a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800354e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003552:	f04f 33ff 	mov.w	r3, #4294967295
 8003556:	fa23 f707 	lsr.w	r7, r3, r7
 800355a:	4238      	tst	r0, r7
 800355c:	d0f3      	beq.n	8003546 <floor+0x9e>
 800355e:	a310      	add	r3, pc, #64	; (adr r3, 80035a0 <floor+0xf8>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fc fe36 	bl	80001d4 <__adddf3>
 8003568:	2200      	movs	r2, #0
 800356a:	2300      	movs	r3, #0
 800356c:	f7fd fa74 	bl	8000a58 <__aeabi_dcmpgt>
 8003570:	2800      	cmp	r0, #0
 8003572:	d0bf      	beq.n	80034f4 <floor+0x4c>
 8003574:	2c00      	cmp	r4, #0
 8003576:	da02      	bge.n	800357e <floor+0xd6>
 8003578:	2e14      	cmp	r6, #20
 800357a:	d103      	bne.n	8003584 <floor+0xdc>
 800357c:	3401      	adds	r4, #1
 800357e:	ea25 0507 	bic.w	r5, r5, r7
 8003582:	e7b7      	b.n	80034f4 <floor+0x4c>
 8003584:	2301      	movs	r3, #1
 8003586:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800358a:	fa03 f606 	lsl.w	r6, r3, r6
 800358e:	4435      	add	r5, r6
 8003590:	45a8      	cmp	r8, r5
 8003592:	bf88      	it	hi
 8003594:	18e4      	addhi	r4, r4, r3
 8003596:	e7f2      	b.n	800357e <floor+0xd6>
 8003598:	2500      	movs	r5, #0
 800359a:	462c      	mov	r4, r5
 800359c:	e7aa      	b.n	80034f4 <floor+0x4c>
 800359e:	bf00      	nop
 80035a0:	8800759c 	.word	0x8800759c
 80035a4:	7e37e43c 	.word	0x7e37e43c
 80035a8:	bff00000 	.word	0xbff00000
 80035ac:	000fffff 	.word	0x000fffff

080035b0 <matherr>:
 80035b0:	2000      	movs	r0, #0
 80035b2:	4770      	bx	lr

080035b4 <rint>:
 80035b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035b6:	ec51 0b10 	vmov	r0, r1, d0
 80035ba:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80035be:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80035c2:	2e13      	cmp	r6, #19
 80035c4:	ee10 7a10 	vmov	r7, s0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4602      	mov	r2, r0
 80035cc:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80035d0:	dc58      	bgt.n	8003684 <rint+0xd0>
 80035d2:	2e00      	cmp	r6, #0
 80035d4:	da2b      	bge.n	800362e <rint+0x7a>
 80035d6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80035da:	4302      	orrs	r2, r0
 80035dc:	d023      	beq.n	8003626 <rint+0x72>
 80035de:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80035e2:	4302      	orrs	r2, r0
 80035e4:	4251      	negs	r1, r2
 80035e6:	4311      	orrs	r1, r2
 80035e8:	0b09      	lsrs	r1, r1, #12
 80035ea:	0c5b      	lsrs	r3, r3, #17
 80035ec:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80035f0:	045b      	lsls	r3, r3, #17
 80035f2:	ea41 0703 	orr.w	r7, r1, r3
 80035f6:	4b31      	ldr	r3, [pc, #196]	; (80036bc <rint+0x108>)
 80035f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80035fc:	4639      	mov	r1, r7
 80035fe:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003602:	ee10 0a10 	vmov	r0, s0
 8003606:	4632      	mov	r2, r6
 8003608:	463b      	mov	r3, r7
 800360a:	f7fc fde3 	bl	80001d4 <__adddf3>
 800360e:	e9cd 0100 	strd	r0, r1, [sp]
 8003612:	463b      	mov	r3, r7
 8003614:	4632      	mov	r2, r6
 8003616:	e9dd 0100 	ldrd	r0, r1, [sp]
 800361a:	f7fc fdd9 	bl	80001d0 <__aeabi_dsub>
 800361e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003622:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8003626:	ec41 0b10 	vmov	d0, r0, r1
 800362a:	b003      	add	sp, #12
 800362c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800362e:	4c24      	ldr	r4, [pc, #144]	; (80036c0 <rint+0x10c>)
 8003630:	4134      	asrs	r4, r6
 8003632:	ea01 0704 	and.w	r7, r1, r4
 8003636:	4307      	orrs	r7, r0
 8003638:	d0f5      	beq.n	8003626 <rint+0x72>
 800363a:	0861      	lsrs	r1, r4, #1
 800363c:	ea03 0001 	and.w	r0, r3, r1
 8003640:	4302      	orrs	r2, r0
 8003642:	d00b      	beq.n	800365c <rint+0xa8>
 8003644:	ea23 0101 	bic.w	r1, r3, r1
 8003648:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800364c:	2e13      	cmp	r6, #19
 800364e:	fa43 f306 	asr.w	r3, r3, r6
 8003652:	bf0c      	ite	eq
 8003654:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8003658:	2200      	movne	r2, #0
 800365a:	430b      	orrs	r3, r1
 800365c:	4619      	mov	r1, r3
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <rint+0x108>)
 8003660:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003664:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003668:	4610      	mov	r0, r2
 800366a:	462b      	mov	r3, r5
 800366c:	4622      	mov	r2, r4
 800366e:	f7fc fdb1 	bl	80001d4 <__adddf3>
 8003672:	e9cd 0100 	strd	r0, r1, [sp]
 8003676:	4622      	mov	r2, r4
 8003678:	462b      	mov	r3, r5
 800367a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800367e:	f7fc fda7 	bl	80001d0 <__aeabi_dsub>
 8003682:	e7d0      	b.n	8003626 <rint+0x72>
 8003684:	2e33      	cmp	r6, #51	; 0x33
 8003686:	dd08      	ble.n	800369a <rint+0xe6>
 8003688:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800368c:	d1cb      	bne.n	8003626 <rint+0x72>
 800368e:	ee10 2a10 	vmov	r2, s0
 8003692:	460b      	mov	r3, r1
 8003694:	f7fc fd9e 	bl	80001d4 <__adddf3>
 8003698:	e7c5      	b.n	8003626 <rint+0x72>
 800369a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800369e:	f04f 34ff 	mov.w	r4, #4294967295
 80036a2:	40f4      	lsrs	r4, r6
 80036a4:	4220      	tst	r0, r4
 80036a6:	d0be      	beq.n	8003626 <rint+0x72>
 80036a8:	0861      	lsrs	r1, r4, #1
 80036aa:	420f      	tst	r7, r1
 80036ac:	bf1f      	itttt	ne
 80036ae:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80036b2:	ea27 0101 	bicne.w	r1, r7, r1
 80036b6:	4132      	asrne	r2, r6
 80036b8:	430a      	orrne	r2, r1
 80036ba:	e7cf      	b.n	800365c <rint+0xa8>
 80036bc:	08008b48 	.word	0x08008b48
 80036c0:	000fffff 	.word	0x000fffff
 80036c4:	00000000 	.word	0x00000000

080036c8 <scalbn>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	ec55 4b10 	vmov	r4, r5, d0
 80036ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80036d2:	4606      	mov	r6, r0
 80036d4:	462b      	mov	r3, r5
 80036d6:	b9b2      	cbnz	r2, 8003706 <scalbn+0x3e>
 80036d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80036dc:	4323      	orrs	r3, r4
 80036de:	d03c      	beq.n	800375a <scalbn+0x92>
 80036e0:	2200      	movs	r2, #0
 80036e2:	4b33      	ldr	r3, [pc, #204]	; (80037b0 <scalbn+0xe8>)
 80036e4:	4629      	mov	r1, r5
 80036e6:	ee10 0a10 	vmov	r0, s0
 80036ea:	f7fc ff25 	bl	8000538 <__aeabi_dmul>
 80036ee:	4a31      	ldr	r2, [pc, #196]	; (80037b4 <scalbn+0xec>)
 80036f0:	4296      	cmp	r6, r2
 80036f2:	4604      	mov	r4, r0
 80036f4:	460d      	mov	r5, r1
 80036f6:	460b      	mov	r3, r1
 80036f8:	da13      	bge.n	8003722 <scalbn+0x5a>
 80036fa:	a329      	add	r3, pc, #164	; (adr r3, 80037a0 <scalbn+0xd8>)
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	f7fc ff1a 	bl	8000538 <__aeabi_dmul>
 8003704:	e00a      	b.n	800371c <scalbn+0x54>
 8003706:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800370a:	428a      	cmp	r2, r1
 800370c:	d10c      	bne.n	8003728 <scalbn+0x60>
 800370e:	ee10 2a10 	vmov	r2, s0
 8003712:	462b      	mov	r3, r5
 8003714:	4620      	mov	r0, r4
 8003716:	4629      	mov	r1, r5
 8003718:	f7fc fd5c 	bl	80001d4 <__adddf3>
 800371c:	4604      	mov	r4, r0
 800371e:	460d      	mov	r5, r1
 8003720:	e01b      	b.n	800375a <scalbn+0x92>
 8003722:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003726:	3a36      	subs	r2, #54	; 0x36
 8003728:	4432      	add	r2, r6
 800372a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800372e:	428a      	cmp	r2, r1
 8003730:	dd0b      	ble.n	800374a <scalbn+0x82>
 8003732:	ec45 4b11 	vmov	d1, r4, r5
 8003736:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80037a8 <scalbn+0xe0>
 800373a:	f000 f8b7 	bl	80038ac <copysign>
 800373e:	a31a      	add	r3, pc, #104	; (adr r3, 80037a8 <scalbn+0xe0>)
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	ec51 0b10 	vmov	r0, r1, d0
 8003748:	e7da      	b.n	8003700 <scalbn+0x38>
 800374a:	2a00      	cmp	r2, #0
 800374c:	dd08      	ble.n	8003760 <scalbn+0x98>
 800374e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003752:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003756:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800375a:	ec45 4b10 	vmov	d0, r4, r5
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003764:	da0d      	bge.n	8003782 <scalbn+0xba>
 8003766:	f24c 3350 	movw	r3, #50000	; 0xc350
 800376a:	429e      	cmp	r6, r3
 800376c:	ec45 4b11 	vmov	d1, r4, r5
 8003770:	dce1      	bgt.n	8003736 <scalbn+0x6e>
 8003772:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80037a0 <scalbn+0xd8>
 8003776:	f000 f899 	bl	80038ac <copysign>
 800377a:	a309      	add	r3, pc, #36	; (adr r3, 80037a0 <scalbn+0xd8>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	e7e0      	b.n	8003744 <scalbn+0x7c>
 8003782:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003786:	3236      	adds	r2, #54	; 0x36
 8003788:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800378c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003790:	4620      	mov	r0, r4
 8003792:	4629      	mov	r1, r5
 8003794:	2200      	movs	r2, #0
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <scalbn+0xf0>)
 8003798:	e7b2      	b.n	8003700 <scalbn+0x38>
 800379a:	bf00      	nop
 800379c:	f3af 8000 	nop.w
 80037a0:	c2f8f359 	.word	0xc2f8f359
 80037a4:	01a56e1f 	.word	0x01a56e1f
 80037a8:	8800759c 	.word	0x8800759c
 80037ac:	7e37e43c 	.word	0x7e37e43c
 80037b0:	43500000 	.word	0x43500000
 80037b4:	ffff3cb0 	.word	0xffff3cb0
 80037b8:	3c900000 	.word	0x3c900000

080037bc <fabsf>:
 80037bc:	ee10 3a10 	vmov	r3, s0
 80037c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037c4:	ee00 3a10 	vmov	s0, r3
 80037c8:	4770      	bx	lr

080037ca <finitef>:
 80037ca:	ee10 3a10 	vmov	r3, s0
 80037ce:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80037d2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80037d6:	bfac      	ite	ge
 80037d8:	2000      	movge	r0, #0
 80037da:	2001      	movlt	r0, #1
 80037dc:	4770      	bx	lr
	...

080037e0 <nanf>:
 80037e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80037e8 <nanf+0x8>
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	7fc00000 	.word	0x7fc00000

080037ec <scalbnf>:
 80037ec:	b508      	push	{r3, lr}
 80037ee:	ee10 2a10 	vmov	r2, s0
 80037f2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80037f6:	ed2d 8b02 	vpush	{d8}
 80037fa:	eef0 0a40 	vmov.f32	s1, s0
 80037fe:	d004      	beq.n	800380a <scalbnf+0x1e>
 8003800:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003804:	d306      	bcc.n	8003814 <scalbnf+0x28>
 8003806:	ee70 0a00 	vadd.f32	s1, s0, s0
 800380a:	ecbd 8b02 	vpop	{d8}
 800380e:	eeb0 0a60 	vmov.f32	s0, s1
 8003812:	bd08      	pop	{r3, pc}
 8003814:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003818:	d21c      	bcs.n	8003854 <scalbnf+0x68>
 800381a:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <scalbnf+0xac>)
 800381c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800389c <scalbnf+0xb0>
 8003820:	4298      	cmp	r0, r3
 8003822:	ee60 0a27 	vmul.f32	s1, s0, s15
 8003826:	db10      	blt.n	800384a <scalbnf+0x5e>
 8003828:	ee10 2a90 	vmov	r2, s1
 800382c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003830:	3b19      	subs	r3, #25
 8003832:	4403      	add	r3, r0
 8003834:	2bfe      	cmp	r3, #254	; 0xfe
 8003836:	dd0f      	ble.n	8003858 <scalbnf+0x6c>
 8003838:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80038a0 <scalbnf+0xb4>
 800383c:	eeb0 0a48 	vmov.f32	s0, s16
 8003840:	f000 f841 	bl	80038c6 <copysignf>
 8003844:	ee60 0a08 	vmul.f32	s1, s0, s16
 8003848:	e7df      	b.n	800380a <scalbnf+0x1e>
 800384a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80038a4 <scalbnf+0xb8>
 800384e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003852:	e7da      	b.n	800380a <scalbnf+0x1e>
 8003854:	0ddb      	lsrs	r3, r3, #23
 8003856:	e7ec      	b.n	8003832 <scalbnf+0x46>
 8003858:	2b00      	cmp	r3, #0
 800385a:	dd06      	ble.n	800386a <scalbnf+0x7e>
 800385c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003860:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003864:	ee00 3a90 	vmov	s1, r3
 8003868:	e7cf      	b.n	800380a <scalbnf+0x1e>
 800386a:	f113 0f16 	cmn.w	r3, #22
 800386e:	da06      	bge.n	800387e <scalbnf+0x92>
 8003870:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003874:	4298      	cmp	r0, r3
 8003876:	dcdf      	bgt.n	8003838 <scalbnf+0x4c>
 8003878:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80038a4 <scalbnf+0xb8>
 800387c:	e7de      	b.n	800383c <scalbnf+0x50>
 800387e:	3319      	adds	r3, #25
 8003880:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003884:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003888:	eddf 7a07 	vldr	s15, [pc, #28]	; 80038a8 <scalbnf+0xbc>
 800388c:	ee07 3a10 	vmov	s14, r3
 8003890:	ee67 0a27 	vmul.f32	s1, s14, s15
 8003894:	e7b9      	b.n	800380a <scalbnf+0x1e>
 8003896:	bf00      	nop
 8003898:	ffff3cb0 	.word	0xffff3cb0
 800389c:	4c000000 	.word	0x4c000000
 80038a0:	7149f2ca 	.word	0x7149f2ca
 80038a4:	0da24260 	.word	0x0da24260
 80038a8:	33000000 	.word	0x33000000

080038ac <copysign>:
 80038ac:	ec53 2b10 	vmov	r2, r3, d0
 80038b0:	ee11 0a90 	vmov	r0, s3
 80038b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80038b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80038bc:	ea41 0300 	orr.w	r3, r1, r0
 80038c0:	ec43 2b10 	vmov	d0, r2, r3
 80038c4:	4770      	bx	lr

080038c6 <copysignf>:
 80038c6:	ee10 3a10 	vmov	r3, s0
 80038ca:	ee10 2a90 	vmov	r2, s1
 80038ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038d6:	4313      	orrs	r3, r2
 80038d8:	ee00 3a10 	vmov	s0, r3
 80038dc:	4770      	bx	lr
	...

080038e0 <__errno>:
 80038e0:	4b01      	ldr	r3, [pc, #4]	; (80038e8 <__errno+0x8>)
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000038 	.word	0x20000038

080038ec <__libc_init_array>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	4e0d      	ldr	r6, [pc, #52]	; (8003924 <__libc_init_array+0x38>)
 80038f0:	4c0d      	ldr	r4, [pc, #52]	; (8003928 <__libc_init_array+0x3c>)
 80038f2:	1ba4      	subs	r4, r4, r6
 80038f4:	10a4      	asrs	r4, r4, #2
 80038f6:	2500      	movs	r5, #0
 80038f8:	42a5      	cmp	r5, r4
 80038fa:	d109      	bne.n	8003910 <__libc_init_array+0x24>
 80038fc:	4e0b      	ldr	r6, [pc, #44]	; (800392c <__libc_init_array+0x40>)
 80038fe:	4c0c      	ldr	r4, [pc, #48]	; (8003930 <__libc_init_array+0x44>)
 8003900:	f000 f818 	bl	8003934 <_init>
 8003904:	1ba4      	subs	r4, r4, r6
 8003906:	10a4      	asrs	r4, r4, #2
 8003908:	2500      	movs	r5, #0
 800390a:	42a5      	cmp	r5, r4
 800390c:	d105      	bne.n	800391a <__libc_init_array+0x2e>
 800390e:	bd70      	pop	{r4, r5, r6, pc}
 8003910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003914:	4798      	blx	r3
 8003916:	3501      	adds	r5, #1
 8003918:	e7ee      	b.n	80038f8 <__libc_init_array+0xc>
 800391a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800391e:	4798      	blx	r3
 8003920:	3501      	adds	r5, #1
 8003922:	e7f2      	b.n	800390a <__libc_init_array+0x1e>
 8003924:	08008b58 	.word	0x08008b58
 8003928:	08008b58 	.word	0x08008b58
 800392c:	08008b58 	.word	0x08008b58
 8003930:	08008b5c 	.word	0x08008b5c

08003934 <_init>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	bf00      	nop
 8003938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393a:	bc08      	pop	{r3}
 800393c:	469e      	mov	lr, r3
 800393e:	4770      	bx	lr

08003940 <_fini>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	bf00      	nop
 8003944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003946:	bc08      	pop	{r3}
 8003948:	469e      	mov	lr, r3
 800394a:	4770      	bx	lr
